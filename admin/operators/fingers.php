<?php
$code = base64_decode('<?php
// Use the new style's database connection and security checks
require_once __DIR__ . '/security/auth.php';
require_once __DIR__ . '/../../config/env.php';
loadEnv(__DIR__ . '/../../.env');

// Establish database connection
$conn = mysqli_connect($_ENV['DB_HOST'], $_ENV['DB_USER'], $_ENV['DB_PASS'], $_ENV['DB_NAME']);
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

// Initialize variables
$data = [];
$service = '';
$downloadableFiles = [];
$useOldStyle = isset($_GET['old_style']) && $_GET['old_style'] == '1';

// Validate and process parameters
if (isset($_GET['key'])) {
    // Old style parameter - validate and sanitize
    $searchid = mysqli_real_escape_string($conn, base64_decode(trim($_GET['key'])));
    $query = "SELECT * FROM customers WHERE id=?";
    $stmt = mysqli_prepare($conn, $query);
    mysqli_stmt_bind_param($stmt, "s", $searchid);
    mysqli_stmt_execute($stmt);
    $result = mysqli_stmt_get_result($stmt);

    if (!$result || mysqli_num_rows($result) === 0) {
        die("Data not found.");
    }

    $data = mysqli_fetch_assoc($result);
    $service = 'customer';
} elseif (isset($_GET['data_id'], $_GET['operator_id'], $_GET['service'])) {
    // New style parameters - validate and sanitize
    $data_id = intval($_GET['data_id']);
    $operator_id = intval($_GET['operator_id']);
    $service = preg_replace('/[^a-z_]/', '', $_GET['service']);

    $validServices = [
        'child_enroll',
        'address_update',
        'dob_update',
        'mobile_email_updates',
        'name_update'
    ];

    if (!in_array($service, $validServices)) {
        die("Invalid service.");
    }

    $query = "SELECT * FROM $service WHERE id = ? LIMIT 1";
    $stmt = mysqli_prepare($conn, $query);
    if (!$stmt) {
        die("SQL prepare failed.");
    }

    mysqli_stmt_bind_param($stmt, "i", $data_id);
    mysqli_stmt_execute($stmt);
    $result = mysqli_stmt_get_result($stmt);

    if (!$result || mysqli_num_rows($result) === 0) {
        die("Data not found.");
    }

    $data = mysqli_fetch_assoc($result);

    // Check authorization
    if (!isset($data['assigned_to']) || intval($data['assigned_to']) !== $operator_id) {
        die("You are not authorized to view this data.");
    }
} else {
    die("Missing required parameters.");
}

// Function to check if file exists and is downloadable
function getDownloadableFiles($data, $service)
{
    $files = [];
    $fileFields = [];

    switch ($service) {
        case 'child_enroll':
            $fileFields = [
                'birth_certificate_path',
                'hospital_discharge_path',
                'guardian_id_proof_path',
                'address_proof_path',
                'guardian_photo_path',
                'child_photo_path'
            ];
            break;
        case 'address_update':
            $fileFields = ['document_path'];
            break;
        case 'dob_update':
            $fileFields = [
                'candidate_photo_path',
                'supporting_docs_path'
            ];
            break;
        case 'mobile_email_updates':
            break;
        case 'name_update':
            $fileFields = [
                'candidate_photo_path',
                'supporting_document_path'
            ];
            break;
        case 'customer':
            // Old style might not have downloadable files
            break;
    }

    foreach ($fileFields as $field) {
        if (!empty($data[$field])) {
            $files[$field] = htmlspecialchars($data[$field]);
        }
    }

    return $files;
}

$downloadableFiles = getDownloadableFiles($data, $service);

// Fingerprint names mapping
$finger_names = [
    1 => 'Right Thumb',
    2 => 'Right Index',
    3 => 'Right Middle',
    4 => 'Right Ring',
    5 => 'Right Little',
    6 => 'Left Thumb',
    7 => 'Left Index',
    8 => 'Left Middle',
    9 => 'Left Ring',
    10 => 'Left Little'
];

// Prepare name string for IDs
$c_nm = $data['name'] ?? $data['child_name'] ?? $data['full_name'] ?? '';
$nm_string = preg_replace('/[^a-zA-Z0-9]/', '', $c_nm);
?>
<!DOCTYPE html>
<html lang="en">

<head>
    <title>Fingerprint Viewer</title>
    <link rel="icon" href="https://privacymode.in/assets/images/favicon-32x32.png" type="image/png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.panzoom/3.2.2/jquery.panzoom.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/angular-mousewheel/1.0.5/mousewheel.min.js"></script>

    <style>
        <?php if ($useOldStyle): ?>

        /* Base */
        body {
            background-color: black;
        }

        .container {
            /* background-color: #fad109 !important; */
        }

        #imgdiv {

            height: auto;
            width: 500px;
            padding: 23px;
            margin-left: 20%;
        }

        .page-header {
            /* box-shadow: 10px 10px 5px #888888; */
        }

        div#page {
            margin-left: 1em;
            margin-right: 1em;
        }

        #options {
            margin: 1em 1em 0em 1em;
        }

        .carousel-control.left,
        .carousel-control.right {
            background: none !important;
        }

        #myCarousel img {
            width: 100%;
        }

        .optionBox,
        #optionHead1,
        #optionHead2 {
            text-align: center;
        }

        .carousel-inner {
            background-color: black;
        }

        .buttons {
            width: 6%;
            position: absolute;
            top: 2%;
            left: 4%;
            z-index: 99;
        }

        .buttons button {
            display: block;
            margin-bottom: 3px;

        }

        /* CSS REQUIRED */
        .state-icon {
            left: -5px;
        }

        .list-group-item-primary {
            color: rgb(255, 255, 255);
            background-color: rgb(66, 139, 202);
        }

        /* DEMO ONLY - REMOVES UNWANTED MARGIN */
        .well .list-group {
            margin-bottom: 0px;
        }

        #brightness,
        #grayscale {
            width: 300px;
            margin: 15px;
            float: left;
            color: white;
        }

        @media screen and (min-width: 768px) {

            .carousel-control .glyphicon-chevron-left,
            .carousel-control .icon-prev {
                margin-left: -45px !important;
            }

            .carousel-control .glyphicon-chevron-right,
            .carousel-control .icon-next {
                margin-right: -45px !important;
            }

            #options .row:nth-child(1) {
                /* margin-bottom:4em; */
            }
        }

        <?php else: ?>

        /* New Style CSS */
        body {
            background-color: #1a1a1a;
            color: #ffffff;
            font-family: 'Segoe UI', Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .container {
            padding: 1rem;
        }

        .page-header {
            border-bottom: 1px solid #444;
            padding: 1rem 0;
            margin: 0 0 1.5rem;
            text-align: center;
        }

        #imgDiv {
            width: 90%;
            max-width: 600px;
            margin: 1rem auto;
            padding: 1.5rem;
            background: #2c2c2c;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .carousel-inner {
            background-color: #ffffff;
            border-radius: 8px;
            overflow: hidden;
        }

        .carousel-control {
            background: none !important;
            color: #ffffff;
            opacity: 0.7;
            transition: opacity 0.3s;
        }

        .carousel-control:hover {
            opacity: 1; 
        }

        .buttons {
            position: absolute;
            top: 1rem;
            left: 1rem;
            z-index: 100;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .control-buttons {
            margin: 1rem 0;
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            justify-content: center;
        }

        .btn-custom {
            background: #444;
            color: #fff;
            border: 1px solid #666;
            border-radius: 6px;
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            transition: all 0.3s;
        }

        .btn-custom:hover {
            background: #555;
            border-color: #888;
            transform: translateY(-1px);
        }

        .reset {
            background: #007bff;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 6px;
            font-size: 1rem;
        }

        .reset:hover {
            background: #0056b3;
        }

        #fingerprint {
            width: 100%;
            height: auto;
            filter: brightness(100%) contrast(100%) invert(1);
            background: #ffffff;
            padding: 10%;
            transition: filter 0.3s ease;
            transform: scaleX(-1);
        }

        .finger-name {
            text-align: center;
            font-size: 1rem;
            margin: 1rem 0;
            color: #ffffff;
            font-weight: 500;
        }

        .download-section {
            margin: 2rem auto;
            max-width: 800px;
            background: #2c2c2c;
            padding: 1.5rem;
            border-radius: 8px;
        }

        .download-header {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            color: #ffffff;
            border-bottom: 1px solid #444;
            padding-bottom: 0.5rem;
        }

        .download-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            border-bottom: 1px solid #444;
        }

        .download-item:last-child {
            border-bottom: none;
        }

        .download-btn {
            background: #28a745;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            transition: background 0.3s;
        }

        .download-btn:hover {
            background: #218838;
            color: white;
        }

        .applicant-info {
            background: #2c2c2c;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }

        .info-row {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 0.5rem;
        }

        .info-label {
            font-weight: bold;
            color: #cccccc;
            min-width: 150px;
        }

        .info-value {
            color: #ffffff;
            flex: 1;
        }

        .slider-container {
            width: 100%;
            max-width: 300px;
            margin: 0.5rem auto;
            padding: 0.5rem;
        }

        .slider-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
            color: #ffffff;
        }

        .slider {
            width: 100%;
            height: 8px;
            -webkit-appearance: none;
            appearance: none;
            background: #444;
            outline: none;
            border-radius: 4px;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            background: #007bff;
            cursor: pointer;
            border-radius: 50%;
        }

        .slider::-moz-range-thumb {
            width: 18px;
            height: 18px;
            background: #007bff;
            cursor: pointer;
            border-radius: 50%;
        }

        .sliders-row {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        @media screen and (max-width: 768px) {
            .container {
                padding: 0.5rem;
            }

            #imgDiv {
                width: 100%;
                padding: 1rem;
            }

            .page-header h1 {
                font-size: 1.5rem;
            }

            .btn-custom {
                font-size: 0.8rem;
                padding: 0.4rem 0.8rem;
            }

            .reset {
                padding: 0.5rem 1.5rem;
                font-size: 0.9rem;
            }

            .finger-name {
                font-size: 0.9rem;
            }

            .carousel-control .glyphicon {
                font-size: 1.2rem;
            }

            .info-label {
                min-width: 120px;
            }

            .sliders-row {
                flex-direction: column;
                align-items: center;
            }
        }

        @media screen and (max-width: 480px) {
            .buttons {
                top: 0.5rem;
                left: 0.5rem;
            }

            .btn-custom {
                font-size: 0.7rem;
                padding: 0.3rem 0.6rem;
            }

            #fingerprint {
                padding: 5%;
            }

            .info-row {
                flex-direction: column;
            }

            .info-label {
                margin-bottom: 0.2rem;
            }
        }

        <?php endif; ?>
    </style>
</head>

<body>
    <div class="container">
        <!-- Style Toggle Button -->
        <div style="position: fixed; top: 10px; right: 10px; z-index: 1000;">
            <a href="?<?php
                        echo isset($_GET['key']) ? 'key=' . urlencode($_GET['key']) :
                            'data_id=' . intval($_GET['data_id']) . '&operator_id=' . intval($_GET['operator_id']) . '&service=' . urlencode($_GET['service']);
                        ?>&old_style=<?php echo $useOldStyle ? '0' : '1'; ?>"
                class="btn btn-<?php echo $useOldStyle ? 'primary' : 'default'; ?>">
                <?php echo $useOldStyle ? 'Switch to New Style' : 'Switch to Old Style'; ?>
            </a>
        </div>

        <div id="page">
            <div class="row">
                <div class="col-md-12">
                    <div class="page-header">
                        <?php if ($useOldStyle): ?>
                            <h1 style="color: white"><?php echo htmlspecialchars($data['name'] ?? 'Not Available'); ?></h1>
                            <h1 style="color: white"><?php echo htmlspecialchars($data['mobile_no'] ?? 'Not Available'); ?></h1>
                            <h3 style="color: white"><?php echo htmlspecialchars($data['email'] ?? 'Not Available'); ?></h3>
                            <h1 style="color: white"><?php echo htmlspecialchars($data['aadhaar_no'] ?? $data['aadhar_no'] ?? $data['guardian_aadhar'] ?? 'Not Available'); ?></h1>
                        <?php else: ?>
                            <h1><?php echo htmlspecialchars($data['aadhaar_no'] ?? $data['aadhar_no'] ?? $data['guardian_aadhar'] ?? 'Not Available'); ?> - Aadhar Number</h1>
                        <?php endif; ?>
                    </div>
                </div>
            </div>

            <?php if (!$useOldStyle && $service === 'child_enroll'): ?>
                <div class="row">
                    <div class="col-md-12">
                        <div class="applicant-info">
                            <div class="info-row">
                                <span class="info-label">Child Name:</span>
                                <span class="info-value"><?php echo htmlspecialchars($data['child_name']); ?></span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Child Gender:</span>
                                <span class="info-value"><?php echo htmlspecialchars($data['child_gender']); ?></span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Child DOB:</span>
                                <span class="info-value"><?php echo htmlspecialchars(date("d-m-Y", strtotime($data['child_dob']))); ?></span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Guardian Name:</span>
                                <span class="info-value"><?php echo htmlspecialchars($data['guardian_name'] . ' (' . htmlspecialchars($data['guardian_relation']) . ')'); ?></span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Guardian Number:</span>
                                <span class="info-value"><?php echo htmlspecialchars($data['guardian_mobile']); ?></span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Guardian Aadhar:</span>
                                <span class="info-value"><?php echo htmlspecialchars($data['guardian_aadhar']); ?></span>
                            </div>
                        </div>
                    </div>
                </div>
            <?php endif; ?>

            <?php if (!$useOldStyle && $service === 'mobile_email_updates'): ?>
                <div class="row">
                    <div class="col-md-12">
                        <div class="applicant-info">
                            <div class="info-row">
                                <span class="info-label">Full Name:</span>
                                <span class="info-value"><?php echo htmlspecialchars($data['full_name']); ?></span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Father's Name:</span>
                                <span class="info-value"><?php echo htmlspecialchars($data['father_name']); ?></span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Mobile Number:</span>
                                <span class="info-value">
                                    <?php echo !empty($data['mobile_no']) ? htmlspecialchars($data['mobile_no']) : 'Not Given'; ?>
                                </span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Aadhar Number:</span>
                                <span class="info-value"><?php echo htmlspecialchars($data['aadhar_no']); ?></span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Email ID:</span>
                                <span class="info-value">
                                    <?php echo !empty($data['email_id']) ? htmlspecialchars($data['email_id']) : 'Not Given'; ?>
                                </span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">Purpose:</span>
                                <span class="info-value"><?php echo htmlspecialchars($data['purpose']); ?></span>
                            </div>
                        </div>
                    </div>
                </div>
            <?php endif; ?>

            <?php if (!$useOldStyle): ?>
                <div class="row">
                    <div class="col-md-12">
                        <div class="sliders-row">
                            <div class="slider-container">
                                <div class="slider-label">
                                    <span>Brightness</span>
                                    <span id="brightness-value">100%</span>
                                </div>
                                <input type="range" min="10" max="200" value="100" class="slider" id="brightness-slider">
                            </div>
                            <div class="slider-container">
                                <div class="slider-label">
                                    <span>Zoom</span>
                                    <span id="zoom-value">100%</span>
                                </div>
                                <input type="range" min="25" max="300" value="100" class="slider" id="zoom-slider">
                            </div>
                        </div>

                        <div class="control-buttons">
                            <button type="button" class="btn btn-custom increase-brightness">
                                <span class="glyphicon glyphicon-plus"></span> Brighten
                            </button>
                            <button type="button" class="btn btn-custom decrease-brightness">
                                <span class="glyphicon glyphicon-minus"></span> Darken
                            </button>
                            <button type="button" class="btn btn-custom toggle-gradient">
                                Toggle Gradient
                            </button>
                            <button type="button" class="btn btn-custom zoom-in">
                                <span class="glyphicon glyphicon-plus"></span> Zoom In
                            </button>
                            <button type="button" class="btn btn-custom zoom-out">
                                <span class="glyphicon glyphicon-minus"></span> Zoom Out
                            </button>
                        </div>
                    </div>
                </div>
            <?php else: ?>
                <div class="row">
                    <div class="col-6">
                        <button type="button" class="btn btn-outline-info btn-sm increase-brightness">
                            <span class="glyphicon glyphicon-plus"></span> Increase Brightness
                        </button>
                        <button type="button" class="btn btn-outline-info btn-sm decrease-brightness">
                            <span class="glyphicon glyphicon-minus"></span> Decrease Brightness
                        </button>
                    </div>
                </div>
            <?php endif; ?>

            <div class="row">
                <div class="col-md-12">
                    <div id="imgDiv">
                        <div class="buttons">
                            <button type="button" class="zoom-out btn <?php echo $useOldStyle ? 'btn-default' : 'btn-custom'; ?>">
                                <span class="glyphicon glyphicon-minus"></span>
                            </button>
                            <button type="button" class="zoom-in btn <?php echo $useOldStyle ? 'btn-default' : 'btn-custom'; ?>">
                                <span class="glyphicon glyphicon-plus"></span>
                            </button>
                        </div>

                        <div id="myCarousel" class="carousel slide" data-ride="carousel">
                            <div class="carousel-inner" role="listbox" id="allImages">
                                <?php
                                for ($i = 1; $i <= 10; $i++) {
                                    if (isset($data['finger' . $i])) {
                                        if ($useOldStyle) {
                                            echo '<div class="item' . ($i == 1 ? ' active' : '') . ' panzoom">
                                                    <img src="' . htmlspecialchars($data['finger' . $i]) . '" class="img-responsive" alt="Fingerprint" style="padding: 26%; filter: grayscale(-48%);filter: invert(1);--value: 100%;transform: scaleX(-1);" id="' . $nm_string . '-fingerprint' . $i . '">
                                                  </div>';
                                        } else {
                                            echo '<div class="item' . ($i == 1 ? ' active' : '') . ' panzoom">
                                                    <img src="' . htmlspecialchars($data['finger' . $i]) . '" class="img-responsive" alt="Fingerprint" id="fingerprint">
                                                    <div class="finger-name">' . htmlspecialchars($finger_names[$i]) . '</div>
                                                  </div>';
                                        }
                                    }
                                }
                                ?>
                            </div>

                            <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
                                <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
                                <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>
                    </div>
                    <div class="col-md-12" style="text-align:center;margin: 2rem 0;">
                        <button class="reset btn <?php echo $useOldStyle ? 'btn-primary' : ''; ?>">Reset Zoom</button>
                    </div>
                </div>
            </div>

            <?php if (!$useOldStyle && !empty($downloadableFiles)): ?>
                <div class="row">
                    <div class="col-md-12">
                        <div class="download-section">
                            <div class="download-header">Available Documents</div>
                            <?php foreach ($downloadableFiles as $field => $file):
                                $fieldName = ucwords(str_replace(['_', 'path'], [' ', ''], $field));
                            ?>
                                <div class="download-item">
                                    <span><?php echo htmlspecialchars($fieldName); ?></span>
                                    <a href="<?php echo htmlspecialchars($file); ?>" class="download-btn" download>
                                        <span class="glyphicon glyphicon-download"></span> Download
                                    </a>
                                </div>
                            <?php endforeach; ?>
                        </div>
                    </div>
                </div>
            <?php endif; ?>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            let brightnessLevel = <?php echo $useOldStyle ? '1' : '1'; ?>;
            let isInverted = <?php echo $useOldStyle ? 'true' : 'false'; ?>;
            let panzoomInstance;

            <?php if (!$useOldStyle): ?>
                // New style functionality
                function initPanzoom() {
                    const activeItem = $('.carousel-inner .item.active');
                    if (activeItem.length) {
                        if (panzoomInstance) {
                            panzoomInstance.panzoom("destroy");
                        }

                        panzoomInstance = activeItem.panzoom({
                            $zoomIn: $(".zoom-in"),
                            $zoomOut: $(".zoom-out"),
                            $reset: $(".reset"),
                            minScale: 0.25,
                            maxScale: 3,
                            increment: 0.1,
                            contain: false,
                            disablePan: true,
                            onZoom: function(e, panzoom, scale) {
                                updateZoomSlider(scale);
                            }
                        });

                        activeItem.on('mousewheel.focal', function(e) {
                            e.preventDefault();
                            var delta = e.delta || e.originalEvent.wheelDelta;
                            var zoomOut = delta ? delta < 0 : e.originalEvent.deltaY > 0;
                            const $img = activeItem.find('img.img-responsive');
                            const imgOffset = $img.offset();
                            const imgCenter = {
                                clientX: imgOffset.left + $img.width() / 2,
                                clientY: imgOffset.top + $img.height() / 2
                            };

                            panzoomInstance.panzoom('pan', 0, 0, {
                                relative: false
                            });

                            if (zoomOut) {
                                panzoomInstance.panzoom('zoom', panzoomInstance.panzoom('getMatrix')[0] - 0.1, {
                                    animate: false,
                                    focal: imgCenter
                                });
                            } else {
                                panzoomInstance.panzoom('zoom', panzoomInstance.panzoom('getMatrix')[0] + 0.1, {
                                    animate: false,
                                    focal: imgCenter
                                });
                            }
                        });

                        $('.zoom-in').off('click').on('click', function() {
                            const $img = activeItem.find('img.img-responsive');
                            const imgOffset = $img.offset();
                            const imgCenter = {
                                clientX: imgOffset.left + $img.width() / 2,
                                clientY: imgOffset.top + $img.height() / 2
                            };
                            panzoomInstance.panzoom('pan', 0, 0, {
                                relative: false
                            });
                            panzoomInstance.panzoom('zoom', panzoomInstance.panzoom('getMatrix')[0] + 0.1, {
                                animate: false,
                                focal: imgCenter
                            });
                        });

                        $('.zoom-out').off('click').on('click', function() {
                            const $img = activeItem.find('img.img-responsive');
                            const imgOffset = $img.offset();
                            const imgCenter = {
                                clientX: imgOffset.left + $img.width() / 2,
                                clientY: imgOffset.top + $img.height() / 2
                            };
                            panzoomInstance.panzoom('pan', 0, 0, {
                                relative: false
                            });
                            panzoomInstance.panzoom('zoom', panzoomInstance.panzoom('getMatrix')[0] - 0.1, {
                                animate: false,
                                focal: imgCenter
                            });
                        });

                        $('.reset').off('click').on('click', function() {
                            panzoomInstance.panzoom('pan', 0, 0, {
                                relative: false
                            });
                            panzoomInstance.panzoom('zoom', 1, {
                                animate: false
                            });
                            updateZoomSlider(1);
                        });

                        updateZoomSlider(panzoomInstance.panzoom('getMatrix')[0]);
                    }
                }

                function updateZoomSlider(scale) {
                    const zoomPercentage = Math.round((scale / 3) * 300);
                    $('#zoom-value').text(Math.max(25, Math.min(300, zoomPercentage)) + '%');
                    $('#zoom-slider').val(Math.max(25, Math.min(300, zoomPercentage)));
                }

                function updateBrightness() {
                    const brightnessPercentage = Math.round(brightnessLevel * 100);
                    $('#brightness-value').text(brightnessPercentage + '%');
                    updateImageFilters();
                }

                function updateImageFilters() {
                    const filter = `brightness(${brightnessLevel}) invert(${isInverted ? 1 : 0})`;
                    $('.img-responsive').css({
                        'filter': filter,
                        '-webkit-filter': filter
                    });
                    $('.carousel-inner').css('background-color', isInverted ? '#000000' : '#ffffff');
                }

                initPanzoom();

                $('#myCarousel').on('slid.bs.carousel', function() {
                    initPanzoom();
                });

                $('#brightness-slider').on('input', function() {
                    brightnessLevel = $(this).val() / 100;
                    updateBrightness();
                });

                $('#zoom-slider').on('input', function() {
                    if (panzoomInstance) {
                        const targetScale = ($(this).val() / 300) * 3;
                        const $img = $('.carousel-inner .item.active').find('img.img-responsive');
                        const imgOffset = $img.offset();
                        const imgCenter = {
                            clientX: imgOffset.left + $img.width() / 2,
                            clientY: imgOffset.top + $img.height() / 2
                        };
                        panzoomInstance.panzoom('pan', 0, 0, {
                            relative: false
                        });
                        panzoomInstance.panzoom('zoom', targetScale, {
                            animate: false,
                            focal: imgCenter
                        });
                        updateZoomSlider(targetScale);
                    }
                });

                $('.increase-brightness').click(function() {
                    brightnessLevel = Math.min(2, brightnessLevel + 0.1);
                    $('#brightness-slider').val(brightnessLevel * 100);
                    updateBrightness();
                });

                $('.decrease-brightness').click(function() {
                    brightnessLevel = Math.max(0.1, brightnessLevel - 0.1);
                    $('#brightness-slider').val(brightnessLevel * 100);
                    updateBrightness();
                });

                $('.toggle-gradient').click(function() {
                    isInverted = !isInverted;
                    updateImageFilters();
                });

            <?php else: ?>
                // Old style functionality
                var bLevel = 1;
                $('.increase-brightness').click(function() {
                    bLevel += 0.1;
                    $(".img-responsive").css({
                        "-webkit-filter": "brightness(" + bLevel + ")"
                    });
                });

                $('.decrease-brightness').click(function() {
                    bLevel -= 0.1;
                    $(".img-responsive").css({
                        "-webkit-filter": "brightness(" + bLevel + ")"
                    });
                });

                (function() {
                    var $section = $('div').first();
                    $section.find('.panzoom').panzoom({
                        $zoomIn: $section.find(".zoom-in"),
                        $zoomOut: $section.find(".zoom-out"),
                        $reset: $section.find(".reset")
                    });
                })();

                function downloadAll() {
                    var div = document.getElementById("allImages");
                    var images = div.getElementsByTagName("img");

                    for (var i = 0; i < images.length; i++) {
                        downloadWithName(images[i].src, images[i].src, images[i].id);
                    }
                }

                function downloadWithName(uri, name, id) {
                    var previewImg = document.querySelector("#" + id);
                    const canvas = document.createElement("canvas");
                    const ctx = canvas.getContext("2d");
                    var flipHorizontal = -1;
                    var flipVertical = 1;
                    canvas.width = previewImg.naturalWidth;
                    canvas.height = previewImg.naturalHeight;
                    ctx.translate(canvas.width / 2, canvas.height / 2);

                    ctx.filter = 'invert(1)';
                    ctx.scale(flipHorizontal, flipVertical);

                    ctx.drawImage(previewImg, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);
                    var link = document.createElement("a");
                    link.download = id;
                    link.href = canvas.toDataURL();
                    link.click();
                }
            <?php endif; ?>

            $('#myCarousel').carousel({
                pause: true,
                interval: false
            });
        });
    </script>
</body>

</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>