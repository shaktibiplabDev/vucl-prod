<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Check if user is operator
$isoperator = $_SESSION['user_type'] === 'operator';

// Check if user has the 'mobile-email-update' service access
$stmt = $pdo->prepare("SELECT DISTINCT service_key FROM operator_services WHERE operator_id = ?");
$stmt->execute([$_SESSION['user_id']]);
$serviceKeys = $stmt->fetchAll(PDO::FETCH_COLUMN);

$stmt = $pdo->prepare("SELECT DISTINCT service_key FROM operator_services WHERE operator_id = ? AND is_active = 1");
$stmt->execute([$_SESSION['user_id']]);
$activeServices = $stmt->fetchAll(PDO::FETCH_COLUMN);

if (!in_array('mobile-email-update', $serviceKeys) || !in_array('mobile-email-update', $activeServices)) {
    $isoperator = false;
    echo "<script>
      document.addEventListener('DOMContentLoaded', function() {
        Swal.fire({
          title: '<strong>Access Denied for Mobile/Email Update</strong>',
          html: '<p>You are either unassigned or inactive for this service. Contact admin.</p>',
          icon: 'warning',
          confirmButtonText: '<i class=\"icon-base ti tabler-check\"></i> OK',
          customClass: {
            popup: 'swal-wide',
            confirmButton: 'btn btn-danger'
          }
        }).then(() => {
          window.location.href = '/admin/operators';
        });
      });
    </script>";
}

// Initialize filters
$statusFilter = $_GET['status'] ?? '';
$dateFrom = $_GET['date_from'] ?? '';
$dateTo = $_GET['date_to'] ?? '';
$appIdSearch = $_GET['app_id'] ?? '';
$urgentFilter = isset($_GET['urgent']) ? (bool)$_GET['urgent'] : null;
$userIdFilter = $_GET['user_id'] ?? '';

// Handle bulk actions
if ($_SERVER['REQUEST_METHOD'] === 'POST' && $isoperator) {
    if (isset($_POST['bulk_action'])) {
        $selectedIds = $_POST['selected_ids'] ?? [];

        if (!empty($selectedIds)) {
            // Convert all selected IDs to integers for safety
            $selectedIds = array_map('intval', $selectedIds);
            $placeholders = implode(',', array_fill(0, count($selectedIds), '?'));

            switch ($_POST['bulk_action']) {
                case 'mark_urgent':
                    $stmt = $pdo->prepare("UPDATE mobile_email_updates SET is_urgent = TRUE WHERE id IN ($placeholders)");
                    $stmt->execute($selectedIds);
                    $_SESSION['flash_message'] = 'Selected records marked as urgent';
                    break;

                case 'unmark_urgent':
                    $stmt = $pdo->prepare("UPDATE mobile_email_updates SET is_urgent = FALSE WHERE id IN ($placeholders)");
                    $stmt->execute($selectedIds);
                    $_SESSION['flash_message'] = 'Selected records unmarked as urgent';
                    break;

                case 'delete':
                    $stmt = $pdo->prepare("DELETE FROM mobile_email_updates WHERE id IN ($placeholders)");
                    $stmt->execute($selectedIds);
                    $_SESSION['flash_message'] = 'Selected records deleted';
                    break;

                case 'approve':
                    // Start transaction for approval processing
                    $pdo->beginTransaction();

                    try {
                        // First get the applications to be approved
                        $stmt = $pdo->prepare("SELECT id, user_id, application_id, assigned_to FROM mobile_email_updates WHERE id IN ($placeholders)");
                        $stmt->execute($selectedIds);
                        $applications = $stmt->fetchAll(PDO::FETCH_ASSOC);

                        // Update status to approved
                        $stmt = $pdo->prepare("UPDATE mobile_email_updates SET status = 'approved' WHERE id IN ($placeholders)");
                        $stmt->execute($selectedIds);

                        // Get operator's commission price for this service
                        $stmt = $pdo->prepare("SELECT price FROM operator_services WHERE operator_id = ? AND service_key = 'mobile-email-update'");
                        $stmt->execute([$_SESSION['user_id']]);
                        $operatorCommission = $stmt->fetchColumn();

                        // Process payment to operator for each approved application
                        foreach ($applications as $app) {
                            if ($operatorCommission > 0 && $app['assigned_to']) {
                                // Update operator's balance
                                $stmt = $pdo->prepare("UPDATE users SET bonus_wallet = bonus_wallet + ? WHERE id = ?");
                                $stmt->execute([$operatorCommission, $app['assigned_to']]);

                                // Record transaction for operator
                                $description = "Commission for approved Mobile/Email Update (App ID: " . $app['application_id'] . ")";
                                $stmt = $pdo->prepare("INSERT INTO transactions_list (user_id, amount, type, description, reference_id, service_type) 
                                                      VALUES (?, ?, 'credit', ?, ?, 'mobile-email-update')");
                                $stmt->execute([
                                    $app['assigned_to'],
                                    $operatorCommission,
                                    $description,
                                    $app['id']
                                ]);
                            }
                        }

                        $pdo->commit();
                        $_SESSION['flash_message'] = 'Selected records approved and commissions processed';
                    } catch (Exception $e) {
                        $pdo->rollBack();
                        $_SESSION['flash_message'] = 'Error processing approvals: ' . $e->getMessage();
                    }
                    break;

                case 'reject':
                    // Start transaction for refund processing
                    $pdo->beginTransaction();

                    try {
                        // First get the applications to be rejected
                        $stmt = $pdo->prepare("SELECT id, user_id, application_id FROM mobile_email_updates WHERE id IN ($placeholders)");
                        $stmt->execute($selectedIds);
                        $applications = $stmt->fetchAll(PDO::FETCH_ASSOC);

                        // Update status to rejected
                        $stmt = $pdo->prepare("UPDATE mobile_email_updates SET status = 'rejected' WHERE id IN ($placeholders)");
                        $stmt->execute($selectedIds);

                        // Get service price
                        $stmt = $pdo->prepare("SELECT price FROM prices_list WHERE service_key = 'mobile-email-update'");
                        $stmt->execute();
                        $servicePrice = $stmt->fetchColumn();

                        // Process refund for each application
                        foreach ($applications as $app) {
                            if ($servicePrice > 0) {
                                // Update retailer balance
                                $stmt = $pdo->prepare("UPDATE users SET wallet = wallet + ? WHERE id = ?");
                                $stmt->execute([$servicePrice, $app['user_id']]);

                                // Record transaction
                                $description = "Refund for rejected Mobile/Email Update";
                                $stmt = $pdo->prepare("INSERT INTO transactions_list (user_id, amount, type, description, reference_id, service_type) 
                                                      VALUES (?, ?, 'credit', ?, ?, 'mobile-email-update')");
                                $stmt->execute([
                                    $app['user_id'],
                                    $servicePrice,
                                    $description,
                                    $app['id']
                                ]);
                            }
                        }

                        $pdo->commit();
                        $_SESSION['flash_message'] = 'Selected records rejected and refunds processed';
                    } catch (Exception $e) {
                        $pdo->rollBack();
                        $_SESSION['flash_message'] = 'Error processing rejections: ' . $e->getMessage();
                    }
                    break;
            }

            header("Location: " . $_SERVER['PHP_SELF']);
            exit();
        }
    }
}

// Handle single record actions
if (isset($_GET['action']) && isset($_GET['id']) && $isoperator) {
    $id = (int)$_GET['id']; // Ensure ID is integer

    switch ($_GET['action']) {
        case 'assign':
            $stmt = $pdo->prepare("UPDATE mobile_email_updates SET assigned_to = ?, status = 'processing' WHERE id = ?");
            $stmt->execute([$_SESSION['user_id'], $id]);
            $_SESSION['flash_message'] = 'Data assigned successfully';
            break;
    }

    header("Location: " . $_SERVER['PHP_SELF']);
    exit();
}

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['update_status_id'], $_POST['new_status']) && $isoperator) {
    $id = (int)$_POST['update_status_id'];
    $status = $_POST['new_status'];

    // Start transaction for status update processing
    $pdo->beginTransaction();

    try {
        // Update the status
        $stmt = $pdo->prepare("UPDATE mobile_email_updates SET status = ? WHERE id = ? AND assigned_to = ?");
        $stmt->execute([$status, $id, $_SESSION['user_id']]);

        // Get application details
        $stmt = $pdo->prepare("SELECT user_id, application_id, assigned_to FROM mobile_email_updates WHERE id = ?");
        $stmt->execute([$id]);
        $application = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($application) {
            if ($status === 'rejected') {
                // Get service price
                $stmt = $pdo->prepare("SELECT price FROM prices_list WHERE service_key = 'mobile-email-update'");
                $stmt->execute();
                $servicePrice = $stmt->fetchColumn();

                if ($servicePrice > 0) {
                    // Update retailer balance
                    $stmt = $pdo->prepare("UPDATE users SET wallet = wallet + ? WHERE id = ?");
                    $stmt->execute([$servicePrice, $application['user_id']]);

                    // Record transaction
                    $description = "Refund for rejected Mobile/Email Update";
                    $stmt = $pdo->prepare("INSERT INTO transactions_list (user_id, amount, type, description, reference_id, service_type) 
                                          VALUES (?, ?, 'credit', ?, ?, 'mobile-email-update')");
                    $stmt->execute([
                        $application['user_id'],
                        $servicePrice,
                        $description,
                        $id
                    ]);
                }
            } elseif ($status === 'approved') {
                // Get operator's commission price for this service
                $stmt = $pdo->prepare("SELECT price FROM operator_services WHERE operator_id = ? AND service_key = 'mobile-email-update'");
                $stmt->execute([$_SESSION['user_id']]);
                $operatorCommission = $stmt->fetchColumn();

                if ($operatorCommission > 0 && $application['assigned_to']) {
                    // Update operator's balance
                    $stmt = $pdo->prepare("UPDATE users SET bonus_wallet = bonus_wallet + ? WHERE id = ?");
                    $stmt->execute([$operatorCommission, $application['assigned_to']]);

                    // Record transaction for operator
                    $description = "Commission for approved Mobile/Email Update (App ID: " . $application['application_id'] . ")";
                    $stmt = $pdo->prepare("INSERT INTO transactions_list (user_id, amount, type, description, reference_id, service_type) 
                                          VALUES (?, ?, 'credit', ?, ?, 'mobile-email-update')");
                    $stmt->execute([
                        $application['assigned_to'],
                        $operatorCommission,
                        $description,
                        $id
                    ]);
                }
            }
        }

        $pdo->commit();
        $_SESSION['flash_message'] = "Status updated to '$status'" . 
                                    ($status === 'rejected' ? ' and refund processed' : '') . 
                                    ($status === 'approved' ? ' and commission credited' : '');
    } catch (Exception $e) {
        $pdo->rollBack();
        $_SESSION['flash_message'] = 'Error updating status: ' . $e->getMessage();
    }

    header("Location: " . $_SERVER['PHP_SELF']);
    exit();
}

// Build the base query
$query = "SELECT 
            meu.id,
            meu.application_id, 
            meu.user_id, 
            meu.full_name, 
            meu.mobile_no, 
            meu.father_name, 
            meu.aadhar_no, 
            meu.email_id, 
            meu.purpose,
            meu.finger1, 
            meu.finger2, 
            meu.finger3, 
            meu.finger4, 
            meu.finger5,
            meu.finger6, 
            meu.finger7, 
            meu.finger8, 
            meu.finger9, 
            meu.finger10,
            meu.missing_fingers, 
            meu.submitted_at,
            meu.status,
            meu.is_urgent,
            meu.assigned_to,
            u.username as submitted_by
          FROM mobile_email_updates meu
          LEFT JOIN users u ON meu.user_id = u.id";

// Add WHERE conditions based on filters
$conditions = [];
$params = [];

if (!$isoperator) {
    $conditions[] = "meu.user_id = ?";
    $params[] = $_SESSION['user_id'];
}

if (!empty($statusFilter)) {
    $conditions[] = "meu.status = ?";
    $params[] = $statusFilter;
}

if (!empty($dateFrom)) {
    $conditions[] = "meu.submitted_at >= ?";
    $params[] = $dateFrom . ' 00:00:00';
}

if (!empty($dateTo)) {
    $conditions[] = "meu.submitted_at <= ?";
    $params[] = $dateTo . ' 23:59:59';
}

if (!empty($appIdSearch)) {
    $conditions[] = "meu.application_id LIKE ?";
    $params[] = '%' . $appIdSearch . '%';
}

if (!empty($userIdFilter) && $isoperator) {
    $conditions[] = "meu.user_id = ?";
    $params[] = $userIdFilter;
}

if ($urgentFilter !== null && $isoperator) {
    $conditions[] = "meu.is_urgent = ?";
    $params[] = $urgentFilter;
}

if (!empty($conditions)) {
    $query .= " WHERE " . implode(" AND ", $conditions);
}

$query .= " ORDER BY meu.is_urgent ASC, meu.submitted_at ASC";

// Prepare and execute the query
$stmt = $pdo->prepare($query);
$stmt->execute($params);
$mobileEmailUpdates = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Get distinct status values for filter dropdown
$statuses = $pdo->query("SELECT DISTINCT status FROM mobile_email_updates")->fetchAll(PDO::FETCH_COLUMN);

// Get all users for operator filter
$users = [];
if ($isoperator) {
    $users = $pdo->query("SELECT id, username FROM users ORDER BY username")->fetchAll(PDO::FETCH_ASSOC);
}
?>


<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
<?php include('includes/head.php'); ?>

<body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->
            <?php include('includes/sidebar.php'); ?>

            <div class="menu-mobile-toggler d-xl-none rounded-1">
                <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
                    <i class="ti tabler-menu icon-base"></i>
                    <i class="ti tabler-chevron-right icon-base"></i>
                </a>
            </div>
            <!-- / Menu -->

            <!-- Layout container -->
            <div class="layout-page">
                <!-- Navbar -->
                <?php include('includes/navbar.php'); ?>

                <!-- / Navbar -->

                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <!-- Content -->
                    <div class="container-xxl flex-grow-1 container-p-y">
                        <?php if (isset($_SESSION['flash_message'])): ?>
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <?= $_SESSION['flash_message'] ?>
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                            <?php unset($_SESSION['flash_message']); ?>
                        <?php endif; ?>

                        <div class="card">
                            <h5 class="card-header pb-0 text-md-start text-center">Mobile/Email Updates <?= $isoperator ? '(operator View)' : '' ?></h5>
                            <!-- Filter Section -->
                            <div class="card-body border-bottom">
                                <form method="GET" class="row g-3">
                                    <div class="col-md-2">
                                        <label class="form-label">Application ID</label>
                                        <input type="text" name="app_id" class="form-control" placeholder="Search by ID" value="<?= htmlspecialchars($appIdSearch) ?>">
                                    </div>

                                    <div class="col-md-2">
                                        <label class="form-label">Status</label>
                                        <select name="status" class="form-select">
                                            <option value="">All Statuses</option>
                                            <?php foreach ($statuses as $status): ?>
                                                <option value="<?= $status ?>" <?= $status === $statusFilter ? 'selected' : '' ?>>
                                                    <?= ucfirst($status) ?>
                                                </option>
                                            <?php endforeach; ?>
                                        </select>
                                    </div>

                                    <div class="col-md-2">
                                        <label class="form-label">Date From</label>
                                        <input type="date" name="date_from" class="form-control" value="<?= htmlspecialchars($dateFrom) ?>">
                                    </div>

                                    <div class="col-md-2">
                                        <label class="form-label">Date To</label>
                                        <input type="date" name="date_to" class="form-control" value="<?= htmlspecialchars($dateTo) ?>">
                                    </div>

                                    <?php if ($isoperator): ?>
                                        <div class="col-md-2">
                                            <label class="form-label">Submitted By</label>
                                            <select name="user_id" class="form-select">
                                                <option value="">All Users</option>
                                                <?php foreach ($users as $user): ?>
                                                    <option value="<?= $user['id'] ?>" <?= $user['id'] == $userIdFilter ? 'selected' : '' ?>>
                                                        <?= htmlspecialchars($user['username']) ?>
                                                    </option>
                                                <?php endforeach; ?>
                                            </select>
                                        </div>

                                        
                                    <?php endif; ?>

                                    <div class="col-md-2 d-flex align-items-end">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="ti tabler-filter me-1"></i> Filter
                                        </button>
                                    </div>
                                </form>
                            </div>

                            

                            <div class="card-datatable p-5">
                                <table class="dt-responsive table table-bordered">
                                    <thead>
                                        <tr>
                                            <?php if ($isoperator): ?>
                                                <th width="30">
                                                    <input type="checkbox" id="selectAll" class="form-check-input">
                                                </th>
                                            <?php endif; ?>
                                            <th>SL No</th>
                                            <th>Application ID</th>
                                            <th>Full Name</th>
                                            <?php if ($isoperator): ?>
                                                <th>Submitted By</th>
                                            <?php endif; ?>
                                            <th>Submitted At</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <?php foreach ($mobileEmailUpdates as $index => $update): ?>
                                            <tr <?= $update['is_urgent'] ? 'class="table-warning"' : '' ?>>
                                                <?php if ($isoperator): ?>
                                                    <td>
                                                        <input type="checkbox" name="selected_ids[]" value="<?= $update['id'] ?>" class="form-check-input row-checkbox">
                                                    </td>
                                                <?php endif; ?>
                                                <td><?= $index + 1 ?></td>
                                                <td>
                                                    <?= htmlspecialchars($update['application_id']) ?>
                                                    <?php if ($update['is_urgent']): ?>
                                                        <span class="badge bg-danger ms-1">URGENT</span>
                                                    <?php endif; ?>
                                                </td>
                                                <td><?= htmlspecialchars($update['full_name']) ?></td>
                                                <?php if ($isoperator): ?>
                                                    <td><?= htmlspecialchars($update['submitted_by'] ?? 'N/A') ?></td>
                                                <?php endif; ?>
                                                <td><?= date('d M Y, h:i A', strtotime($update['submitted_at'])) ?></td>
                                                <td>
                                                    <?php
                                                    $statusClass = '';
                                                    switch (strtolower($update['status'])) {
                                                        case 'pending':
                                                            $statusClass = 'bg-label-warning';
                                                            break;
                                                        case 'approved':
                                                            $statusClass = 'bg-label-success';
                                                            break;
                                                        case 'rejected':
                                                            $statusClass = 'bg-label-danger';
                                                            break;
                                                        case 'processing':
                                                            $statusClass = 'bg-label-info';
                                                            break;
                                                        default:
                                                            $statusClass = 'bg-label-secondary';
                                                    }
                                                    ?>
                                                    <span class="badge <?= $statusClass ?>">
                                                        <?= ucfirst($update['status']) ?>
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary view-btn"
                                                            data-id="<?= $update['id'] ?>"
                                                            data-app-id="<?= htmlspecialchars($update['application_id']) ?>"
                                                            data-full-name="<?= htmlspecialchars($update['full_name']) ?>"
                                                            data-aadhaar="<?= htmlspecialchars($update['aadhar_no']) ?>"
                                                            data-mobile="<?= htmlspecialchars($update['mobile_no']) ?>"
                                                            data-father="<?= htmlspecialchars($update['father_name']) ?>"
                                                            data-email="<?= htmlspecialchars($update['email_id']) ?>"
                                                            data-purpose="<?= htmlspecialchars($update['purpose']) ?>"
                                                            data-submitted="<?= date('d M Y, h:i A', strtotime($update['submitted_at'])) ?>"
                                                            data-status="<?= htmlspecialchars($update['status']) ?>"
                                                            data-finger1="<?= !empty($update['finger1']) ? 'true' : 'false' ?>"
                                                            data-finger2="<?= !empty($update['finger2']) ? 'true' : 'false' ?>"
                                                            data-finger3="<?= !empty($update['finger3']) ? 'true' : 'false' ?>"
                                                            data-finger4="<?= !empty($update['finger4']) ? 'true' : 'false' ?>"
                                                            data-finger5="<?= !empty($update['finger5']) ? 'true' : 'false' ?>"
                                                            data-finger6="<?= !empty($update['finger6']) ? 'true' : 'false' ?>"
                                                            data-finger7="<?= !empty($update['finger7']) ? 'true' : 'false' ?>"
                                                            data-finger8="<?= !empty($update['finger8']) ? 'true' : 'false' ?>"
                                                            data-finger9="<?= !empty($update['finger9']) ? 'true' : 'false' ?>"
                                                            data-finger10="<?= !empty($update['finger10']) ? 'true' : 'false' ?>"
                                                            data-missing-fingers="<?= htmlspecialchars($update['missing_fingers']) ?>"
                                                            data-submitted-by="<?= htmlspecialchars($update['submitted_by'] ?? 'N/A') ?>"
                                                            data-is-urgent="<?= $update['is_urgent'] ? 'true' : 'false' ?>"
                                                            onclick="viewButtonClickHandler()">
                                                            <i class="ti tabler-eye me-1"></i> View
                                                        </button>
                                                        <?php if (empty($update['assigned_to'])): ?>
                                                            <a href="?action=assign&id=<?= $update['id'] ?>" class="btn btn-sm btn-outline-primary">
                                                                <i class="fas fa-hand-pointer me-1"></i> Take
                                                            </a>
                                                        <?php elseif ($update['assigned_to'] == $_SESSION['user_id']): ?>
                                                            <?php if ($update['status'] == 'processing'): ?>
                                                                <a href="fingers.php?data_id=<?= $update['id'] ?>&operator_id=<?= $_SESSION['user_id'] ?>&service=mobile_email_updates" class="btn btn-sm btn-outline-success me-1">
                                                                    <i class="fas fa-fingerprint me-1"></i> Fingers
                                                                </a>
                                                            

                                                            <form method="post" style="display:inline;">
                                                                <input type="hidden" name="update_status_id" value="<?= $update['id'] ?>">
                                                                <select name="new_status" onchange="this.form.submit()" class="form-select form-select-sm d-inline-block w-auto">
                                                                    <option disabled selected>Status</option>
                                                                    <option value="approved">Approve</option>
                                                                    <option value="rejected">Reject</option>
                                                                </select>
                                                            </form>
                                                            <?php endif; ?>
                                                        <?php else: ?>
                                                            <button class="btn btn-sm btn-outline-secondary" disabled>
                                                                <i class="fas fa-lock me-1"></i> Taken
                                                            </button>
                                                        <?php endif; ?>
                                                        
                                                    </div>
                                                </td>
                                            </tr>
                                        <?php endforeach; ?>
                                    </tbody>
                                </table>
                                <?php if ($isoperator): ?>
                                    </form> <!-- Close the bulk actions form -->
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>
                    <!-- / Content -->

                    <!-- Footer -->
                    <?php include('includes/footer.php'); ?>
                    <!-- / Footer -->

                    <div class="content-backdrop fade"></div>
                </div>
                <!-- Content wrapper -->
            </div>
            <!-- / Layout page -->
        </div>

        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>

        <!-- Drag Target Area To SlideIn Menu On Small Screens -->
        <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->
    
    <!-- View Modal -->
    <div class="modal fade" id="viewModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Application Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Application ID:</strong> <span id="modalAppId"></span></p>
                            <p><strong>Full Name:</strong> <span id="modalFullName"></span></p>
                            <p><strong>Father's Name:</strong> <span id="modalFather"></span></p>
                            <p><strong>Aadhaar No:</strong> <span id="modalAadhaar"></span></p>
                            <p><strong>Mobile No:</strong> <span id="modalMobile"></span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Submitted By:</strong> <span id="modalSubmittedBy"></span></p>
                            <p><strong>Submitted At:</strong> <span id="modalSubmitted"></span></p>
                            <p><strong>Status:</strong> <span id="modalStatus"></span></p>
                            <p><strong>Email:</strong> <span id="modalEmail"></span></p>
                            <p><strong>Purpose:</strong> <span id="modalPurpose"></span></p>
                            <p><strong>Urgent:</strong> <span id="modalIsUrgent"></span></p>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <!-- Empty column for alignment -->
                        </div>
                        <!-- Fingerprint visualization using images -->
                        <div class="col-md-6">
                            <h6>Fingerprint Collection</h6>
                            <div class="fingerprint-diagram">
                                <div class="d-flex justify-content-center align-items-start">
                                    <!-- Left Hand -->
                                    <div class="hand-wrapper me-5">
                                        <h6 class="text-center">LEFT HAND</h6>
                                        <div class="hand-container position-relative">
                                            <img src="../../assets/images/left-hand.png" alt="Left Hand" class="hand-image" id="left-hand-image" />
                                            <!-- Indicators for fingers 1-5 (Left Hand) -->
                                            <span class="finger-indicator" id="finger1-indicator">?</span> <!-- Thumb -->
                                            <span class="finger-indicator" id="finger2-indicator">?</span> <!-- Index -->
                                            <span class="finger-indicator" id="finger3-indicator">?</span> <!-- Middle -->
                                            <span class="finger-indicator" id="finger4-indicator">?</span> <!-- Ring -->
                                            <span class="finger-indicator" id="finger5-indicator">?</span> <!-- Little -->
                                        </div>
                                    </div>

                                    <!-- Right Hand -->
                                    <div class="hand-wrapper">
                                        <h6 class="text-center">RIGHT HAND</h6>
                                        <div class="hand-container position-relative">
                                            <img src="../../assets/images/right-hand.png" alt="Right Hand" class="hand-image" id="right-hand-image" />
                                            <!-- Indicators for fingers 6-10 (Right Hand) -->
                                            <span class="finger-indicator" id="finger6-indicator">?</span> <!-- Thumb -->
                                            <span class="finger-indicator" id="finger7-indicator">?</span> <!-- Index -->
                                            <span class="finger-indicator" id="finger8-indicator">?</span> <!-- Middle -->
                                            <span class="finger-indicator" id="finger9-indicator">?</span> <!-- Ring -->
                                            <span class="finger-indicator" id="finger10-indicator">?</span> <!-- Little -->
                                        </div>
                                    </div>
                                </div>

                                <div class="mt-3 text-center">
                                    <p><span class="text-success">✓</span> = Collected | <span class="text-danger">✗</span> = Not Collected</p>
                                    <p><strong>Missing Fingers:</strong> <span id="modalMissingFingers"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="downloadPdf">
                        <i class="ti tabler-file-download me-1"></i> Download PDF
                    </button>
                </div>
            </div>
        </div>
    </div>


    <?php include('includes/script.php'); ?>
    <script>
        const dt_responsive_table = document.querySelector('.dt-responsive');
        if (dt_responsive_table) {
            let dt_responsive = new DataTable(dt_responsive_table, {
                responsive: true,
                layout: {
                topStart: {
                    rowClass: 'row my-0 justify-content-between',
                    features: [
                        'pageLength'
                    ],
                    pageLength: {
                        menu: [10, 25, 50, 100],
                        text: 'Show _MENU_ entries'
                    }
                },
                bottomStart: {
                    rowClass: 'row mx-3 justify-content-between',
                    features: ['info']
                },
                bottomEnd: 'paging'
                },
                language: {
                paginate: {
                    next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
                    previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
                    first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                    last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
                },
                search: '',
                searchPlaceholder: 'Search records...',
                lengthMenu: 'Show _MENU_ entries'
                },
                columnDefs: [{
                    responsivePriority: 1,
                    targets: 1
                }, // Application ID
                {
                    responsivePriority: 2,
                    targets: 2
                }, // Full Name
                {
                    responsivePriority: 3,
                    targets: -1
                } // Actions
                ]
            });
        }

        // Bulk select all checkbox
        document.getElementById('selectAll')?.addEventListener('click', function() {
            const checkboxes = document.querySelectorAll('.row-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });

        // View button click handler
        function viewButtonClickHandler (button) {
            const modal = new bootstrap.Modal(document.getElementById('viewModal'));

            // Set modal content
            document.getElementById('modalAppId').textContent = button.dataset.appId;
            document.getElementById('modalFullName').textContent = button.dataset.fullName;
            document.getElementById('modalFather').textContent = button.dataset.father;
            document.getElementById('modalAadhaar').textContent = button.dataset.aadhaar;
            document.getElementById('modalMobile').textContent = button.dataset.mobile;
            document.getElementById('modalEmail').textContent = button.dataset.email;
            document.getElementById('modalPurpose').textContent = button.dataset.purpose;
            document.getElementById('modalSubmitted').textContent = button.dataset.submitted;
            document.getElementById('modalSubmittedBy').textContent = button.dataset.submittedBy;
            document.getElementById('modalMissingFingers').textContent = button.dataset.missingFingers || 'None';

            // Set status with badge
            const statusSpan = document.getElementById('modalStatus');
            statusSpan.innerHTML = '';
            const badge = document.createElement('span');
            badge.className = `badge ${button.dataset.status === 'pending' ? 'bg-label-warning' : 
                        button.dataset.status === 'approved' ? 'bg-label-success' : 
                        button.dataset.status === 'rejected' ? 'bg-label-danger' : 
                        button.dataset.status === 'processing' ? 'bg-label-info' : 'bg-label-secondary'}`;
            badge.textContent = button.dataset.status.charAt(0).toUpperCase() + button.dataset.status.slice(1);
            statusSpan.appendChild(badge);

            // Set urgent status
            const urgentSpan = document.getElementById('modalIsUrgent');
            urgentSpan.innerHTML = '';
            const urgentBadge = document.createElement('span');
            urgentBadge.className = `badge ${button.dataset.isUrgent === 'true' ? 'bg-label-danger' : 'bg-label-secondary'}`;
            urgentBadge.textContent = button.dataset.isUrgent === 'true' ? 'Yes' : 'No';
            urgentSpan.appendChild(urgentBadge);

            // Update fingerprint status for all fingers
            for (let i = 1; i <= 10; i++) {
                const fingerIndicatorEl = document.getElementById(`finger${i}-indicator`);

                if (fingerIndicatorEl) {
                    // Get finger data from button dataset
                    const isCollected = button.dataset[`finger${i}`] === 'true';

                    // Update status symbol and color
                    fingerIndicatorEl.textContent = isCollected ? '✓' : '✗';
                    fingerIndicatorEl.classList.remove('text-success', 'text-danger');
                    fingerIndicatorEl.classList.add(isCollected ? 'text-success' : 'text-danger');
                }
            }

            // Set PDF download link
            document.getElementById('downloadPdf').onclick = function() {
                window.location.href = `generate_pdf.php?app_id=${button.dataset.appId}`;
            };

            modal.show();
        }
        </script>
    <style>
        /* Fingerprint Visualization Styles */
        .fingerprint-diagram {
            margin-top: 1rem;
            padding: 1rem;
            background-color: #2c3e50;
            border-radius: 5px;
        }

        .hand-wrapper {
            text-align: center;
            flex: 1;
        }

        .hand-container {
            position: relative;
            margin: 0 auto;
            width: 150px;
            height: 165px;
        }

        .hand-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .finger-indicator {
            position: absolute;
            font-weight: bold;
            font-size: 18px;
            width: 28px;
            height: 28px;
            line-height: 28px;
            text-align: center;
            background-color: #fff;
            border-radius: 50%;
            border: 1px solid #666;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        /* Left Hand Finger Positions */
        #finger1-indicator {
            left: 15px;
            top: 70px;
        }

        /* Left Thumb */
        #finger2-indicator {
            left: 40px;
            top: 10px;
        }

        /* Left Index */
        #finger3-indicator {
            left: 70px;
            top: 1px;
        }

        /* Left Middle */
        #finger4-indicator {
            left: 97px;
            top: 5px;
        }

        /* Left Ring */
        #finger5-indicator {
            left: 120px;
            top: 30px;
        }

        /* Left Little */

        /* Right Hand Finger Positions */
        #finger6-indicator {
            left: 115px;
            top: 70px;
        }

        /* Right Thumb */
        #finger7-indicator {
            left: 85px;
            top: 10px;
        }

        /* Right Index */
        #finger8-indicator {
            left: 55px;
            top: 1px;
        }

        /* Right Middle */
        #finger9-indicator {
            left: 27px;
            top: 5px;
        }

        /* Right Ring */
        #finger10-indicator {
            left: 5px;
            top: 30px;
        }

        /* Right Little */

        .finger-indicator.text-success {
            color: #28a745;
        }

        .finger-indicator.text-danger {
            color: #dc3545;
        }

        .finger-indicator:hover {
            cursor: pointer;
            opacity: 0.8;
            border-width: 2px;
        }

        .fingerprint-diagram h6 {
            color: #fff;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
        }

        .fingerprint-diagram p {
            color: #fff;
            margin: 0.5rem 0;
        }

        .fingerprint-diagram .text-success {
            color: #28a745;
        }

        .fingerprint-diagram .text-danger {
            color: #dc3545;
        }

        /* Urgent row styling */
        .table-warning {
            background-color: rgba(255, 193, 7, 0.15) !important;
        }

        /* Action buttons styling */
        .btn-action-group {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .btn-action-group .btn {
            white-space: nowrap;
        }
    </style>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>