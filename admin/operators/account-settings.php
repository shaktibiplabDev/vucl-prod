<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Get current user data
$user_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
$stmt->execute([$user_id]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$user) {
    echo '<script>window.location.href = "logout.php";</script>';
    exit;
}

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Handle profile image upload
    if (isset($_FILES['profile_image']) && $_FILES['profile_image']['error'] === UPLOAD_ERR_OK) {
        $uploadDir = '../../assets/img/avatars/';
        $allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
        $maxFileSize = 800 * 1024; // 800KB
        
        $file = $_FILES['profile_image'];
        
        // Validate file type
        if (!in_array($file['type'], $allowedTypes)) {
            $error = "Only JPG, PNG, and GIF files are allowed.";
        } 
        // Validate file size
        elseif ($file['size'] > $maxFileSize) {
            $error = "File size must be less than 800KB.";
        } else {
            // Generate unique filename
            $extension = pathinfo($file['name'], PATHINFO_EXTENSION);
            $filename = 'user_' . $user_id . '_' . time() . '.' . $extension;
            $destination = $uploadDir . $filename;
            
            if (move_uploaded_file($file['tmp_name'], $destination)) {
                // Delete old profile image if it's not the default
                if ($user['profile_image'] !== 'default.png') {
                    @unlink($uploadDir . $user['profile_image']);
                }
                
                // Update database
                $stmt = $pdo->prepare("UPDATE users SET profile_image = ? WHERE id = ?");
                $stmt->execute([$filename, $user_id]);
                
                // Update user data
                $user['profile_image'] = $filename;
                $success = "Profile image updated successfully!";
            } else {
                $error = "Failed to upload profile image.";
            }
        }
    }
    
    // Handle profile update
    if (isset($_POST['full_name'])) {
        $full_name = $_POST['full_name'] ?? '';
        $email = $_POST['email'] ?? '';
        $username = $_POST['username'] ?? '';
        
        // Basic validation
        if (!empty($email) && !filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $error = "Invalid email format";
        } else {
            try {
                $stmt = $pdo->prepare("UPDATE users SET full_name = ?, email = ?, username = ? WHERE id = ?");
                $stmt->execute([$full_name, $email, $username, $user_id]);
                
                // Update session data
                $_SESSION['username'] = $username;
                $_SESSION['email'] = $email;
                
                // Refresh user data
                $stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
                $stmt->execute([$user_id]);
                $user = $stmt->fetch(PDO::FETCH_ASSOC);
                
                $success = "Profile updated successfully!";
            } catch (PDOException $e) {
                $error = "Error updating profile: " . $e->getMessage();
            }
        }
    }
    
}

// Get referred users
$referred_users = [];
if (!empty($user['referral_code'])) {
    $stmt = $pdo->prepare("SELECT id, username, email, created_at FROM users WHERE referred_by = ? ORDER BY created_at DESC");
    $stmt->execute([$user_id]);
    $referred_users = $stmt->fetchAll(PDO::FETCH_ASSOC);
}

// Split full name
$name_parts = explode(' ', $user['full_name'], 2);
$first_name = $name_parts[0] ?? '';
$last_name = $name_parts[1] ?? '';
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
        <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
          <?php include('includes/navbar.php'); ?>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <?php if (isset($success)): ?>
                <div class="alert alert-success"><?= htmlspecialchars($success) ?></div>
              <?php endif; ?>
              <?php if (isset($error)): ?>
                <div class="alert alert-danger"><?= htmlspecialchars($error) ?></div>
              <?php endif; ?>
              
              <div class="row">
                <div class="col-md-12">
                  <div class="nav-align-top">
                    <ul class="nav nav-pills flex-column flex-md-row mb-6 gap-md-0 gap-2">
                      <li class="nav-item">
                        <a class="nav-link active" href="javascript:void(0);"><i class="icon-base ti tabler-users icon-sm me-1_5"></i> Account</a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link" href="security-settings.php"><i class="icon-base ti tabler-lock icon-sm me-1_5"></i> Security</a>
                      </li>
                      
                    </ul>
                  </div>
                  
                  <!-- Profile Card -->
                  <div class="card mb-6">
                    <div class="card-body">
                      <div class="d-flex align-items-start align-items-sm-center gap-6">
                        <img src="../../assets/img/avatars/<?= htmlspecialchars($user['profile_image'] ?? 'default.png') ?>" alt="user-avatar" class="d-block w-px-100 h-px-100 rounded" id="uploadedAvatar" />
                        <div class="button-wrapper">
                          <form id="profileImageForm" method="POST" enctype="multipart/form-data">
                            <label for="profile_image" class="btn btn-primary me-3 mb-4" tabindex="0">
                              <span class="d-none d-sm-block">Upload new photo</span>
                              <i class="icon-base ti tabler-upload d-block d-sm-none"></i>
                              <input type="file" id="profile_image" name="profile_image" class="account-file-input" hidden accept="image/png, image/jpeg, image/gif" />
                            </label>
                            <button type="button" class="btn btn-label-secondary account-image-reset mb-4" id="resetProfileImage">
                              <i class="icon-base ti tabler-reset d-block d-sm-none"></i>
                              <span class="d-none d-sm-block">Reset</span>
                            </button>
                          </form>
                          <div>Allowed JPG, PNG or GIF. Max size of 800K</div>
                        </div>
                      </div>
                    </div>
                    <div class="card-body pt-4">
                      <form id="formAccountSettings" method="POST">
                        <div class="row gy-4 gx-6 mb-6">
                          <div class="col-md-6 form-control-validation">
                            <label for="firstName" class="form-label">First Name</label>
                            <input class="form-control" type="text" id="firstName" name="firstName" value="<?= htmlspecialchars($first_name) ?>" required />
                          </div>
                          <div class="col-md-6 form-control-validation">
                            <label for="lastName" class="form-label">Last Name</label>
                            <input class="form-control" type="text" name="lastName" id="lastName" value="<?= htmlspecialchars($last_name) ?>" required />
                          </div>
                          <div class="col-md-6">
                            <label for="username" class="form-label">Username</label>
                            <input class="form-control" type="text" id="username" name="username" value="<?= htmlspecialchars($user['username']) ?>" required />
                          </div>
                          <div class="col-md-6">
                            <label for="email" class="form-label">E-mail</label>
                            <input class="form-control" type="email" id="email" name="email" value="<?= htmlspecialchars($user['email']) ?>" required />
                          </div>
                          <?php if ($user['user_type'] === 'operator' && !empty($user['distributor_id'])): ?>
                            <div class="col-md-6">
                            <label for="distributor" class="form-label">My Distributor</label>
                            <?php
                            $distributor_id = $user['distributor_id'];
                            $stmt = $pdo->prepare("SELECT full_name FROM users WHERE id = ?");
                            $stmt->execute([$distributor_id]);
                            $distributor = $stmt->fetch(PDO::FETCH_ASSOC);
                            $distributor_name = $distributor ? $distributor['full_name'] : 'Unknown Distributor';
                            ?>
                            <input type="text" class="form-control" id="distributor" value="<?= htmlspecialchars($distributor_name) ?>" readonly />
                            </div>
                          <?php endif; ?>
                          <?php if (!empty($user['referral_code'])): ?>
                          <div class="col-md-6">
                            <label for="referralCode" class="form-label">Referral Code</label>
                            <input type="text" class="form-control" id="referralCode" value="<?= htmlspecialchars($user['referral_code']) ?>" readonly />
                          </div>
                          <?php endif; ?>
                          <div class="col-md-6">
                            <label for="lastLogin" class="form-label">Last Login</label>
                            <input type="text" class="form-control" id="lastLogin" value="<?= $user['last_login'] ? htmlspecialchars(date('M j, Y g:i A', strtotime($user['last_login']))) : 'Never' ?>" readonly />
                          </div>
                          <div class="col-md-6">
                            <label for="memberSince" class="form-label">Member Since</label>
                            <input type="text" class="form-control" id="memberSince" value="<?= htmlspecialchars(date('M j, Y', strtotime($user['created_at']))) ?>" readonly />
                          </div>
                        </div>
                        <div class="mt-2">
                          <button type="submit" class="btn btn-primary me-3">Save changes</button>
                          <button type="reset" class="btn btn-label-secondary">Cancel</button>
                          <input type="hidden" name="full_name" value="">
                        </div>
                      </form>
                    </div>
                  </div>
                  
                  <!-- Referral Section -->
                  <?php if (!empty($user['referral_code'])): ?>
                  <div class="card mb-6">
                    <h5 class="card-header">Your Referral Network</h5>
                    <div class="card-body">
                      <div class="mb-4">
                        <h6 class="mb-2">Your Referral Link</h6>
                        <div class="input-group">
                          <input type="text" class="form-control" id="referralLink" value="<?= htmlspecialchars('https://' . $_SERVER['HTTP_HOST'] . '/register.php?ref=' . $user['referral_code']) ?>" readonly>
                          <button class="btn btn-outline-secondary" type="button" id="copyReferralLink">
                            <i class="icon-base ti tabler-copy"></i>
                          </button>
                        </div>
                        <small class="text-muted">Share this link to earn commissions</small>
                      </div>
                      
                      <?php if (!empty($referred_users)): ?>
                      <div class="mt-4">
                        <h6 class="mb-3">People You've Referred (<?= count($referred_users) ?>)</h6>
                        <div class="table-responsive">
                          <table class="table table-hover">
                            <thead>
                              <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Joined On</th>
                              </tr>
                            </thead>
                            <tbody>
                              <?php foreach ($referred_users as $referred): ?>
                              <tr>
                                <td><?= htmlspecialchars($referred['username']) ?></td>
                                <td><?= htmlspecialchars($referred['email']) ?></td>
                                <td><?= htmlspecialchars(date('M j, Y', strtotime($referred['created_at']))) ?></td>
                              </tr>
                              <?php endforeach; ?>
                            </tbody>
                          </table>
                        </div>
                      </div>
                      <?php else: ?>
                      <div class="alert alert-info mt-4">
                        You haven't referred anyone yet. Share your referral link to get started!
                      </div>
                      <?php endif; ?>
                    </div>
                  </div>
                  <?php endif; ?>
                </div>
              </div>
            </div>
            
            <?php include('includes/footer.php'); ?>
          </div>
        </div>
      </div>
    </div>

    <?php include('includes/script.php'); ?>
    <script>
      // Combine first/last name into full_name before submit
      document.getElementById('formAccountSettings').addEventListener('submit', function(e) {
        const firstName = document.getElementById('firstName').value;
        const lastName = document.getElementById('lastName').value;
        this.querySelector('[name="full_name"]').value = firstName + ' ' + lastName;
      });
      
      // Copy referral link to clipboard
      document.getElementById('copyReferralLink').addEventListener('click', function() {
        const referralLink = document.getElementById('referralLink');
        referralLink.select();
        document.execCommand('copy');
        
        // Show toast notification
        const toast = new bootstrap.Toast(document.getElementById('copyToast'));
        toast.show();
      });
      
      // Handle profile image upload
      document.getElementById('profile_image').addEventListener('change', function() {
        if (this.files && this.files[0]) {
          // Validate file size
          if (this.files[0].size > 800 * 1024) {
            alert('File size must be less than 800KB');
            return;
          }
          
          // Validate file type
          const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
          if (!validTypes.includes(this.files[0].type)) {
            alert('Only JPG, PNG, and GIF files are allowed');
            return;
          }
          
          // Submit the form
          document.getElementById('profileImageForm').submit();
        }
      });
      
      // Handle profile image reset
      document.getElementById('resetProfileImage').addEventListener('click', function() {
        if (confirm('Reset to default profile image?')) {
          fetch('update_profile_image.php', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: 'reset_image=1'
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              document.getElementById('uploadedAvatar').src = '../../assets/img/avatars/default.png';
              const toast = new bootstrap.Toast(document.getElementById('copyToast'));
              document.getElementById('copyToast').querySelector('.toast-body').textContent = 'Profile image reset to default';
              toast.show();
            } else {
              alert('Error: ' + data.message);
            }
          });
        }
      });
    </script>
    
    <!-- Toast Notifications -->
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
      <!-- Copy Success Toast -->
      <div id="copyToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
          <i class="icon-base ti tabler-check me-2"></i>
          <strong class="me-auto">Success</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          Referral link copied to clipboard!
        </div>
      </div>
    </div>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>