<?php
$code = base64_decode('PD9waHAKcmVxdWlyZSBfX0RJUl9fIC4gJy9zZWN1cml0eS9hdXRoLnBocCc7CnJlcXVpcmVfb25jZSByZWFscGF0aChfX0RJUl9fIC4gJy8uLi8uLi9jb25maWcvZGF0YWJhc2UucGhwJyk7CgovLyBDaGVjayBpZiB1c2VyIGlzIG9wZXJhdG9yCiRpc29wZXJhdG9yID0gJF9TRVNTSU9OWyd1c2VyX3R5cGUnXSA9PT0gJ29wZXJhdG9yJzsKCi8vIENoZWNrIGlmIHVzZXIgaGFzIHRoZSAnY2hpbGQtZW5yb2xsbWVudCcgc2VydmljZSBhY2Nlc3MKJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJTRUxFQ1QgRElTVElOQ1Qgc2VydmljZV9rZXkgRlJPTSBvcGVyYXRvcl9zZXJ2aWNlcyBXSEVSRSBvcGVyYXRvcl9pZCA9ID8iKTsKJHN0bXQtPmV4ZWN1dGUoWyRfU0VTU0lPTlsndXNlcl9pZCddXSk7CiRzZXJ2aWNlS2V5cyA9ICRzdG10LT5mZXRjaEFsbChQRE86OkZFVENIX0NPTFVNTik7Cgokc3RtdCA9ICRwZG8tPnByZXBhcmUoIlNFTEVDVCBESVNUSU5DVCBzZXJ2aWNlX2tleSBGUk9NIG9wZXJhdG9yX3NlcnZpY2VzIFdIRVJFIG9wZXJhdG9yX2lkID0gPyBBTkQgaXNfYWN0aXZlID0gMSIpOwokc3RtdC0+ZXhlY3V0ZShbJF9TRVNTSU9OWyd1c2VyX2lkJ11dKTsKJGFjdGl2ZVNlcnZpY2VzID0gJHN0bXQtPmZldGNoQWxsKFBETzo6RkVUQ0hfQ09MVU1OKTsKCmlmICghaW5fYXJyYXkoJ2NoaWxkLWVucm9sbG1lbnQnLCAkc2VydmljZUtleXMpIHx8ICFpbl9hcnJheSgnY2hpbGQtZW5yb2xsbWVudCcsICRhY3RpdmVTZXJ2aWNlcykpIHsKICAgICRpc29wZXJhdG9yID0gZmFsc2U7CiAgICBlY2hvICI8c2NyaXB0PgogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgIHRpdGxlOiAnPHN0cm9uZz5BY2Nlc3MgRGVuaWVkIGZvciBDaGlsZCBFbnJvbGxtZW50PC9zdHJvbmc+JywKICAgICAgICAgIGh0bWw6ICc8cD5Zb3UgYXJlIGVpdGhlciB1bmFzc2lnbmVkIG9yIGluYWN0aXZlIGZvciB0aGlzIHNlcnZpY2UuIENvbnRhY3QgYWRtaW4uPC9wPicsCiAgICAgICAgICBpY29uOiAnd2FybmluZycsCiAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJzxpIGNsYXNzPVwiaWNvbi1iYXNlIHRpIHRhYmxlci1jaGVja1wiPjwvaT4gT0snLAogICAgICAgICAgY3VzdG9tQ2xhc3M6IHsKICAgICAgICAgICAgcG9wdXA6ICdzd2FsLXdpZGUnLAogICAgICAgICAgICBjb25maXJtQnV0dG9uOiAnYnRuIGJ0bi1kYW5nZXInCiAgICAgICAgICB9CiAgICAgICAgfSkudGhlbigoKSA9PiB7CiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvYWRtaW4vb3BlcmF0b3JzJzsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICA8L3NjcmlwdD4iOwp9CgovLyBJbml0aWFsaXplIGZpbHRlcnMKJHN0YXR1c0ZpbHRlciA9ICRfR0VUWydzdGF0dXMnXSA/PyAnJzsKJGRhdGVGcm9tID0gJF9HRVRbJ2RhdGVfZnJvbSddID8/ICcnOwokZGF0ZVRvID0gJF9HRVRbJ2RhdGVfdG8nXSA/PyAnJzsKJGFwcElkU2VhcmNoID0gJF9HRVRbJ2FwcF9pZCddID8/ICcnOwokdXJnZW50RmlsdGVyID0gaXNzZXQoJF9HRVRbJ3VyZ2VudCddKSA/IChib29sKSRfR0VUWyd1cmdlbnQnXSA6IG51bGw7CiR1c2VySWRGaWx0ZXIgPSAkX0dFVFsndXNlcl9pZCddID8/ICcnOwoKLy8gSGFuZGxlIGJ1bGsgYWN0aW9ucwppZiAoJF9TRVJWRVJbJ1JFUVVFU1RfTUVUSE9EJ10gPT09ICdQT1NUJyAmJiAkaXNvcGVyYXRvcikgewogICAgaWYgKGlzc2V0KCRfUE9TVFsnYnVsa19hY3Rpb24nXSkpIHsKICAgICAgICAkc2VsZWN0ZWRJZHMgPSAkX1BPU1RbJ3NlbGVjdGVkX2lkcyddID8/IFtdOwoKICAgICAgICBpZiAoIWVtcHR5KCRzZWxlY3RlZElkcykpIHsKICAgICAgICAgICAgJHBsYWNlaG9sZGVycyA9IGltcGxvZGUoJywnLCBhcnJheV9maWxsKDAsIGNvdW50KCRzZWxlY3RlZElkcyksICc/JykpOwoKICAgICAgICAgICAgc3dpdGNoICgkX1BPU1RbJ2J1bGtfYWN0aW9uJ10pIHsKICAgICAgICAgICAgICAgIGNhc2UgJ21hcmtfdXJnZW50JzoKICAgICAgICAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIlVQREFURSBjaGlsZF9lbnJvbGwgU0VUIGlzX3VyZ2VudCA9IFRSVUUgV0hFUkUgaWQgSU4gKCRwbGFjZWhvbGRlcnMpIik7CiAgICAgICAgICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoJHNlbGVjdGVkSWRzKTsKICAgICAgICAgICAgICAgICAgICAkX1NFU1NJT05bJ2ZsYXNoX21lc3NhZ2UnXSA9ICdTZWxlY3RlZCBjaGlsZCBlbnJvbGxtZW50IHJlY29yZHMgbWFya2VkIGFzIHVyZ2VudCc7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAndW5tYXJrX3VyZ2VudCc6CiAgICAgICAgICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJVUERBVEUgY2hpbGRfZW5yb2xsIFNFVCBpc191cmdlbnQgPSBGQUxTRSBXSEVSRSBpZCBJTiAoJHBsYWNlaG9sZGVycykiKTsKICAgICAgICAgICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZSgkc2VsZWN0ZWRJZHMpOwogICAgICAgICAgICAgICAgICAgICRfU0VTU0lPTlsnZmxhc2hfbWVzc2FnZSddID0gJ1NlbGVjdGVkIGNoaWxkIGVucm9sbG1lbnQgcmVjb3JkcyB1bm1hcmtlZCBhcyB1cmdlbnQnOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6CiAgICAgICAgICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJERUxFVEUgRlJPTSBjaGlsZF9lbnJvbGwgV0hFUkUgaWQgSU4gKCRwbGFjZWhvbGRlcnMpIik7CiAgICAgICAgICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoJHNlbGVjdGVkSWRzKTsKICAgICAgICAgICAgICAgICAgICAkX1NFU1NJT05bJ2ZsYXNoX21lc3NhZ2UnXSA9ICdTZWxlY3RlZCBjaGlsZCBlbnJvbGxtZW50IHJlY29yZHMgZGVsZXRlZCc7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAnYXBwcm92ZSc6CiAgICAgICAgICAgICAgICAgICAgLy8gU3RhcnQgdHJhbnNhY3Rpb24gZm9yIGFwcHJvdmFsIHByb2Nlc3NpbmcKICAgICAgICAgICAgICAgICAgICAkcGRvLT5iZWdpblRyYW5zYWN0aW9uKCk7CgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0IGdldCB0aGUgYXBwbGljYXRpb25zIHRvIGJlIGFwcHJvdmVkCiAgICAgICAgICAgICAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiU0VMRUNUIGlkLCB1c2VyX2lkLCBhcHBsaWNhdGlvbl9pZCwgYXNzaWduZWRfdG8gRlJPTSBjaGlsZF9lbnJvbGwgV0hFUkUgaWQgSU4gKCRwbGFjZWhvbGRlcnMpIik7CiAgICAgICAgICAgICAgICAgICAgICAgICRzdG10LT5leGVjdXRlKCRzZWxlY3RlZElkcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRhcHBsaWNhdGlvbnMgPSAkc3RtdC0+ZmV0Y2hBbGwoUERPOjpGRVRDSF9BU1NPQyk7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc3RhdHVzIHRvIGFwcHJvdmVkCiAgICAgICAgICAgICAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiVVBEQVRFIGNoaWxkX2Vucm9sbCBTRVQgc3RhdHVzID0gJ2FwcHJvdmVkJyBXSEVSRSBpZCBJTiAoJHBsYWNlaG9sZGVycykiKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoJHNlbGVjdGVkSWRzKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCBvcGVyYXRvcidzIGNvbW1pc3Npb24gcHJpY2UgZm9yIHRoaXMgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIlNFTEVDVCBwcmljZSBGUk9NIG9wZXJhdG9yX3NlcnZpY2VzIFdIRVJFIG9wZXJhdG9yX2lkID0gPyBBTkQgc2VydmljZV9rZXkgPSAnY2hpbGQtZW5yb2xsbWVudCciKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoWyRfU0VTU0lPTlsndXNlcl9pZCddXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICRvcGVyYXRvckNvbW1pc3Npb24gPSAkc3RtdC0+ZmV0Y2hDb2x1bW4oKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgcGF5bWVudCB0byBvcGVyYXRvciBmb3IgZWFjaCBhcHByb3ZlZCBhcHBsaWNhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkYXBwbGljYXRpb25zIGFzICRhcHApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkb3BlcmF0b3JDb21taXNzaW9uID4gMCAmJiAkYXBwWydhc3NpZ25lZF90byddKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIG9wZXJhdG9yJ3MgYmFsYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiVVBEQVRFIHVzZXJzIFNFVCBib251c193YWxsZXQgPSBib251c193YWxsZXQgKyA/IFdIRVJFIGlkID0gPyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskb3BlcmF0b3JDb21taXNzaW9uLCAkYXBwWydhc3NpZ25lZF90byddXSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCB0cmFuc2FjdGlvbiBmb3Igb3BlcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZGVzY3JpcHRpb24gPSAiQ29tbWlzc2lvbiBmb3IgYXBwcm92ZWQgQ2hpbGQgRW5yb2xsbWVudCAoQXBwIElEOiAiIC4gJGFwcFsnYXBwbGljYXRpb25faWQnXSAuICIpIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIklOU0VSVCBJTlRPIHRyYW5zYWN0aW9uc19saXN0ICh1c2VyX2lkLCBhbW91bnQsIHR5cGUsIGRlc2NyaXB0aW9uLCByZWZlcmVuY2VfaWQsIHNlcnZpY2VfdHlwZSkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZBTFVFUyAoPywgPywgJ2NyZWRpdCcsID8sID8sICdjaGlsZC1lbnJvbGxtZW50JykiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhcHBbJ2Fzc2lnbmVkX3RvJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvcGVyYXRvckNvbW1pc3Npb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkZXNjcmlwdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFwcFsnaWQnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAkcGRvLT5jb21taXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWydmbGFzaF9tZXNzYWdlJ10gPSAnU2VsZWN0ZWQgY2hpbGQgZW5yb2xsbWVudCByZWNvcmRzIGFwcHJvdmVkIGFuZCBjb21taXNzaW9ucyBwcm9jZXNzZWQnOwogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiAkZSkgewogICAgICAgICAgICAgICAgICAgICAgICAkcGRvLT5yb2xsQmFjaygpOwogICAgICAgICAgICAgICAgICAgICAgICAkX1NFU1NJT05bJ2ZsYXNoX21lc3NhZ2UnXSA9ICdFcnJvciBwcm9jZXNzaW5nIGNoaWxkIGVucm9sbG1lbnQgYXBwcm92YWxzOiAnIC4gJGUtPmdldE1lc3NhZ2UoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgY2FzZSAncmVqZWN0JzoKICAgICAgICAgICAgICAgICAgICAvLyBTdGFydCB0cmFuc2FjdGlvbiBmb3IgcmVmdW5kIHByb2Nlc3NpbmcKICAgICAgICAgICAgICAgICAgICAkcGRvLT5iZWdpblRyYW5zYWN0aW9uKCk7CgogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0IGdldCB0aGUgYXBwbGljYXRpb25zIHRvIGJlIHJlamVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiU0VMRUNUIGlkLCB1c2VyX2lkLCBhcHBsaWNhdGlvbl9pZCBGUk9NIGNoaWxkX2Vucm9sbCBXSEVSRSBpZCBJTiAoJHBsYWNlaG9sZGVycykiKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoJHNlbGVjdGVkSWRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGFwcGxpY2F0aW9ucyA9ICRzdG10LT5mZXRjaEFsbChQRE86OkZFVENIX0FTU09DKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBzdGF0dXMgdG8gcmVqZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJVUERBVEUgY2hpbGRfZW5yb2xsIFNFVCBzdGF0dXMgPSAncmVqZWN0ZWQnIFdIRVJFIGlkIElOICgkcGxhY2Vob2xkZXJzKSIpOwogICAgICAgICAgICAgICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZSgkc2VsZWN0ZWRJZHMpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHNlcnZpY2UgcHJpY2UKICAgICAgICAgICAgICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJTRUxFQ1QgcHJpY2UgRlJPTSBzZXJ2aWNlcyBXSEVSRSBzZXJ2aWNlX2tleSA9ICdjaGlsZC1lbnJvbGxtZW50JyIpOwogICAgICAgICAgICAgICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAkc2VydmljZVByaWNlID0gJHN0bXQtPmZldGNoQ29sdW1uKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIHJlZnVuZCBmb3IgZWFjaCBhcHBsaWNhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkYXBwbGljYXRpb25zIGFzICRhcHApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2VydmljZVByaWNlID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSByZXRhaWxlciB3YWxsZXQgYmFsYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiVVBEQVRFIHVzZXJzIFNFVCB3YWxsZXQgPSB3YWxsZXQgKyA/IFdIRVJFIGlkID0gPyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskc2VydmljZVByaWNlLCAkYXBwWyd1c2VyX2lkJ11dKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVjb3JkIHRyYW5zYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRlc2NyaXB0aW9uID0gIlJlZnVuZCBmb3IgcmVqZWN0ZWQgY2hpbGQgZW5yb2xsbWVudCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJJTlNFUlQgSU5UTyB0cmFuc2FjdGlvbnNfbGlzdCAodXNlcl9pZCwgYW1vdW50LCB0eXBlLCBkZXNjcmlwdGlvbiwgcmVmZXJlbmNlX2lkLCBzZXJ2aWNlX3R5cGUpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWQUxVRVMgKD8sID8sICdjcmVkaXQnLCA/LCA/LCAnY2hpbGQtZW5yb2xsbWVudCcpIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXBwWyd1c2VyX2lkJ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZXJ2aWNlUHJpY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkZXNjcmlwdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFwcFsnaWQnXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAkcGRvLT5jb21taXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWydmbGFzaF9tZXNzYWdlJ10gPSAnU2VsZWN0ZWQgY2hpbGQgZW5yb2xsbWVudCByZWNvcmRzIHJlamVjdGVkIGFuZCByZWZ1bmRzIHByb2Nlc3NlZCc7CiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uICRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRwZG8tPnJvbGxCYWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRfU0VTU0lPTlsnZmxhc2hfbWVzc2FnZSddID0gJ0Vycm9yIHByb2Nlc3NpbmcgY2hpbGQgZW5yb2xsbWVudCByZWplY3Rpb25zOiAnIC4gJGUtPmdldE1lc3NhZ2UoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGhlYWRlcigiTG9jYXRpb246ICIgLiAkX1NFUlZFUlsnUEhQX1NFTEYnXSk7CiAgICAgICAgICAgIGV4aXQoKTsKICAgICAgICB9CiAgICB9Cn0KCi8vIEhhbmRsZSBzaW5nbGUgcmVjb3JkIGFjdGlvbnMKaWYgKGlzc2V0KCRfR0VUWydhY3Rpb24nXSkgJiYgaXNzZXQoJF9HRVRbJ2lkJ10pICYmICRpc29wZXJhdG9yKSB7CiAgICAkaWQgPSAkX0dFVFsnaWQnXTsKCiAgICBzd2l0Y2ggKCRfR0VUWydhY3Rpb24nXSkgewogICAgICAgIGNhc2UgJ2Fzc2lnbic6CiAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiVVBEQVRFIGNoaWxkX2Vucm9sbCBTRVQgYXNzaWduZWRfdG8gPSA/LCBzdGF0dXMgPSAncHJvY2Vzc2luZycgV0hFUkUgaWQgPSA/Iik7CiAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskX1NFU1NJT05bJ3VzZXJfaWQnXSwgJGlkXSk7CiAgICAgICAgICAgICRfU0VTU0lPTlsnZmxhc2hfbWVzc2FnZSddID0gJ0NoaWxkIGVucm9sbG1lbnQgYXNzaWduZWQgc3VjY2Vzc2Z1bGx5JzsKICAgICAgICAgICAgYnJlYWs7CiAgICB9CgogICAgaGVhZGVyKCJMb2NhdGlvbjogIiAuICRfU0VSVkVSWydQSFBfU0VMRiddKTsKICAgIGV4aXQoKTsKfQoKaWYgKCRfU0VSVkVSWydSRVFVRVNUX01FVEhPRCddID09PSAnUE9TVCcgJiYgaXNzZXQoJF9QT1NUWyd1cGRhdGVfc3RhdHVzX2lkJ10sICRfUE9TVFsnbmV3X3N0YXR1cyddKSAmJiAkaXNvcGVyYXRvcikgewogICAgJGlkID0gJF9QT1NUWyd1cGRhdGVfc3RhdHVzX2lkJ107CiAgICAkc3RhdHVzID0gJF9QT1NUWyduZXdfc3RhdHVzJ107CgogICAgLy8gU3RhcnQgdHJhbnNhY3Rpb24gZm9yIHN0YXR1cyB1cGRhdGUgcHJvY2Vzc2luZwogICAgJHBkby0+YmVnaW5UcmFuc2FjdGlvbigpOwoKICAgIHRyeSB7CiAgICAgICAgLy8gVXBkYXRlIHRoZSBzdGF0dXMKICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIlVQREFURSBjaGlsZF9lbnJvbGwgU0VUIHN0YXR1cyA9ID8gV0hFUkUgaWQgPSA/IEFORCBhc3NpZ25lZF90byA9ID8iKTsKICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbJHN0YXR1cywgJGlkLCAkX1NFU1NJT05bJ3VzZXJfaWQnXV0pOwoKICAgICAgICAvLyBHZXQgYXBwbGljYXRpb24gZGV0YWlscwogICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiU0VMRUNUIHVzZXJfaWQsIGFwcGxpY2F0aW9uX2lkLCBhc3NpZ25lZF90byBGUk9NIGNoaWxkX2Vucm9sbCBXSEVSRSBpZCA9ID8iKTsKICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbJGlkXSk7CiAgICAgICAgJGFwcGxpY2F0aW9uID0gJHN0bXQtPmZldGNoKFBETzo6RkVUQ0hfQVNTT0MpOwoKICAgICAgICBpZiAoJGFwcGxpY2F0aW9uKSB7CiAgICAgICAgICAgIGlmICgkc3RhdHVzID09PSAncmVqZWN0ZWQnKSB7CiAgICAgICAgICAgICAgICAvLyBHZXQgc2VydmljZSBwcmljZQogICAgICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJTRUxFQ1QgcHJpY2UgRlJPTSBwcmljZXNfbGlzdCBXSEVSRSBzZXJ2aWNlX2tleSA9ICdjaGlsZC1lbnJvbGxtZW50JyIpOwogICAgICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoKTsKICAgICAgICAgICAgICAgICRzZXJ2aWNlUHJpY2UgPSAkc3RtdC0+ZmV0Y2hDb2x1bW4oKTsKCiAgICAgICAgICAgICAgICBpZiAoJHNlcnZpY2VQcmljZSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgcmV0YWlsZXIgYmFsYW5jZQogICAgICAgICAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiVVBEQVRFIHVzZXJzIFNFVCB3YWxsZXQgPSB3YWxsZXQgKyA/IFdIRVJFIGlkID0gPyIpOwogICAgICAgICAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskc2VydmljZVByaWNlLCAkYXBwbGljYXRpb25bJ3VzZXJfaWQnXV0pOwoKICAgICAgICAgICAgICAgICAgICAvLyBSZWNvcmQgdHJhbnNhY3Rpb24KICAgICAgICAgICAgICAgICAgICAkZGVzY3JpcHRpb24gPSAiUmVmdW5kIGZvciByZWplY3RlZCBDaGlsZCBFbnJvbGxtZW50IjsKICAgICAgICAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIklOU0VSVCBJTlRPIHRyYW5zYWN0aW9uc19saXN0ICh1c2VyX2lkLCBhbW91bnQsIHR5cGUsIGRlc2NyaXB0aW9uLCByZWZlcmVuY2VfaWQsIHNlcnZpY2VfdHlwZSkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZBTFVFUyAoPywgPywgJ2NyZWRpdCcsID8sID8sICdjaGlsZC1lbnJvbGxtZW50JykiKTsKICAgICAgICAgICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbCiAgICAgICAgICAgICAgICAgICAgICAgICRhcHBsaWNhdGlvblsndXNlcl9pZCddLAogICAgICAgICAgICAgICAgICAgICAgICAkc2VydmljZVByaWNlLAogICAgICAgICAgICAgICAgICAgICAgICAkZGVzY3JpcHRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICRpZAogICAgICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2VpZiAoJHN0YXR1cyA9PT0gJ2FwcHJvdmVkJykgewogICAgICAgICAgICAgICAgLy8gR2V0IG9wZXJhdG9yJ3MgY29tbWlzc2lvbiBwcmljZSBmb3IgdGhpcyBzZXJ2aWNlCiAgICAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIlNFTEVDVCBwcmljZSBGUk9NIG9wZXJhdG9yX3NlcnZpY2VzIFdIRVJFIG9wZXJhdG9yX2lkID0gPyBBTkQgc2VydmljZV9rZXkgPSAnY2hpbGQtZW5yb2xsbWVudCciKTsKICAgICAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskX1NFU1NJT05bJ3VzZXJfaWQnXV0pOwogICAgICAgICAgICAgICAgJG9wZXJhdG9yQ29tbWlzc2lvbiA9ICRzdG10LT5mZXRjaENvbHVtbigpOwoKICAgICAgICAgICAgICAgIGlmICgkb3BlcmF0b3JDb21taXNzaW9uID4gMCAmJiAkYXBwbGljYXRpb25bJ2Fzc2lnbmVkX3RvJ10pIHsKICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgb3BlcmF0b3IncyBiYWxhbmNlCiAgICAgICAgICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJVUERBVEUgdXNlcnMgU0VUIGJvbnVzX3dhbGxldCA9IGJvbnVzX3dhbGxldCArID8gV0hFUkUgaWQgPSA/Iik7CiAgICAgICAgICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoWyRvcGVyYXRvckNvbW1pc3Npb24sICRhcHBsaWNhdGlvblsnYXNzaWduZWRfdG8nXV0pOwoKICAgICAgICAgICAgICAgICAgICAvLyBSZWNvcmQgdHJhbnNhY3Rpb24gZm9yIG9wZXJhdG9yCiAgICAgICAgICAgICAgICAgICAgJGRlc2NyaXB0aW9uID0gIkNvbW1pc3Npb24gZm9yIGFwcHJvdmVkIENoaWxkIEVucm9sbG1lbnQgKEFwcCBJRDogIiAuICRhcHBsaWNhdGlvblsnYXBwbGljYXRpb25faWQnXSAuICIpIjsKICAgICAgICAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIklOU0VSVCBJTlRPIHRyYW5zYWN0aW9uc19saXN0ICh1c2VyX2lkLCBhbW91bnQsIHR5cGUsIGRlc2NyaXB0aW9uLCByZWZlcmVuY2VfaWQsIHNlcnZpY2VfdHlwZSkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZBTFVFUyAoPywgPywgJ2NyZWRpdCcsID8sID8sICdjaGlsZC1lbnJvbGxtZW50JykiKTsKICAgICAgICAgICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbCiAgICAgICAgICAgICAgICAgICAgICAgICRhcHBsaWNhdGlvblsnYXNzaWduZWRfdG8nXSwKICAgICAgICAgICAgICAgICAgICAgICAgJG9wZXJhdG9yQ29tbWlzc2lvbiwKICAgICAgICAgICAgICAgICAgICAgICAgJGRlc2NyaXB0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICAkaWQKICAgICAgICAgICAgICAgICAgICBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJHBkby0+Y29tbWl0KCk7CiAgICAgICAgJF9TRVNTSU9OWydmbGFzaF9tZXNzYWdlJ10gPSAiQ2hpbGQgZW5yb2xsbWVudCBzdGF0dXMgdXBkYXRlZCB0byAnJHN0YXR1cyciIC4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgkc3RhdHVzID09PSAncmVqZWN0ZWQnID8gJyBhbmQgcmVmdW5kIHByb2Nlc3NlZCcgOiAnJykgLiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCRzdGF0dXMgPT09ICdhcHByb3ZlZCcgPyAnIGFuZCBjb21taXNzaW9uIGNyZWRpdGVkJyA6ICcnKTsKICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiAkZSkgewogICAgICAgICRwZG8tPnJvbGxCYWNrKCk7CiAgICAgICAgJF9TRVNTSU9OWydmbGFzaF9tZXNzYWdlJ10gPSAnRXJyb3IgdXBkYXRpbmcgY2hpbGQgZW5yb2xsbWVudCBzdGF0dXM6ICcgLiAkZS0+Z2V0TWVzc2FnZSgpOwogICAgfQoKICAgIGhlYWRlcigiTG9jYXRpb246ICIgLiAkX1NFUlZFUlsnUEhQX1NFTEYnXSk7CiAgICBleGl0KCk7Cn0KCi8vIEJ1aWxkIHRoZSBiYXNlIHF1ZXJ5CiRxdWVyeSA9ICJTRUxFQ1QgCiAgICAgICAgICAgIGNlLmlkLAogICAgICAgICAgICBjZS5hcHBsaWNhdGlvbl9pZCwKICAgICAgICAgICAgY2UuY2hpbGRfbmFtZSwKICAgICAgICAgICAgY2UuY2hpbGRfZG9iLAogICAgICAgICAgICBjZS5jaGlsZF9nZW5kZXIsCiAgICAgICAgICAgIGNlLmNoaWxkX2JpcnRocGxhY2UsCiAgICAgICAgICAgIGNlLmNoaWxkX2JpcnRoX2hvc3BpdGFsLAogICAgICAgICAgICBjZS5jaGlsZF9iaXJ0aF93ZWlnaHQsCiAgICAgICAgICAgIGNlLmd1YXJkaWFuX25hbWUsCiAgICAgICAgICAgIGNlLmd1YXJkaWFuX3JlbGF0aW9uLAogICAgICAgICAgICBjZS5ndWFyZGlhbl9hYWRoYXIsCiAgICAgICAgICAgIGNlLmd1YXJkaWFuX21vYmlsZSwKICAgICAgICAgICAgY2UuZ3VhcmRpYW5fZW1haWwsCiAgICAgICAgICAgIGNlLmFkZHJlc3NfbGluZTEsCiAgICAgICAgICAgIGNlLmFkZHJlc3NfbGluZTIsCiAgICAgICAgICAgIGNlLmNpdHksCiAgICAgICAgICAgIGNlLmRpc3RyaWN0LAogICAgICAgICAgICBjZS5zdGF0ZSwKICAgICAgICAgICAgY2UucGluY29kZSwKICAgICAgICAgICAgY2UubGFuZG1hcmssCiAgICAgICAgICAgIGNlLnN1Ym1pdHRlZF9hdCwKICAgICAgICAgICAgY2Uuc3RhdHVzLAogICAgICAgICAgICBjZS5pc191cmdlbnQsCiAgICAgICAgICAgIGNlLmZpbmdlcjEsCiAgICAgICAgICAgIGNlLmZpbmdlcjIsCiAgICAgICAgICAgIGNlLmZpbmdlcjMsCiAgICAgICAgICAgIGNlLmZpbmdlcjQsCiAgICAgICAgICAgIGNlLmZpbmdlcjUsCiAgICAgICAgICAgIGNlLmZpbmdlcjYsCiAgICAgICAgICAgIGNlLmZpbmdlcjcsCiAgICAgICAgICAgIGNlLmZpbmdlcjgsCiAgICAgICAgICAgIGNlLmZpbmdlcjksCiAgICAgICAgICAgIGNlLmZpbmdlcjEwLAogICAgICAgICAgICBjZS5taXNzaW5nX2ZpbmdlcnMsCiAgICAgICAgICAgIGNlLmFzc2lnbmVkX3RvLAogICAgICAgICAgICB1LnVzZXJuYW1lIGFzIHN1Ym1pdHRlZF9ieQogICAgICAgICAgRlJPTSBjaGlsZF9lbnJvbGwgY2UKICAgICAgICAgIExFRlQgSk9JTiB1c2VycyB1IE9OIGNlLnVzZXJfaWQgPSB1LmlkIjsKCi8vIEFkZCBXSEVSRSBjb25kaXRpb25zIGJhc2VkIG9uIGZpbHRlcnMKJGNvbmRpdGlvbnMgPSBbXTsKJHBhcmFtcyA9IFtdOwoKaWYgKCEkaXNvcGVyYXRvcikgewogICAgJGNvbmRpdGlvbnNbXSA9ICJjZS51c2VyX2lkID0gPyI7CiAgICAkcGFyYW1zW10gPSAkX1NFU1NJT05bJ3VzZXJfaWQnXTsKfQoKaWYgKCFlbXB0eSgkc3RhdHVzRmlsdGVyKSkgewogICAgJGNvbmRpdGlvbnNbXSA9ICJjZS5zdGF0dXMgPSA/IjsKICAgICRwYXJhbXNbXSA9ICRzdGF0dXNGaWx0ZXI7Cn0KCmlmICghZW1wdHkoJGRhdGVGcm9tKSkgewogICAgJGNvbmRpdGlvbnNbXSA9ICJjZS5zdWJtaXR0ZWRfYXQgPj0gPyI7CiAgICAkcGFyYW1zW10gPSAkZGF0ZUZyb20gLiAnIDAwOjAwOjAwJzsKfQoKaWYgKCFlbXB0eSgkZGF0ZVRvKSkgewogICAgJGNvbmRpdGlvbnNbXSA9ICJjZS5zdWJtaXR0ZWRfYXQgPD0gPyI7CiAgICAkcGFyYW1zW10gPSAkZGF0ZVRvIC4gJyAyMzo1OTo1OSc7Cn0KCmlmICghZW1wdHkoJGFwcElkU2VhcmNoKSkgewogICAgJGNvbmRpdGlvbnNbXSA9ICJjZS5hcHBsaWNhdGlvbl9pZCBMSUtFID8iOwogICAgJHBhcmFtc1tdID0gJyUnIC4gJGFwcElkU2VhcmNoIC4gJyUnOwp9CgppZiAoIWVtcHR5KCR1c2VySWRGaWx0ZXIpICYmICRpc29wZXJhdG9yKSB7CiAgICAkY29uZGl0aW9uc1tdID0gImNlLnVzZXJfaWQgPSA/IjsKICAgICRwYXJhbXNbXSA9ICR1c2VySWRGaWx0ZXI7Cn0KCmlmICgkdXJnZW50RmlsdGVyICE9PSBudWxsICYmICRpc29wZXJhdG9yKSB7CiAgICAkY29uZGl0aW9uc1tdID0gImNlLmlzX3VyZ2VudCA9ID8iOwogICAgJHBhcmFtc1tdID0gJHVyZ2VudEZpbHRlcjsKfQoKaWYgKCFlbXB0eSgkY29uZGl0aW9ucykpIHsKICAgICRxdWVyeSAuPSAiIFdIRVJFICIgLiBpbXBsb2RlKCIgQU5EICIsICRjb25kaXRpb25zKTsKfQoKJHF1ZXJ5IC49ICIgT1JERVIgQlkgY2UuaXNfdXJnZW50IEFTQywgY2Uuc3VibWl0dGVkX2F0IEFTQyI7CgovLyBQcmVwYXJlIGFuZCBleGVjdXRlIHRoZSBxdWVyeQokc3RtdCA9ICRwZG8tPnByZXBhcmUoJHF1ZXJ5KTsKJHN0bXQtPmV4ZWN1dGUoJHBhcmFtcyk7CiRjaGlsZEVucm9sbHMgPSAkc3RtdC0+ZmV0Y2hBbGwoUERPOjpGRVRDSF9BU1NPQyk7CgovLyBHZXQgZGlzdGluY3Qgc3RhdHVzIHZhbHVlcyBmb3IgZmlsdGVyIGRyb3Bkb3duCiRzdGF0dXNlcyA9ICRwZG8tPnF1ZXJ5KCJTRUxFQ1QgRElTVElOQ1Qgc3RhdHVzIEZST00gY2hpbGRfZW5yb2xsIiktPmZldGNoQWxsKFBETzo6RkVUQ0hfQ09MVU1OKTsKCi8vIEdldCBhbGwgdXNlcnMgZm9yIG9wZXJhdG9yIGZpbHRlcgokdXNlcnMgPSBbXTsKaWYgKCRpc29wZXJhdG9yKSB7CiAgICAkdXNlcnMgPSAkcGRvLT5xdWVyeSgiU0VMRUNUIGlkLCB1c2VybmFtZSBGUk9NIHVzZXJzIE9SREVSIEJZIHVzZXJuYW1lIiktPmZldGNoQWxsKFBETzo6RkVUQ0hfQVNTT0MpOwp9Cj8+Cgo8IWRvY3R5cGUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iIGNsYXNzPSJsYXlvdXQtbmF2YmFyLWZpeGVkIGxheW91dC1tZW51LWZpeGVkIGxheW91dC1jb21wYWN0IiBkaXI9Imx0ciIgZGF0YS1za2luPSJkZWZhdWx0IiBkYXRhLWFzc2V0cy1wYXRoPSIuLi8uLi9hc3NldHMvIiBkYXRhLXRlbXBsYXRlPSJ2ZXJ0aWNhbC1tZW51LXRlbXBsYXRlIiBkYXRhLWJzLXRoZW1lPSJsaWdodCI+Cjw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL2hlYWQucGhwJyk7ID8+Cgo8Ym9keT4KICAgIDwhLS0gTGF5b3V0IHdyYXBwZXIgLS0+CiAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtd3JhcHBlciBsYXlvdXQtY29udGVudC1uYXZiYXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImxheW91dC1jb250YWluZXIiPgogICAgICAgICAgICA8IS0tIE1lbnUgLS0+CiAgICAgICAgICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL3NpZGViYXIucGhwJyk7ID8+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LW1vYmlsZS10b2dnbGVyIGQteGwtbm9uZSByb3VuZGVkLTEiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9ImxheW91dC1tZW51LXRvZ2dsZSBtZW51LWxpbmsgdGV4dC1sYXJnZSB0ZXh0LWJnLXNlY29uZGFyeSBwLTIgcm91bmRlZC0xIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLW1lbnUgaWNvbi1iYXNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1jaGV2cm9uLXJpZ2h0IGljb24tYmFzZSI+PC9pPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSAvIE1lbnUgLS0+CgogICAgICAgICAgICA8IS0tIExheW91dCBjb250YWluZXIgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxheW91dC1wYWdlIj4KICAgICAgICAgICAgICAgIDwhLS0gTmF2YmFyIC0tPgogICAgICAgICAgICAgICAgPD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvbmF2YmFyLnBocCcpOyA/PgoKICAgICAgICAgICAgICAgIDwhLS0gLyBOYXZiYXIgLS0+CgogICAgICAgICAgICAgICAgPCEtLSBDb250ZW50IHdyYXBwZXIgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXdyYXBwZXIiPgogICAgICAgICAgICAgICAgICAgIDwhLS0gQ29udGVudCAtLT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIteHhsIGZsZXgtZ3Jvdy0xIGNvbnRhaW5lci1wLXkiPgogICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoaXNzZXQoJF9TRVNTSU9OWydmbGFzaF9tZXNzYWdlJ10pKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MgYWxlcnQtZGlzbWlzc2libGUgZmFkZSBzaG93IiByb2xlPSJhbGVydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD89ICRfU0VTU0lPTlsnZmxhc2hfbWVzc2FnZSddID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4tY2xvc2UiIGRhdGEtYnMtZGlzbWlzcz0iYWxlcnQiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgdW5zZXQoJF9TRVNTSU9OWydmbGFzaF9tZXNzYWdlJ10pOyA/PgogICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjYXJkLWhlYWRlciBwYi0wIHRleHQtbWQtc3RhcnQgdGV4dC1jZW50ZXIiPkNoaWxkIEVucm9sbCBSZWNvcmRzIDw/PSAkaXNvcGVyYXRvciA/ICcob3BlcmF0b3IgVmlldyknIDogJycgPz48L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBGaWx0ZXIgU2VjdGlvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSBib3JkZXItYm90dG9tIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBtZXRob2Q9IkdFVCIgY2xhc3M9InJvdyBnLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPkFwcGxpY2F0aW9uIElEPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJhcHBfaWQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSJTZWFyY2ggYnkgSUQiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkYXBwSWRTZWFyY2gpID8+Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPlN0YXR1czwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9InN0YXR1cyIgY2xhc3M9ImZvcm0tc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPkFsbCBTdGF0dXNlczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGZvcmVhY2ggKCRzdGF0dXNlcyBhcyAkc3RhdHVzKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iPD89ICRzdGF0dXMgPz4iIDw/PSAkc3RhdHVzID09PSAkc3RhdHVzRmlsdGVyID8gJ3NlbGVjdGVkJyA6ICcnID8+PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD89IHVjZmlyc3QoJHN0YXR1cykgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kZm9yZWFjaDsgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCI+RGF0ZSBGcm9tPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJkYXRlIiBuYW1lPSJkYXRlX2Zyb20iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZGF0ZUZyb20pID8+Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPkRhdGUgVG88L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImRhdGUiIG5hbWU9ImRhdGVfdG8iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZGF0ZVRvKSA/PiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRpc29wZXJhdG9yKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPlN1Ym1pdHRlZCBCeTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJ1c2VyX2lkIiBjbGFzcz0iZm9ybS1zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPkFsbCBVc2Vyczwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoICgkdXNlcnMgYXMgJHVzZXIpOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iPD89ICR1c2VyWydpZCddID8+IiA8Pz0gJHVzZXJbJ2lkJ10gPT0gJHVzZXJJZEZpbHRlciA/ICdzZWxlY3RlZCcgOiAnJyA/Pj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Pz0gaHRtbHNwZWNpYWxjaGFycygkdXNlclsndXNlcm5hbWUnXSkgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRmb3JlYWNoOyA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCI+VXJnZW50IE9ubHk8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0idXJnZW50IiBjbGFzcz0iZm9ybS1zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiPkFsbDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIxIiA8Pz0gJHVyZ2VudEZpbHRlciA9PT0gdHJ1ZSA/ICdzZWxlY3RlZCcgOiAnJyA/Pj5VcmdlbnQgT25seTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIwIiA8Pz0gJHVyZ2VudEZpbHRlciA9PT0gZmFsc2UgPyAnc2VsZWN0ZWQnIDogJycgPz4+Tm9uLVVyZ2VudDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTIgZC1mbGV4IGFsaWduLWl0ZW1zLWVuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1maWx0ZXIgbWUtMSI+PC9pPiBGaWx0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWRhdGF0YWJsZSBwLTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iZHQtcmVzcG9uc2l2ZSB0YWJsZSB0YWJsZS1ib3JkZXJlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGlzb3BlcmF0b3IpOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggd2lkdGg9IjMwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InNlbGVjdEFsbCIgY2xhc3M9ImZvcm0tY2hlY2staW5wdXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TTCBObzwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIElEPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q2hpbGQgTmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRpc29wZXJhdG9yKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN1Ym1pdHRlZCBCeTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN1Ym1pdHRlZCBBdDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlN0YXR1czwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFjdGlvbnM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZm9yZWFjaCAoJGNoaWxkRW5yb2xscyBhcyAkaW5kZXggPT4gJGVucm9sbCk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIDw/PSAkZW5yb2xsWydpc191cmdlbnQnXSA/ICdjbGFzcz0idGFibGUtd2FybmluZyInIDogJycgPz4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkaXNvcGVyYXRvcik6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuYW1lPSJzZWxlY3RlZF9pZHNbXSIgdmFsdWU9Ijw/PSAkZW5yb2xsWydpZCddID8+IiBjbGFzcz0iZm9ybS1jaGVjay1pbnB1dCByb3ctY2hlY2tib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gJGluZGV4ICsgMSA/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2FwcGxpY2F0aW9uX2lkJ10pID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGVucm9sbFsnaXNfdXJnZW50J10pOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSBiZy1kYW5nZXIgbXMtMSI+VVJHRU5UPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydjaGlsZF9uYW1lJ10pID8+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRpc29wZXJhdG9yKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydzdWJtaXR0ZWRfYnknXSA/PyAnTi9BJykgPz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSBkYXRlKCdkIE0gWSwgaDppIEEnLCBzdHJ0b3RpbWUoJGVucm9sbFsnc3VibWl0dGVkX2F0J10pKSA/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzQ2xhc3MgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RydG9sb3dlcigkZW5yb2xsWydzdGF0dXMnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwZW5kaW5nJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXR1c0NsYXNzID0gJ2JnLWxhYmVsLXdhcm5pbmcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdhcHByb3ZlZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0dXNDbGFzcyA9ICdiZy1sYWJlbC1zdWNjZXNzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVqZWN0ZWQnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzQ2xhc3MgPSAnYmctbGFiZWwtZGFuZ2VyJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJvY2Vzc2luZyc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0dXNDbGFzcyA9ICdiZy1sYWJlbC1pbmZvJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXR1c0NsYXNzID0gJ2JnLWxhYmVsLXNlY29uZGFyeSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJhZGdlIDw/PSAkc3RhdHVzQ2xhc3MgPz4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/PSB1Y2ZpcnN0KCRlbnJvbGxbJ3N0YXR1cyddKSA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggZ2FwLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tc20gYnRuLW91dGxpbmUtcHJpbWFyeSB2aWV3LWJ0biIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD0iPD89ICRlbnJvbGxbJ2lkJ10gPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYXBwLWlkPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydhcHBsaWNhdGlvbl9pZCddKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jaGlsZC1uYW1lPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydjaGlsZF9uYW1lJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNoaWxkLWRvYj0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnY2hpbGRfZG9iJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNoaWxkLWdlbmRlcj0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnY2hpbGRfZ2VuZGVyJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNoaWxkLWJpcnRocGxhY2U9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2NoaWxkX2JpcnRocGxhY2UnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY2hpbGQtYmlydGgtaG9zcGl0YWw9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2NoaWxkX2JpcnRoX2hvc3BpdGFsJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNoaWxkLWJpcnRoLXdlaWdodD0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnY2hpbGRfYmlydGhfd2VpZ2h0J10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd1YXJkaWFuLW5hbWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2d1YXJkaWFuX25hbWUnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3VhcmRpYW4tcmVsYXRpb249Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2d1YXJkaWFuX3JlbGF0aW9uJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd1YXJkaWFuLWFhZGhhcj0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnZ3VhcmRpYW5fYWFkaGFyJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd1YXJkaWFuLW1vYmlsZT0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnZ3VhcmRpYW5fbW9iaWxlJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd1YXJkaWFuLWVtYWlsPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydndWFyZGlhbl9lbWFpbCddKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hZGRyZXNzLWxpbmUxPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydhZGRyZXNzX2xpbmUxJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFkZHJlc3MtbGluZTI9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2FkZHJlc3NfbGluZTInXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY2l0eT0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnY2l0eSddKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1kaXN0cmljdD0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnZGlzdHJpY3QnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3RhdGU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ3N0YXRlJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBpbmNvZGU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ3BpbmNvZGUnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtbGFuZG1hcms9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2xhbmRtYXJrJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXN1Ym1pdHRlZD0iPD89IGRhdGUoJ2QgTSBZLCBoOmkgQScsIHN0cnRvdGltZSgkZW5yb2xsWydzdWJtaXR0ZWRfYXQnXSkpID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXN0YXR1cz0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnc3RhdHVzJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZpbmdlcjE9Ijw/PSAhZW1wdHkoJGVucm9sbFsnZmluZ2VyMSddKSA/ICd0cnVlJyA6ICdmYWxzZScgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyMj0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXIyJ10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1maW5nZXIzPSI8Pz0gIWVtcHR5KCRlbnJvbGxbJ2ZpbmdlcjMnXSkgPyAndHJ1ZScgOiAnZmFsc2UnID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZpbmdlcjQ9Ijw/PSAhZW1wdHkoJGVucm9sbFsnZmluZ2VyNCddKSA/ICd0cnVlJyA6ICdmYWxzZScgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyNT0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXI1J10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1maW5nZXI2PSI8Pz0gIWVtcHR5KCRlbnJvbGxbJ2ZpbmdlcjYnXSkgPyAndHJ1ZScgOiAnZmFsc2UnID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZpbmdlcjc9Ijw/PSAhZW1wdHkoJGVucm9sbFsnZmluZ2VyNyddKSA/ICd0cnVlJyA6ICdmYWxzZScgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyOD0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXI4J10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1maW5nZXI5PSI8Pz0gIWVtcHR5KCRlbnJvbGxbJ2ZpbmdlcjknXSkgPyAndHJ1ZScgOiAnZmFsc2UnID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWZpbmdlcjEwPSI8Pz0gIWVtcHR5KCRlbnJvbGxbJ2ZpbmdlcjEwJ10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1taXNzaW5nLWZpbmdlcnM9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ21pc3NpbmdfZmluZ2VycyddKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zdWJtaXR0ZWQtYnk9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ3N1Ym1pdHRlZF9ieSddID8/ICdOL0EnKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pcy11cmdlbnQ9Ijw/PSAkZW5yb2xsWydpc191cmdlbnQnXSA/ICd0cnVlJyA6ICdmYWxzZScgPz4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLWV5ZSBtZS0xIj48L2k+IFZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGlzb3BlcmF0b3IpOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoZW1wdHkoJGVucm9sbFsnYXNzaWduZWRfdG8nXSkpOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP2FjdGlvbj1hc3NpZ24maWQ9PD89ICRlbnJvbGxbJ2lkJ10gPz4iIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1vdXRsaW5lLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtaGFuZC1wb2ludGVyIG1lLTEiPjwvaT4gVGFrZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbHNlaWYgKCRlbnJvbGxbJ2Fzc2lnbmVkX3RvJ10gPT0gJF9TRVNTSU9OWyd1c2VyX2lkJ10pOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRlbnJvbGxbJ3N0YXR1cyddID09ICdwcm9jZXNzaW5nJyk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iZmluZ2Vycy5waHA/ZGF0YV9pZD08Pz0gJGVucm9sbFsnaWQnXSA/PiZvcGVyYXRvcl9pZD08Pz0gJF9TRVNTSU9OWyd1c2VyX2lkJ10gPz4mc2VydmljZT1jaGlsZF9lbnJvbGwiIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1vdXRsaW5lLXN1Y2Nlc3MgbWUtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZmluZ2VycHJpbnQgbWUtMSI+PC9pPiBGaW5nZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCIgc3R5bGU9ImRpc3BsYXk6aW5saW5lOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InVwZGF0ZV9zdGF0dXNfaWQiIHZhbHVlPSI8Pz0gJGVucm9sbFsnaWQnXSA/PiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ibmV3X3N0YXR1cyIgb25jaGFuZ2U9InRoaXMuZm9ybS5zdWJtaXQoKSIgY2xhc3M9ImZvcm0tc2VsZWN0IGZvcm0tc2VsZWN0LXNtIGQtaW5saW5lLWJsb2NrIHctYXV0byI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiIGRpc2FibGVkIHNlbGVjdGVkPkNoYW5nZSBTdGF0dXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImFwcHJvdmVkIj5BcHByb3ZlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJyZWplY3RlZCI+UmVqZWN0PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbHNlOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tb3V0bGluZS1zZWNvbmRhcnkiIGRpc2FibGVkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtbG9jayBtZS0xIj48L2k+IFRha2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kZm9yZWFjaDsgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwhLS0gLyBDb250ZW50IC0tPgoKICAgICAgICAgICAgICAgICAgICA8IS0tIEZvb3RlciAtLT4KICAgICAgICAgICAgICAgICAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9mb290ZXIucGhwJyk7ID8+CiAgICAgICAgICAgICAgICAgICAgPCEtLSAvIEZvb3RlciAtLT4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1iYWNrZHJvcCBmYWRlIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLSBDb250ZW50IHdyYXBwZXIgLS0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIC8gTGF5b3V0IHBhZ2UgLS0+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gT3ZlcmxheSAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtb3ZlcmxheSBsYXlvdXQtbWVudS10b2dnbGUiPjwvZGl2PgoKICAgICAgICA8IS0tIERyYWcgVGFyZ2V0IEFyZWEgVG8gU2xpZGVJbiBNZW51IE9uIFNtYWxsIFNjcmVlbnMgLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iZHJhZy10YXJnZXQiPjwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tIC8gTGF5b3V0IHdyYXBwZXIgLS0+CgogICAgPCEtLSBWaWV3IE1vZGFsIC0tPgogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9InZpZXdNb2RhbCIgdGFiaW5kZXg9Ii0xIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWxnIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIj5BcHBsaWNhdGlvbiBEZXRhaWxzPC9oNT4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0bi1jbG9zZSIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj5DaGlsZCBEZXRhaWxzPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+QXBwbGljYXRpb24gSUQ6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbEFwcElkIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5DaGlsZCBOYW1lOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxDaGlsZE5hbWUiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPkNoaWxkIERPQjo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsQ2hpbGRET0IiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPkNoaWxkIEdlbmRlcjo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsQ2hpbGRHZW5kZXIiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPkNoaWxkIEJpcnRocGxhY2U6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbENoaWxkQmlydGhwbGFjZSI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+Q2hpbGQgQmlydGggSG9zcGl0YWw6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbENoaWxkQmlydGhIb3NwaXRhbCI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+Q2hpbGQgQmlydGggV2VpZ2h0Ojwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxDaGlsZEJpcnRoV2VpZ2h0Ij48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5TdWJtaXR0ZWQgQnk6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbFN1Ym1pdHRlZEJ5Ij48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5TdWJtaXR0ZWQgQXQ6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbFN1Ym1pdHRlZCI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+U3RhdHVzOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxTdGF0dXMiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPlVyZ2VudDo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsSXNVcmdlbnQiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj5HdWFyZGlhbiBEZXRhaWxzPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+R3VhcmRpYW4gTmFtZTo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsR3VhcmRpYW5OYW1lIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5HdWFyZGlhbiBSZWxhdGlvbjo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsR3VhcmRpYW5SZWxhdGlvbiI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+R3VhcmRpYW4gQWFkaGFyOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxHdWFyZGlhbkFhZGhhciI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+R3VhcmRpYW4gTW9iaWxlOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxHdWFyZGlhbk1vYmlsZSI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+R3VhcmRpYW4gRW1haWw6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbEd1YXJkaWFuRW1haWwiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEZpbmdlcnByaW50IHZpc3VhbGl6YXRpb24gdXNpbmcgaW1hZ2VzIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDY+RmluZ2VycHJpbnQgQ29sbGVjdGlvbjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmaW5nZXJwcmludC1kaWFncmFtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1zdGFydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gTGVmdCBIYW5kIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoYW5kLXdyYXBwZXIgbWUtNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtY2VudGVyIj5MRUZUIEhBTkQ8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGFuZC1jb250YWluZXIgcG9zaXRpb24tcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi8uLi9hc3NldHMvaW1hZ2VzL2xlZnQtaGFuZC5wbmciIGFsdD0iTGVmdCBIYW5kIiBjbGFzcz0iaGFuZC1pbWFnZSIgaWQ9ImxlZnQtaGFuZC1pbWFnZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEluZGljYXRvcnMgZm9yIGZpbmdlcnMgMS01IChMZWZ0IEhhbmQpIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmaW5nZXItaW5kaWNhdG9yIiBpZD0iZmluZ2VyMS1pbmRpY2F0b3IiPj88L3NwYW4+IDwhLS0gVGh1bWIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZpbmdlci1pbmRpY2F0b3IiIGlkPSJmaW5nZXIyLWluZGljYXRvciI+Pzwvc3Bhbj4gPCEtLSBJbmRleCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmluZ2VyLWluZGljYXRvciIgaWQ9ImZpbmdlcjMtaW5kaWNhdG9yIj4/PC9zcGFuPiA8IS0tIE1pZGRsZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmluZ2VyLWluZGljYXRvciIgaWQ9ImZpbmdlcjQtaW5kaWNhdG9yIj4/PC9zcGFuPiA8IS0tIFJpbmcgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZpbmdlci1pbmRpY2F0b3IiIGlkPSJmaW5nZXI1LWluZGljYXRvciI+Pzwvc3Bhbj4gPCEtLSBMaXR0bGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFJpZ2h0IEhhbmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhhbmQtd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtY2VudGVyIj5SSUdIVCBIQU5EPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhhbmQtY29udGFpbmVyIHBvc2l0aW9uLXJlbGF0aXZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iLi4vLi4vYXNzZXRzL2ltYWdlcy9yaWdodC1oYW5kLnBuZyIgYWx0PSJSaWdodCBIYW5kIiBjbGFzcz0iaGFuZC1pbWFnZSIgaWQ9InJpZ2h0LWhhbmQtaW1hZ2UiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBJbmRpY2F0b3JzIGZvciBmaW5nZXJzIDYtMTAgKFJpZ2h0IEhhbmQpIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmaW5nZXItaW5kaWNhdG9yIiBpZD0iZmluZ2VyNi1pbmRpY2F0b3IiPj88L3NwYW4+IDwhLS0gVGh1bWIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZpbmdlci1pbmRpY2F0b3IiIGlkPSJmaW5nZXI3LWluZGljYXRvciI+Pzwvc3Bhbj4gPCEtLSBJbmRleCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmluZ2VyLWluZGljYXRvciIgaWQ9ImZpbmdlcjgtaW5kaWNhdG9yIj4/PC9zcGFuPiA8IS0tIE1pZGRsZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmluZ2VyLWluZGljYXRvciIgaWQ9ImZpbmdlcjktaW5kaWNhdG9yIj4/PC9zcGFuPiA8IS0tIFJpbmcgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZpbmdlci1pbmRpY2F0b3IiIGlkPSJmaW5nZXIxMC1pbmRpY2F0b3IiPj88L3NwYW4+IDwhLS0gTGl0dGxlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0zIHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHNwYW4gY2xhc3M9InRleHQtc3VjY2VzcyI+4pyTPC9zcGFuPiA9IENvbGxlY3RlZCB8IDxzcGFuIGNsYXNzPSJ0ZXh0LWRhbmdlciI+4pyXPC9zcGFuPiA9IE5vdCBDb2xsZWN0ZWQ8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+TWlzc2luZyBGaW5nZXJzOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxNaXNzaW5nRmluZ2VycyI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDY+QWRkcmVzcyBEZXRhaWxzPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+QWRkcmVzcyBMaW5lIDE6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbEFkZHJlc3NMaW5lMSI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+QWRkcmVzcyBMaW5lIDI6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbEFkZHJlc3NMaW5lMiI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+Q2l0eTo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsQ2l0eSI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+RGlzdHJpY3Q6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbERpc3RyaWN0Ij48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5TdGF0ZTo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsU3RhdGUiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPlBpbmNvZGU6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbFBpbmNvZGUiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPkxhbmRtYXJrOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxMYW5kbWFyayI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLWxhYmVsLXNlY29uZGFyeSIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCI+Q2xvc2U8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgaWQ9ImRvd25sb2FkUGRmIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1maWxlLWRvd25sb2FkIG1lLTEiPjwvaT4gRG93bmxvYWQgUERGCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9zY3JpcHQucGhwJyk7ID8+CiAgICA8c2NyaXB0PgogICAgICAgIGNvbnN0IGR0X3Jlc3BvbnNpdmVfdGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZHQtcmVzcG9uc2l2ZScpOwogICAgICAgIGlmIChkdF9yZXNwb25zaXZlX3RhYmxlKSB7CiAgICAgICAgICAgIGxldCBkdF9yZXNwb25zaXZlID0gbmV3IERhdGFUYWJsZShkdF9yZXNwb25zaXZlX3RhYmxlLCB7CiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLAogICAgICAgICAgICAgICAgbGF5b3V0OiB7CiAgICAgICAgICAgICAgICAgICAgdG9wU3RhcnQ6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93Q2xhc3M6ICdyb3cgbXktMCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFnZUxlbmd0aCcKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUxlbmd0aDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudTogWzEwLCAyNSwgNTAsIDEwMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnU2hvdyBfTUVOVV8gZW50cmllcycKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYm90dG9tU3RhcnQ6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93Q2xhc3M6ICdyb3cgbXgtMyBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBbJ2luZm8nXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYm90dG9tRW5kOiAncGFnaW5nJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGxhbmd1YWdlOiB7CiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogJzxpIGNsYXNzPSJpY29uLWJhc2UgdGkgdGFibGVyLWNoZXZyb24tcmlnaHQgc2NhbGVYLW4xLXJ0bCBpY29uLTE4cHgiPjwvaT4nLAogICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogJzxpIGNsYXNzPSJpY29uLWJhc2UgdGkgdGFibGVyLWNoZXZyb24tbGVmdCBzY2FsZVgtbjEtcnRsIGljb24tMThweCI+PC9pPicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0OiAnPGkgY2xhc3M9Imljb24tYmFzZSB0aSB0YWJsZXItY2hldnJvbnMtbGVmdCBzY2FsZVgtbjEtcnRsIGljb24tMThweCI+PC9pPicsCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3Q6ICc8aSBjbGFzcz0iaWNvbi1iYXNlIHRpIHRhYmxlci1jaGV2cm9ucy1yaWdodCBzY2FsZVgtbjEtcnRsIGljb24tMThweCI+PC9pPicKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHNlYXJjaDogJycsCiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdTZWFyY2ggcmVjb3Jkcy4uLicsCiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoTWVudTogJ1Nob3cgX01FTlVfIGVudHJpZXMnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY29sdW1uRGVmczogW3sKICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLAogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiAxCiAgICAgICAgICAgICAgICAgICAgfSwgLy8gQXBwbGljYXRpb24gSUQKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMiwKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogMgogICAgICAgICAgICAgICAgICAgIH0sIC8vIEZ1bGwgTmFtZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAzLAogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiAtMQogICAgICAgICAgICAgICAgICAgIH0gLy8gQWN0aW9ucwogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8vIEJ1bGsgc2VsZWN0IGFsbCBjaGVja2JveAogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWxlY3RBbGwnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc3QgY2hlY2tib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yb3ctY2hlY2tib3gnKTsKICAgICAgICAgICAgY2hlY2tib3hlcy5mb3JFYWNoKGNoZWNrYm94ID0+IHsKICAgICAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSB0aGlzLmNoZWNrZWQ7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICAvLyBWaWV3IGJ1dHRvbiBjbGljayBoYW5kbGVyCiAgICAgICAgZnVuY3Rpb24gdmlld0J1dHRvbkNsaWNrSGFuZGxlcihidXR0b24pIHsKICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgYm9vdHN0cmFwLk1vZGFsKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3TW9kYWwnKSk7CgogICAgICAgICAgICAvLyBTZXQgbW9kYWwgY29udGVudAogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxBcHBJZCcpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuYXBwSWQ7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbENoaWxkTmFtZScpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuY2hpbGROYW1lOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxDaGlsZERPQicpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuY2hpbGREb2I7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbENoaWxkR2VuZGVyJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5jaGlsZEdlbmRlcjsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsQ2hpbGRCaXJ0aHBsYWNlJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5jaGlsZEJpcnRocGxhY2U7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbENoaWxkQmlydGhIb3NwaXRhbCcpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuY2hpbGRCaXJ0aEhvc3BpdGFsOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxDaGlsZEJpcnRoV2VpZ2h0JykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5jaGlsZEJpcnRoV2VpZ2h0OwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxHdWFyZGlhbk5hbWUnKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0Lmd1YXJkaWFuTmFtZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsR3VhcmRpYW5SZWxhdGlvbicpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuZ3VhcmRpYW5SZWxhdGlvbjsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsR3VhcmRpYW5BYWRoYXInKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0Lmd1YXJkaWFuQWFkaGFyOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxHdWFyZGlhbk1vYmlsZScpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuZ3VhcmRpYW5Nb2JpbGU7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbEd1YXJkaWFuRW1haWwnKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0Lmd1YXJkaWFuRW1haWw7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbEFkZHJlc3NMaW5lMScpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuYWRkcmVzc0xpbmUxOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxBZGRyZXNzTGluZTInKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0LmFkZHJlc3NMaW5lMjsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsQ2l0eScpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuY2l0eTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsRGlzdHJpY3QnKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0LmRpc3RyaWN0OwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxTdGF0ZScpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuc3RhdGU7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbFBpbmNvZGUnKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0LnBpbmNvZGU7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbExhbmRtYXJrJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5sYW5kbWFyazsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsU3VibWl0dGVkJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5zdWJtaXR0ZWQ7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbFN1Ym1pdHRlZEJ5JykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5zdWJtaXR0ZWRCeTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsTWlzc2luZ0ZpbmdlcnMnKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0Lm1pc3NpbmdGaW5nZXJzIHx8ICdOb25lJzsKCiAgICAgICAgICAgIC8vIFNldCBzdGF0dXMgd2l0aCBiYWRnZQogICAgICAgICAgICBjb25zdCBzdGF0dXNTcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsU3RhdHVzJyk7CiAgICAgICAgICAgIHN0YXR1c1NwYW4uaW5uZXJIVE1MID0gJyc7CiAgICAgICAgICAgIGNvbnN0IGJhZGdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICBiYWRnZS5jbGFzc05hbWUgPSBgYmFkZ2UgJHtidXR0b24uZGF0YXNldC5zdGF0dXMgPT09ICdwZW5kaW5nJyA/ICdiZy1sYWJlbC13YXJuaW5nJyA6IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmRhdGFzZXQuc3RhdHVzID09PSAnYXBwcm92ZWQnID8gJ2JnLWxhYmVsLXN1Y2Nlc3MnIDogCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uZGF0YXNldC5zdGF0dXMgPT09ICdyZWplY3RlZCcgPyAnYmctbGFiZWwtZGFuZ2VyJyA6IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmRhdGFzZXQuc3RhdHVzID09PSAncHJvY2Vzc2luZycgPyAnYmctbGFiZWwtaW5mbycgOiAnYmctbGFiZWwtc2Vjb25kYXJ5J31gOwogICAgICAgICAgICBiYWRnZS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0LnN0YXR1cy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGJ1dHRvbi5kYXRhc2V0LnN0YXR1cy5zbGljZSgxKTsKICAgICAgICAgICAgc3RhdHVzU3Bhbi5hcHBlbmRDaGlsZChiYWRnZSk7CgogICAgICAgICAgICAvLyBTZXQgdXJnZW50IHN0YXR1cwogICAgICAgICAgICBjb25zdCB1cmdlbnRTcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsSXNVcmdlbnQnKTsKICAgICAgICAgICAgdXJnZW50U3Bhbi5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgY29uc3QgdXJnZW50QmFkZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgICAgIHVyZ2VudEJhZGdlLmNsYXNzTmFtZSA9IGBiYWRnZSAke2J1dHRvbi5kYXRhc2V0LmlzVXJnZW50ID09PSAndHJ1ZScgPyAnYmctbGFiZWwtZGFuZ2VyJyA6ICdiZy1sYWJlbC1zZWNvbmRhcnknfWA7CiAgICAgICAgICAgIHVyZ2VudEJhZGdlLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuaXNVcmdlbnQgPT09ICd0cnVlJyA/ICdZZXMnIDogJ05vJzsKICAgICAgICAgICAgdXJnZW50U3Bhbi5hcHBlbmRDaGlsZCh1cmdlbnRCYWRnZSk7CgogICAgICAgICAgICAvLyBVcGRhdGUgZmluZ2VycHJpbnQgc3RhdHVzIGZvciBhbGwgZmluZ2VycwogICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAxMDsgaSsrKSB7CiAgICAgICAgICAgICAgICBjb25zdCBmaW5nZXJJbmRpY2F0b3JFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBmaW5nZXIke2l9LWluZGljYXRvcmApOwoKICAgICAgICAgICAgICAgIGlmIChmaW5nZXJJbmRpY2F0b3JFbCkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzQ29sbGVjdGVkID0gYnV0dG9uLmRhdGFzZXRbYGZpbmdlciR7aX1gXSA9PT0gJ3RydWUnOwogICAgICAgICAgICAgICAgICAgIGZpbmdlckluZGljYXRvckVsLnRleHRDb250ZW50ID0gaXNDb2xsZWN0ZWQgPyAn4pyTJyA6ICfinJcnOwogICAgICAgICAgICAgICAgICAgIGZpbmdlckluZGljYXRvckVsLmNsYXNzTGlzdC5yZW1vdmUoJ3RleHQtc3VjY2VzcycsICd0ZXh0LWRhbmdlcicpOwogICAgICAgICAgICAgICAgICAgIGZpbmdlckluZGljYXRvckVsLmNsYXNzTGlzdC5hZGQoaXNDb2xsZWN0ZWQgPyAndGV4dC1zdWNjZXNzJyA6ICd0ZXh0LWRhbmdlcicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBTZXQgUERGIGRvd25sb2FkIGxpbmsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rvd25sb2FkUGRmJykub25jbGljayA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgZ2VuZXJhdGVfcGRmLnBocD9hcHBfaWQ9JHtidXR0b24uZGF0YXNldC5hcHBJZH1gOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgbW9kYWwuc2hvdygpOwogICAgICAgIH0KCiAgICAgICAgLy8gSW5pdGlhbGl6ZSB2aWV3IGJ1dHRvbnMgYWZ0ZXIgcGFnZSBsb2FkCiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBjb25zdCB2aWV3QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy52aWV3LWJ0bicpOwogICAgICAgICAgICB2aWV3QnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7CiAgICAgICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2aWV3QnV0dG9uQ2xpY2tIYW5kbGVyKHRoaXMpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgPC9zY3JpcHQ+CiAgICA8c3R5bGU+CiAgICAgICAgLyogRmluZ2VycHJpbnQgVmlzdWFsaXphdGlvbiBTdHlsZXMgKi8KICAgICAgICAuZmluZ2VycHJpbnQtZGlhZ3JhbSB7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDFyZW07CiAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyYzNlNTA7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgICB9CgogICAgICAgIC5oYW5kLXdyYXBwZXIgewogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgIGZsZXg6IDE7CiAgICAgICAgfQoKICAgICAgICAuaGFuZC1jb250YWluZXIgewogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvOwogICAgICAgICAgICB3aWR0aDogMTUwcHg7CiAgICAgICAgICAgIGhlaWdodDogMTY1cHg7CiAgICAgICAgfQoKICAgICAgICAuaGFuZC1pbWFnZSB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvbnRhaW47CiAgICAgICAgfQoKICAgICAgICAuZmluZ2VyLWluZGljYXRvciB7CiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICAgICAgd2lkdGg6IDI4cHg7CiAgICAgICAgICAgIGhlaWdodDogMjhweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI4cHg7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjNjY2OwogICAgICAgICAgICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjIpOwogICAgICAgIH0KCiAgICAgICAgLyogTGVmdCBIYW5kIEZpbmdlciBQb3NpdGlvbnMgKi8KICAgICAgICAjZmluZ2VyMS1pbmRpY2F0b3IgewogICAgICAgICAgICBsZWZ0OiAxNXB4OwogICAgICAgICAgICB0b3A6IDcwcHg7CiAgICAgICAgfQoKICAgICAgICAvKiBMZWZ0IFRodW1iICovCiAgICAgICAgI2ZpbmdlcjItaW5kaWNhdG9yIHsKICAgICAgICAgICAgbGVmdDogNDBweDsKICAgICAgICAgICAgdG9wOiAxMHB4OwogICAgICAgIH0KCiAgICAgICAgLyogTGVmdCBJbmRleCAqLwogICAgICAgICNmaW5nZXIzLWluZGljYXRvciB7CiAgICAgICAgICAgIGxlZnQ6IDcwcHg7CiAgICAgICAgICAgIHRvcDogMXB4OwogICAgICAgIH0KCiAgICAgICAgLyogTGVmdCBNaWRkbGUgKi8KICAgICAgICAjZmluZ2VyNC1pbmRpY2F0b3IgewogICAgICAgICAgICBsZWZ0OiA5N3B4OwogICAgICAgICAgICB0b3A6IDVweDsKICAgICAgICB9CgogICAgICAgIC8qIExlZnQgUmluZyAqLwogICAgICAgICNmaW5nZXI1LWluZGljYXRvciB7CiAgICAgICAgICAgIGxlZnQ6IDEyMHB4OwogICAgICAgICAgICB0b3A6IDMwcHg7CiAgICAgICAgfQoKICAgICAgICAvKiBSaWdodCBIYW5kIEZpbmdlciBQb3NpdGlvbnMgKi8KICAgICAgICAjZmluZ2VyNi1pbmRpY2F0b3IgewogICAgICAgICAgICBsZWZ0OiAxMTVweDsKICAgICAgICAgICAgdG9wOiA3MHB4OwogICAgICAgIH0KCiAgICAgICAgLyogUmlnaHQgVGh1bWIgKi8KICAgICAgICAjZmluZ2VyNy1pbmRpY2F0b3IgewogICAgICAgICAgICBsZWZ0OiA4NXB4OwogICAgICAgICAgICB0b3A6IDEwcHg7CiAgICAgICAgfQoKICAgICAgICAvKiBSaWdodCBJbmRleCAqLwogICAgICAgICNmaW5nZXI4LWluZGljYXRvciB7CiAgICAgICAgICAgIGxlZnQ6IDU1cHg7CiAgICAgICAgICAgIHRvcDogMXB4OwogICAgICAgIH0KCiAgICAgICAgLyogUmlnaHQgTWlkZGxlICovCiAgICAgICAgI2ZpbmdlcjktaW5kaWNhdG9yIHsKICAgICAgICAgICAgbGVmdDogMjdweDsKICAgICAgICAgICAgdG9wOiA1cHg7CiAgICAgICAgfQoKICAgICAgICAvKiBSaWdodCBSaW5nICovCiAgICAgICAgI2ZpbmdlcjEwLWluZGljYXRvciB7CiAgICAgICAgICAgIGxlZnQ6IDVweDsKICAgICAgICAgICAgdG9wOiAzMHB4OwogICAgICAgIH0KCiAgICAgICAgLmZpbmdlci1pbmRpY2F0b3IudGV4dC1zdWNjZXNzIHsKICAgICAgICAgICAgY29sb3I6ICMyOGE3NDU7CiAgICAgICAgfQoKICAgICAgICAuZmluZ2VyLWluZGljYXRvci50ZXh0LWRhbmdlciB7CiAgICAgICAgICAgIGNvbG9yOiAjZGMzNTQ1OwogICAgICAgIH0KCiAgICAgICAgLmZpbmdlci1pbmRpY2F0b3I6aG92ZXIgewogICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICAgIG9wYWNpdHk6IDAuODsKICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAycHg7CiAgICAgICAgfQoKICAgICAgICAuZmluZ2VycHJpbnQtZGlhZ3JhbSBoNiB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07CiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7CiAgICAgICAgfQoKICAgICAgICAuZmluZ2VycHJpbnQtZGlhZ3JhbSBwIHsKICAgICAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgICAgIG1hcmdpbjogMC41cmVtIDA7CiAgICAgICAgfQoKICAgICAgICAvKiBVcmdlbnQgcm93IHN0eWxpbmcgKi8KICAgICAgICAudGFibGUtd2FybmluZyB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAxOTMsIDcsIDAuMTUpICFpbXBvcnRhbnQ7CiAgICAgICAgfQoKICAgICAgICAvKiBBY3Rpb24gYnV0dG9ucyBzdHlsaW5nICovCiAgICAgICAgLmJ0bi1hY3Rpb24tZ3JvdXAgewogICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICBnYXA6IDAuNXJlbTsKICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwOwogICAgICAgIH0KCiAgICAgICAgLmJ0bi1hY3Rpb24tZ3JvdXAgLmJ0biB7CiAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgICAgICAgfQoKICAgICAgICAvKiBTdGF0dXMgZHJvcGRvd24gc3R5bGluZyAqLwogICAgICAgIC5mb3JtLXNlbGVjdC1zbSB7CiAgICAgICAgICAgIHBhZGRpbmc6IDAuMjVyZW0gMS43NXJlbSAwLjI1cmVtIDAuNXJlbTsKICAgICAgICAgICAgZm9udC1zaXplOiAwLjc1cmVtOwogICAgICAgICAgICBoZWlnaHQ6IGNhbGMoMS41ZW0gKyAwLjVyZW0gKyAycHgpOwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvYm9keT4KCjwvaHRtbD4=');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>