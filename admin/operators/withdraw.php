<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once(__DIR__ . '/../../config/database.php');

// Calculate pending withdrawals amount
$stmt = $pdo->prepare("SELECT SUM(amount) as pending_amount FROM withdrawal_requests WHERE user_id = ? AND status = 'pending'");
$stmt->execute([$user['id']]);
$pendingWithdrawals = $stmt->fetch(PDO::FETCH_ASSOC);
$pendingAmount = $pendingWithdrawals['pending_amount'] ?? 0;

// Calculate available balance (total bonus minus pending withdrawals)
$availableBalance = $user['bonus_wallet'] - $pendingAmount;
if ($availableBalance < 0) $availableBalance = 0; // Ensure it doesn't go negative

// Initialize variables
$error = null;
$success = null;
$formData = [];

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['submit_withdrawal'])) {
    try {
        // Collect form data
        $formData = [
            'phone_number' => $_POST['phone_number'] ?? '',
            'amount' => $_POST['amount'] ?? '',
            'payment_method' => $_POST['payment_method'] ?? '',
            'upi_id' => $_POST['upi_id'] ?? '',
            'account_holder_name' => $_POST['account_holder_name'] ?? '',
            'bank_account_number' => $_POST['bank_account_number'] ?? '',
            'bank_ifsc' => $_POST['bank_ifsc'] ?? '',
            'bank_name' => $_POST['bank_name'] ?? ''
        ];

        // Validate required fields
        $required = ['phone_number', 'amount', 'payment_method'];
        foreach ($required as $field) {
            if (empty($_POST[$field])) {
                throw new Exception("Please fill in all required fields");
            }
        }

        $amount = (float) $_POST['amount'];
        $paymentMethod = $_POST['payment_method'];
        $phoneNumber = preg_replace('/[^0-9]/', '', $_POST['phone_number']);

        // Validate amount
        if ($amount <= 0) {
            throw new Exception("Amount must be greater than 0");
        }

        // Check if user has sufficient available balance
        if ($amount > $availableBalance) {
            throw new Exception("You don't have enough available bonus balance for this withdrawal");
        }

        // Validate payment method specific fields
        $paymentDetails = [];
        switch ($paymentMethod) {
            case 'upi':
                if (empty($_POST['upi_id'])) {
                    throw new Exception("Please enter your UPI ID");
                }
                if (!preg_match('/^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+$/', $_POST['upi_id'])) {
                    throw new Exception("Please enter a valid UPI ID (e.g. name@upi)");
                }
                $paymentDetails['upi_id'] = $_POST['upi_id'];
                break;
                
            case 'bank_transfer':
                $requiredBankFields = [
                    'account_holder_name' => "Account holder name",
                    'bank_account_number' => "Bank account number", 
                    'bank_ifsc' => "IFSC code",
                    'bank_name' => "Bank name"
                ];
                
                foreach ($requiredBankFields as $field => $fieldName) {
                    if (empty($_POST[$field])) {
                        throw new Exception("Please enter your $fieldName");
                    }
                }
                
                if (!preg_match('/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/', $_POST['bank_ifsc'])) {
                    throw new Exception("Please enter a valid IFSC code");
                }
                
                $paymentDetails = [
                    'bank_account_number' => $_POST['bank_account_number'],
                    'bank_ifsc' => $_POST['bank_ifsc'],
                    'bank_name' => $_POST['bank_name'],
                    'account_holder_name' => $_POST['account_holder_name']
                ];
                break;
                
            case 'qr_code':
                if (empty($_FILES['qr_code_image']['name'])) {
                    throw new Exception("Please upload your QR code image");
                }
                
                // Validate file
                $allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
                $maxSize = 2 * 1024 * 1024; // 2MB
                
                if (!in_array($_FILES['qr_code_image']['type'], $allowedTypes)) {
                    throw new Exception("Only JPG, JPEG, and PNG files are allowed");
                }
                
                if ($_FILES['qr_code_image']['size'] > $maxSize) {
                    throw new Exception("File size must be less than 2MB");
                }
                
                // Handle file upload
                $uploadDir = __DIR__ . '/../../uploads/qr_codes/';
                if (!is_dir($uploadDir)) {
                    mkdir($uploadDir, 0755, true);
                }
                
                $fileName = 'qr_' . time() . '_' . bin2hex(random_bytes(4)) . '.' . pathinfo($_FILES['qr_code_image']['name'], PATHINFO_EXTENSION);
                $targetPath = $uploadDir . $fileName;
                
                if (!move_uploaded_file($_FILES['qr_code_image']['tmp_name'], $targetPath)) {
                    throw new Exception("Failed to upload QR code. Please try again.");
                }
                
                $paymentDetails['qr_code_image'] = 'uploads/qr_codes/' . $fileName;
                break;
        }

        // Start transaction
        $pdo->beginTransaction();

        try {
            // Insert withdrawal request
            $stmt = $pdo->prepare("
                INSERT INTO withdrawal_requests (
                    user_id, username, amount, payment_method, 
                    upi_id, bank_account_number, bank_ifsc, bank_name, 
                    account_holder_name, qr_code_image, phone_number
                ) VALUES (
                    :user_id, :username, :amount, :payment_method,
                    :upi_id, :bank_account_number, :bank_ifsc, :bank_name,
                    :account_holder_name, :qr_code_image, :phone_number
                )
            ");
            
            $params = [
                ':user_id' => $user['id'],
                ':username' => $user['username'],
                ':amount' => $amount,
                ':payment_method' => $paymentMethod,
                ':phone_number' => $phoneNumber,
                ':upi_id' => $paymentDetails['upi_id'] ?? null,
                ':bank_account_number' => $paymentDetails['bank_account_number'] ?? null,
                ':bank_ifsc' => $paymentDetails['bank_ifsc'] ?? null,
                ':bank_name' => $paymentDetails['bank_name'] ?? null,
                ':account_holder_name' => $paymentDetails['account_holder_name'] ?? null,
                ':qr_code_image' => $paymentDetails['qr_code_image'] ?? null
            ];
            
            if (!$stmt->execute($params)) {
                throw new Exception("Failed to process your request. Please try again.");
            }
            
            $pdo->commit();
            
            // Set success message and clear form
            $_SESSION['withdrawal_success'] = true;
            $formData = []; // Clear form data
            
            header("Location: ".$_SERVER['PHP_SELF']);
            exit();
            
        } catch (Exception $e) {
            $pdo->rollBack();
            throw $e;
        }
        
    } catch (Exception $e) {
        $error = $e->getMessage();
        error_log("Withdrawal Error: " . $e->getMessage());
        $_SESSION['withdrawal_error'] = $error;
        $_SESSION['form_data'] = $formData;
    }
}

// Check for messages from redirect
if (isset($_SESSION['withdrawal_success'])) {
    $success = "Withdrawal request submitted successfully! Your request will be processed within 24 hours.";
    unset($_SESSION['withdrawal_success']);
}

if (isset($_SESSION['withdrawal_error'])) {
    $error = $_SESSION['withdrawal_error'];
    unset($_SESSION['withdrawal_error']);
    
    if (isset($_SESSION['form_data'])) {
        $formData = $_SESSION['form_data'];
        unset($_SESSION['form_data']);
    }
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
<head>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Withdraw Funds</title>
  <?php include('includes/head.php'); ?>
  <style>
    /* Payment Method Tabs */
    .nav-pills .nav-link {
      border-radius: 6px;
      padding: 0.5rem 1rem;
      margin-right: 8px;
      color: #6f6b7d;
      font-weight: 500;
      border: 1px solid transparent;
    }
    
    .nav-pills .nav-link.active {
      background-color: rgba(115, 103, 240, 0.1);
      color: #7367F0;
      border-color: #7367F0;
    }
    
    .nav-pills .nav-link:not(.active):hover {
      color: #7367F0;
    }
    
    /* Form Input Styling */
    .form-control:focus {
      border-color: #7367F0;
      box-shadow: 0 0 0 0.2rem rgba(115, 103, 240, 0.25);
    }
    
    /* QR Upload Styling */
    .qr-upload-container {
      border: 2px dashed #d9dee3;
      border-radius: 6px;
      padding: 2rem;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s;
    }
    
    .qr-upload-container:hover {
      border-color: #7367F0;
      background-color: rgba(115, 103, 240, 0.05);
    }
    
    .qr-upload-container i {
      font-size: 2rem;
      color: #7367F0;
      margin-bottom: 1rem;
    }
    
    .qr-preview {
      max-width: 200px;
      max-height: 200px;
      margin: 1rem auto;
      display: none;
      border-radius: 6px;
    }
    
    /* Submit Button */
    .btn-withdrawal {
      background-color: #7367F0;
      color: white;
      padding: 0.75rem;
      font-weight: 500;
      border-radius: 6px;
      width: 100%;
      margin-top: 1rem;
      transition: all 0.3s;
    }
    
    .btn-withdrawal:hover {
      background-color: #5d5ac4;
      color: white;
      transform: translateY(-2px);
    }
    
    /* Error Styling */
    .is-invalid {
      border-color: #ea5455 !important;
    }
    
    .invalid-feedback {
      color: #ea5455;
      font-size: 0.85rem;
      margin-top: 0.25rem;
    }
    
    /* Responsive Adjustments */
    @media (max-width: 768px) {
      .nav-pills {
        flex-direction: column;
      }
      
      .nav-pills .nav-link {
        margin-right: 0;
        margin-bottom: 8px;
      }
    }
    
    /* Recent Withdrawals Table */
    .recent-withdrawals .table {
      margin-bottom: 0;
    }
    
    .recent-withdrawals .badge {
      font-weight: 500;
      padding: 0.35rem 0.5rem;
    }
    
    .badge-pending {
      background-color: rgba(255, 159, 67, 0.12);
      color: #ff9f43;
    }
    
    .badge-approved {
      background-color: rgba(40, 199, 111, 0.12);
      color: #28c76f;
    }
    
    .badge-rejected {
      background-color: rgba(234, 84, 85, 0.12);
      color: #ea5455;
    }
    
    .badge-processed {
      background-color: rgba(0, 207, 232, 0.12);
      color: #00cfe8;
    }
    
    /* Balance Warning */
    .balance-warning {
      color: #ff9f43;
      font-size: 0.85rem;
    }
  </style>
</head>

<body>
  <!-- Layout wrapper -->
  <div class="layout-wrapper layout-content-navbar">
    <div class="layout-container">
      <!-- Menu -->
      <?php include('includes/sidebar.php'); ?>

      <div class="menu-mobile-toggler d-xl-none rounded-1">
        <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
          <i class="ti tabler-menu icon-base"></i>
          <i class="ti tabler-chevron-right icon-base"></i>
        </a>
      </div>

      <!-- Layout container -->
      <div class="layout-page">
        <!-- Navbar -->
        <?php include('includes/navbar.php'); ?>

        <!-- Content wrapper -->
        <div class="content-wrapper">
          <!-- Content -->
          <div class="container-xxl flex-grow-1 container-p-y">
            <div class="row">
              <div class="col-md-12">
                <!-- Wallet Balance Cards -->
                <div class="row mb-4">
                  <div class="col-md-4 mb-3">
                    <div class="card bg-primary text-white h-100">
                      <div class="card-body d-flex flex-column">
                        <h5 class="card-title">My Balance</h5>
                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($user['bonus_wallet'], 2) ?></h3>
                        
                      </div>
                    </div>
                  </div>
                  <div class="col-md-4 mb-3">
                    <div class="card bg-success text-white h-100">
                      <div class="card-body d-flex flex-column">
                        <h5 class="card-title">For Operators Only</h5>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-4 mb-3">
                    <div class="card bg-info text-white h-100">
                      <div class="card-body d-flex flex-column">
                        <h5 class="card-title">Available Balance</h5>
                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($availableBalance, 2) ?></h3>
                        
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Withdrawal Form -->
                <div class="card mb-4">
                  <h5 class="card-header bg-transparent">Withdraw Funds</h5>
                  <div class="card-body">
                    <?php if ($error): ?>
                      <div class="alert alert-danger mb-4">
                        <i class="fas fa-alert-circle me-2"></i> <?= htmlspecialchars($error) ?>
                      </div>
                    <?php endif; ?>
                    
                    <?php if ($success): ?>
                      <div class="alert alert-success mb-4">
                        <i class="fas fa-check me-2"></i> <?= htmlspecialchars($success) ?>
                      </div>
                    <?php endif; ?>
                    
                    <form id="withdrawalForm" method="POST" enctype="multipart/form-data" novalidate>
                      <input type="hidden" name="submit_withdrawal" value="1">

                      <!-- Phone Number -->
                      <div class="mb-3">
                        <label for="phone_number" class="form-label">Phone Number</label>
                        <input
                          type="tel"
                          class="form-control <?= isset($error) && empty($formData['phone_number']) ? 'is-invalid' : '' ?>"
                          id="phone_number"
                          name="phone_number"
                          placeholder="Enter your phone number"
                          value="<?= htmlspecialchars($formData['phone_number'] ?? $user['phone'] ?? '') ?>"
                          required />
                        <div class="invalid-feedback">Please enter a valid phone number</div>
                      </div>

                      <!-- Amount Input -->
                      <div class="mb-3">
                        <label for="amount" class="form-label">Amount to Withdraw</label>
                        <div class="input-group">
                          <span class="input-group-text"><?= htmlspecialchars($user['currency']) ?></span>
                          <input
                            type="number"
                            class="form-control <?= isset($error) && empty($formData['amount']) ? 'is-invalid' : '' ?>"
                            id="amount"
                            name="amount"
                            placeholder="Enter amount"
                            min="0.01"
                            step="0.01"
                            max="<?= $availableBalance ?>"
                            value="<?= htmlspecialchars($formData['amount'] ?? '') ?>"
                            required />
                        </div>
                        <div class="form-text">
                          Available to withdraw: <?= htmlspecialchars($user['currency']) ?> <?= number_format($availableBalance, 2) ?>
                          <?php if ($pendingAmount > 0): ?>
                            <span class="balance-warning">(<?= htmlspecialchars($user['currency']) ?> <?= number_format($pendingAmount, 2) ?> pending in other requests)</span>
                          <?php endif; ?>
                        </div>
                        <div class="invalid-feedback">Please enter a valid amount (max <?= htmlspecialchars($user['currency']) ?> <?= number_format($availableBalance, 2) ?>)</div>
                      </div>

                      <!-- Payment Method Selection -->
                      <div class="mb-3">
                        <label class="form-label">Payment Method</label>
                        
                        <ul class="nav nav-pills mb-3" id="payment-method-tabs" role="tablist">
                          <li class="nav-item" role="presentation">
                            <button class="nav-link <?= empty($formData['payment_method']) || $formData['payment_method'] === 'upi' ? 'active' : '' ?>" 
                                    id="upi-tab" 
                                    data-bs-toggle="pill" 
                                    data-bs-target="#upi-method" 
                                    type="button" 
                                    role="tab">UPI</button>
                          </li>
                          <li class="nav-item" role="presentation">
                            <button class="nav-link <?= isset($formData['payment_method']) && $formData['payment_method'] === 'bank_transfer' ? 'active' : '' ?>" 
                                    id="bank-tab" 
                                    data-bs-toggle="pill" 
                                    data-bs-target="#bank-method" 
                                    type="button" 
                                    role="tab">Bank Transfer</button>
                          </li>
                          <li class="nav-item" role="presentation">
                            <button class="nav-link <?= isset($formData['payment_method']) && $formData['payment_method'] === 'qr_code' ? 'active' : '' ?>" 
                                    id="qr-tab" 
                                    data-bs-toggle="pill" 
                                    data-bs-target="#qr-method" 
                                    type="button" 
                                    role="tab">QR Code</button>
                          </li>
                        </ul>
                        
                        <input type="hidden" name="payment_method" id="payment_method" value="<?= htmlspecialchars($formData['payment_method'] ?? 'upi') ?>">
                        
                        <!-- Tab Content -->
                        <div class="tab-content" id="payment-method-content">
                          <!-- UPI Method -->
                          <div class="tab-pane fade <?= empty($formData['payment_method']) || $formData['payment_method'] === 'upi' ? 'show active' : '' ?>" id="upi-method" role="tabpanel">
                            <div class="mb-3">
                              <label for="upi_id" class="form-label">UPI ID</label>
                              <input
                                type="text"
                                class="form-control <?= isset($error) && $formData['payment_method'] === 'upi' && empty($formData['upi_id']) ? 'is-invalid' : '' ?>"
                                id="upi_id"
                                name="upi_id"
                                placeholder="name@upi"
                                value="<?= htmlspecialchars($formData['upi_id'] ?? '') ?>"
                                required />
                              <div class="invalid-feedback">Please enter a valid UPI ID</div>
                            </div>
                          </div>
                          
                          <!-- Bank Transfer Method -->
                          <div class="tab-pane fade <?= isset($formData['payment_method']) && $formData['payment_method'] === 'bank_transfer' ? 'show active' : '' ?>" id="bank-method" role="tabpanel">
                            <div class="mb-3">
                              <label for="account_holder_name" class="form-label">Account Holder Name</label>
                              <input
                                type="text"
                                class="form-control <?= isset($error) && $formData['payment_method'] === 'bank_transfer' && empty($formData['account_holder_name']) ? 'is-invalid' : '' ?>"
                                id="account_holder_name"
                                name="account_holder_name"
                                placeholder="As per bank records"
                                value="<?= htmlspecialchars($formData['account_holder_name'] ?? '') ?>"
                                required />
                              <div class="invalid-feedback">Please enter account holder name</div>
                            </div>
                            
                            <div class="mb-3">
                              <label for="bank_account_number" class="form-label">Account Number</label>
                              <input
                                type="text"
                                class="form-control <?= isset($error) && $formData['payment_method'] === 'bank_transfer' && empty($formData['bank_account_number']) ? 'is-invalid' : '' ?>"
                                id="bank_account_number"
                                name="bank_account_number"
                                placeholder="Enter bank account number"
                                value="<?= htmlspecialchars($formData['bank_account_number'] ?? '') ?>"
                                required />
                              <div class="invalid-feedback">Please enter bank account number</div>
                            </div>
                            
                            <div class="mb-3">
                              <label for="bank_ifsc" class="form-label">IFSC Code</label>
                              <input
                                type="text"
                                class="form-control <?= isset($error) && $formData['payment_method'] === 'bank_transfer' && empty($formData['bank_ifsc']) ? 'is-invalid' : '' ?>"
                                id="bank_ifsc"
                                name="bank_ifsc"
                                placeholder="Enter bank IFSC code"
                                value="<?= htmlspecialchars($formData['bank_ifsc'] ?? '') ?>"
                                required />
                              <div class="invalid-feedback">Please enter a valid IFSC code</div>
                            </div>
                            
                            <div class="mb-3">
                              <label for="bank_name" class="form-label">Bank Name</label>
                              <input
                                type="text"
                                class="form-control <?= isset($error) && $formData['payment_method'] === 'bank_transfer' && empty($formData['bank_name']) ? 'is-invalid' : '' ?>"
                                id="bank_name"
                                name="bank_name"
                                placeholder="Enter bank name"
                                value="<?= htmlspecialchars($formData['bank_name'] ?? '') ?>"
                                required />
                              <div class="invalid-feedback">Please enter bank name</div>
                            </div>
                          </div>
                          
                          <!-- QR Code Method -->
                          <div class="tab-pane fade <?= isset($formData['payment_method']) && $formData['payment_method'] === 'qr_code' ? 'show active' : '' ?>" id="qr-method" role="tabpanel">
                            <div class="mb-3">
                              <label class="form-label">Upload QR Code</label>
                              <div class="qr-upload-container" id="qrUploadContainer">
                                <i class="fas fa-qrcode"></i>
                                <p>Click to upload your payment QR code</p>
                                <p class="text-muted small">Supports JPG, PNG (Max 2MB)</p>
                                <img id="qrPreview" class="qr-preview img-thumbnail" alt="QR Preview" 
                                     <?= isset($formData['qr_code_image']) ? 'src="'.htmlspecialchars($formData['qr_code_image']).'" style="display:block;"' : '' ?>>
                              </div>
                              <input
                                type="file"
                                id="qr_code_image"
                                name="qr_code_image"
                                accept="image/*"
                                style="display: none;"
                                <?= isset($formData['payment_method']) && $formData['payment_method'] === 'qr_code' ? 'required' : '' ?> />
                              <div class="invalid-feedback">Please upload a QR code image</div>
                            </div>
                          </div>
                        </div>
                      </div>

                      <!-- Submit Button -->
                      <button type="submit" class="btn btn-withdrawal">
                        Request Withdrawal
                      </button>
                    </form>
                  </div>
                </div>
                
                <!-- Recent Withdrawals -->
                <div class="card recent-withdrawals">
                  <h5 class="card-header bg-transparent">Recent Withdrawals</h5>
                  <div class="card-body">
                    <div class="table-responsive">
                      <table class="table table-hover">
                        <thead>
                          <tr>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Method</th>
                            <th>Status</th>
                          </tr>
                        </thead>
                        <tbody>
                          <?php
                          $stmt = $pdo->prepare("
                            SELECT amount, payment_method, status, created_at 
                            FROM withdrawal_requests 
                            WHERE user_id = ? 
                            ORDER BY created_at DESC 
                            LIMIT 5
                          ");
                          $stmt->execute([$user['id']]);
                          $withdrawals = $stmt->fetchAll(PDO::FETCH_ASSOC);
                          
                          if (empty($withdrawals)): ?>
                            <tr>
                              <td colspan="4" class="text-center py-4 text-muted">No withdrawal history found</td>
                            </tr>
                          <?php else: 
                            foreach ($withdrawals as $withdrawal): 
                              $statusClass = [
                                'pending' => 'badge-pending',
                                'approved' => 'badge-approved',
                                'rejected' => 'badge-rejected',
                                'processed' => 'badge-processed'
                              ][$withdrawal['status']] ?? 'badge-secondary';
                          ?>
                            <tr>
                              <td><?= date('d M Y, h:i A', strtotime($withdrawal['created_at'])) ?></td>
                              <td><?= htmlspecialchars($user['currency']) ?> <?= number_format($withdrawal['amount'], 2) ?></td>
                              <td><?= ucfirst(str_replace('_', ' ', $withdrawal['payment_method'])) ?></td>
                              <td>
                                <span class="badge <?= $statusClass ?>">
                                  <?= ucfirst($withdrawal['status']) ?>
                                </span>
                              </td>
                            </tr>
                          <?php endforeach; 
                          endif; ?>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Footer -->
          <?php include('includes/footer.php'); ?>
        </div>
      </div>
    </div>

    <!-- Overlay -->
    <div class="layout-overlay layout-menu-toggle"></div>
  </div>

  <?php include(__DIR__ . '/includes/script.php'); ?>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // QR code upload handling
      const qrUploadContainer = document.getElementById('qrUploadContainer');
      const qrCodeInput = document.getElementById('qr_code_image');
      const qrPreview = document.getElementById('qrPreview');
      
      if (qrUploadContainer && qrCodeInput) {
        qrUploadContainer.addEventListener('click', function() {
          qrCodeInput.click();
        });
        
        qrCodeInput.addEventListener('change', function(e) {
          if (e.target.files.length > 0) {
            const file = e.target.files[0];
            
            // Validate file type and size
            const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];
            const maxSize = 2 * 1024 * 1024; // 2MB
            
            if (!validTypes.includes(file.type)) {
              showError('Only JPG, JPEG, and PNG files are allowed');
              qrCodeInput.value = '';
              return;
            }
            
            if (file.size > maxSize) {
              showError('File size must be less than 2MB');
              qrCodeInput.value = '';
              return;
            }
            
            // Preview the image
            const reader = new FileReader();
            reader.onload = function(event) {
              qrPreview.src = event.target.result;
              qrPreview.style.display = 'block';
              qrUploadContainer.querySelector('p').textContent = 'QR Code Uploaded';
            };
            reader.readAsDataURL(file);
          }
        });
      }
      
      // Update payment method hidden field when tabs change
      const paymentMethodTabs = document.querySelectorAll('#payment-method-tabs .nav-link');
      const paymentMethodInput = document.getElementById('payment_method');
      
      paymentMethodTabs.forEach(tab => {
        tab.addEventListener('click', function() {
          const target = this.getAttribute('data-bs-target').replace('#', '');
          paymentMethodInput.value = target.replace('-method', '');
          
          // Toggle required attribute for QR code upload
          if (paymentMethodInput.value === 'qr_code') {
            qrCodeInput.setAttribute('required', 'required');
          } else {
            qrCodeInput.removeAttribute('required');
          }
        });
      });
      
      // Form validation
      const withdrawalForm = document.getElementById('withdrawalForm');
      const availableBalance = <?= $availableBalance ?>;
      
      function showError(message) {
        Swal.fire({
          title: 'Error',
          text: message,
          icon: 'error',
          confirmButtonColor: '#7367F0'
        });
      }
      
      if (withdrawalForm) {
        withdrawalForm.addEventListener('submit', function(e) {
          // Clear previous validation
          const invalidInputs = withdrawalForm.querySelectorAll('.is-invalid');
          invalidInputs.forEach(input => {
            input.classList.remove('is-invalid');
          });
          
          // Validate required fields
          let isValid = true;
          
          // Phone number validation
          const phoneNumber = document.getElementById('phone_number');
          if (!phoneNumber.value || !/^\d{10,15}$/.test(phoneNumber.value)) {
            phoneNumber.classList.add('is-invalid');
            isValid = false;
          }
          
          // Amount validation
          const amount = document.getElementById('amount');
          const amountValue = parseFloat(amount.value);
          
          if (!amount.value || isNaN(amountValue) || amountValue <= 0) {
            amount.classList.add('is-invalid');
            isValid = false;
          } else if (amountValue > availableBalance) {
            amount.classList.add('is-invalid');
            const errorFeedback = amount.parentElement.nextElementSibling.nextElementSibling;
            if (errorFeedback && errorFeedback.classList.contains('invalid-feedback')) {
              errorFeedback.textContent = `Amount cannot exceed available balance (${availableBalance.toFixed(2)})`;
            }
            isValid = false;
          }
          
          // Payment method specific validation
          const paymentMethod = paymentMethodInput.value;
          
          switch (paymentMethod) {
            case 'upi':
              const upiId = document.getElementById('upi_id');
              if (!upiId.value || !/^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+$/.test(upiId.value)) {
                upiId.classList.add('is-invalid');
                isValid = false;
              }
              break;
              
            case 'bank_transfer':
              const bankFields = [
                'account_holder_name', 'bank_account_number', 
                'bank_ifsc', 'bank_name'
              ];
              
              bankFields.forEach(field => {
                const input = document.getElementById(field);
                if (!input.value) {
                  input.classList.add('is-invalid');
                  isValid = false;
                }
              });
              
              // Validate IFSC code format
              const ifscCode = document.getElementById('bank_ifsc');
              if (ifscCode.value && !/^[A-Za-z]{4}0[A-Za-z0-9]{6}$/.test(ifscCode.value)) {
                ifscCode.classList.add('is-invalid');
                isValid = false;
              }
              break;
              
            case 'qr_code':
              if (!qrCodeInput.files || qrCodeInput.files.length === 0) {
                qrCodeInput.classList.add('is-invalid');
                isValid = false;
              }
              break;
          }
          
          if (!isValid) {
            e.preventDefault();
            
            // Scroll to first invalid field
            const firstInvalid = withdrawalForm.querySelector('.is-invalid');
            if (firstInvalid) {
              firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
              firstInvalid.focus();
            }
            
            return false;
          }
          
          return true;
        });
      }
    });
  </script>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>