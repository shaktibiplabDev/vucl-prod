<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Initialize variables
$paymentUrl = null;
$error = null;

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['submit_deposit'])) {
    try {
        // Validate required fields
        $required = ['customer_mobile', 'amount'];
        foreach ($required as $field) {
            if (empty($_POST[$field])) {
                throw new Exception("Missing required field: $field");
            }
        }

        $amount = (float) $_POST['amount'];
        if ($amount < 1) {
            throw new Exception("Minimum deposit amount is RS 1.00");
        }

        // Generate order ID
        $orderId = 'DEP-' . time() . '-' . bin2hex(random_bytes(4));

        // Prepare payment data
        $paymentData = [
            'customer_mobile' => $_POST['customer_mobile'],
            'user_token' => '5e8e50fbff157b2f8c514a2388dcdab3',
            'amount' => $amount,
            'order_id' => $orderId,
            'redirect_url' => 'http://localhost/v-ucl/v-ucl/operator/panel/payments/complete.php?order_id='.$orderId,
            'remark1' => $_POST['remark1'] ?? 'testremark',
            'remark2' => $_POST['remark2'] ?? 'From ' . $_SESSION['username']
        ];

        // Send to payment gateway
        $ch = curl_init('https://greenyellow-camel-719676.hostingersite.com/api/create-order');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($paymentData));
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: application/json']);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $curlError = curl_error($ch);
        curl_close($ch);

        if ($curlError) {
            throw new Exception("Payment gateway connection failed: " . $curlError);
        }

        // Handle both 200 and 201 success codes
        if ($httpCode === 200 || $httpCode === 201) {
            $result = json_decode($response, true);
            
            if (!$result || !isset($result['status'])) {
                throw new Exception("Invalid response from payment gateway");
            }

            if ($result['status'] !== true) {
                throw new Exception($result['message'] ?? "Payment processing failed");
            }

            if (!isset($result['result']['payment_url'])) {
                throw new Exception("Payment URL missing from response");
            }

            $paymentUrl = $result['result']['payment_url'];
        } else {
            throw new Exception("Payment gateway returned HTTP $httpCode");
        }

    } catch (Exception $e) {
        $error = $e->getMessage();
        error_log("Payment Error: " . $e->getMessage());
    }
}
?>

<!doctype html>
<html
  lang="en"
  class="layout-navbar-fixed layout-menu-fixed layout-compact"
  dir="ltr"
  data-skin="default"
  data-assets-path="../../assets/"
  data-template="vertical-menu-template"
  data-bs-theme="light">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Deposit Funds</title>
    <?php include('includes/head.php'); ?>
    <style>
    /* Modern Payment Modal Styles */
    .payment-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(4px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }
    
    .payment-modal-overlay.active {
        opacity: 1;
        visibility: visible;
    }
    
    .payment-modal-container {
        background: white;
        border-radius: 12px;
        width: 90%;
        max-width: 420px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        transform: translateY(20px);
        transition: transform 0.3s ease;
        overflow: hidden;
    }
    
    .payment-modal-overlay.active .payment-modal-container {
        transform: translateY(0);
    }
    
    .payment-modal-header {
        padding: 16px 20px;
        background: #7367F0;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .payment-modal-title {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
    }
    
    .payment-modal-close {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        line-height: 1;
        padding: 0;
    }
    
    .payment-modal-body {
        padding: 0;
    }
    
    .payment-modal-frame {
        width: 100%;
        height: 500px;
        border: none;
    }
    
    .payment-modal-footer {
        padding: 12px 16px;
        background: #f8f8f8;
        text-align: center;
    }
    
    .payment-modal-btn {
        background: #6c757d;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: background 0.2s;
    }
    
    .payment-modal-btn:hover {
        background: #5a6268;
    }
    
    .payment-alert {
        padding: 20px;
        text-align: center;
    }
    
    /* Animation for loading */
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .payment-loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px 20px;
    }
    
    .payment-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top: 4px solid #7367F0;
        animation: spin 1s linear infinite;
        margin-bottom: 16px;
    }
    
    /* Form enhancements */
    .form-control:focus {
        border-color: #7367F0;
        box-shadow: 0 0 0 0.2rem rgba(115, 103, 240, 0.25);
    }
    
    </style>
  </head>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
        <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
          <?php include('includes/navbar.php'); ?>

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="row">
                <div class="col-md-12">
                  <!-- Wallet Balance Cards -->
                  <div class="row mb-4">
                    <div class="col-md-4 mb-3">
                      <div class="card bg-primary text-white h-100">
                        <div class="card-body d-flex flex-column">
                          <h5 class="card-title">Main Balance</h5>
                          <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($user['wallet'], 2) ?></h3>
                          <small class="text-white-50">Available for withdrawal</small>
                        </div>
                      </div>
                    </div>
                    <div class="col-md-4 mb-3">
                      <div class="card bg-success text-white h-100">
                        <div class="card-body d-flex flex-column">
                          <h5 class="card-title">Bonus Balance</h5>
                          <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($user['bonus_wallet'], 2) ?></h3>
                          <small class="text-white-50">For trading only</small>
                        </div>
                      </div>
                    </div>
                    <div class="col-md-4 mb-3">
                      <div class="card bg-info text-white h-100">
                        <div class="card-body d-flex flex-column">
                          <h5 class="card-title">Total Balance</h5>
                          <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($user['wallet'] + $user['bonus_wallet'], 2) ?></h3>
                          <small class="text-white-50">Combined funds</small>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Deposit Form -->
                  <div class="card mb-4">
                    <h5 class="card-header bg-transparent">Make a Deposit</h5>
                    <div class="card-body">
                      <form id="depositForm" method="POST">
                        <input type="hidden" name="submit_deposit" value="1">
                        
                        <!-- Mobile Number -->
                        <div class="mb-3">
                          <label for="customer_mobile" class="form-label">Mobile Number</label>
                          <input
                            type="tel"
                            class="form-control"
                            id="customer_mobile"
                            name="customer_mobile"
                            placeholder="Enter your mobile number"
                            required
                            pattern="[0-9]{10,15}"
                            title="Please enter a valid 10-15 digit mobile number"
                          />
                        </div>

                        <!-- Amount Input -->
                        <div class="mb-3">
                          <label for="amount" class="form-label">Amount</label>
                          <div class="input-group">
                            <span class="input-group-text"><?= htmlspecialchars($user['currency']) ?></span>
                            <input
                              type="number"
                              class="form-control"
                              id="amount"
                              name="amount"
                              placeholder="Enter amount"
                              min="1"
                              step="0.01"
                              required
                            />
                          </div>
                          <div class="form-text text-muted">Minimum deposit: <?= htmlspecialchars($user['currency']) ?>1.00</div>
                        </div>

                        <!-- Remarks -->
                        <div class="mb-3">
                          <label for="remark1" class="form-label">Note (Optional)</label>
                          <input
                            type="text"
                            class="form-control"
                            id="remark1"
                            name="remark1"
                            placeholder="Enter a note for this deposit"
                          />
                        </div>

                        <input type="hidden" name="remark2" value="From <?= htmlspecialchars($user['username']) ?>">

                        <!-- Submit Button -->
                        <div class="mt-4">
                          <button type="submit" class="btn btn-primary w-100 py-2">
                            Proceed to Payment
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Footer -->
            <?php include('includes/footer.php'); ?>
          </div>
        </div>
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>
    </div>

    <!-- Payment Modal -->
    <div id="paymentModal" class="payment-modal-overlay">
        <div class="payment-modal-container">
            <div class="payment-modal-header">
                <h3 class="payment-modal-title">Complete Payment</h3>
                <button class="payment-modal-close">&times;</button>
            </div>
            <div class="payment-modal-body">
                <?php if ($paymentUrl): ?>
                    <iframe class="payment-modal-frame" src="<?= htmlspecialchars($paymentUrl) ?>" 
                            sandbox="allow-forms allow-scripts allow-same-origin"></iframe>
                <?php else: ?>
                    <div class="payment-alert alert alert-danger">
                        <i class="ti ti-alert-circle me-2"></i> Payment URL not available
                    </div>
                <?php endif; ?>
            </div>
            <div class="payment-modal-footer">
                <button class="payment-modal-btn cancel-payment">
                    Cancel Payment
                </button>
            </div>
        </div>
    </div>

    <?php include('includes/script.php'); ?>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Payment modal elements
        const paymentModal = document.getElementById('paymentModal');
        const paymentFrame = document.querySelector('.payment-modal-frame');
        
        // Show/hide modal functions with animations
        function showPaymentModal() {
            paymentModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
        
        function closePaymentModal() {
            paymentModal.classList.remove('active');
            document.body.style.overflow = '';
        }

        // Set up modal event listeners
        document.querySelector('.payment-modal-close').addEventListener('click', closePaymentModal);
        document.querySelector('.cancel-payment').addEventListener('click', closePaymentModal);
        paymentModal.addEventListener('click', function(e) {
            if (e.target === paymentModal) closePaymentModal();
        });

        // Show modal if payment URL exists
        <?php if ($paymentUrl): ?>
            showPaymentModal();
        <?php endif; ?>

        // Show error if exists
        <?php if ($error): ?>
            Swal.fire({
                title: 'Payment Error',
                html: '<?= addslashes($error) ?>',
                icon: 'error',
                confirmButtonText: 'OK',
                confirmButtonColor: '#7367F0',
                customClass: {
                    confirmButton: 'btn btn-primary'
                }
            });
        <?php endif; ?>

        // Enhanced form validation and submission
        const depositForm = document.getElementById('depositForm');
        if (depositForm) {
            depositForm.addEventListener('submit', function(e) {
                e.preventDefault();

                // Validate amount
                const amount = parseFloat(document.getElementById('amount').value);
                if (isNaN(amount) || amount < 1) {
                    Swal.fire({
                        title: 'Invalid Amount',
                        text: 'Minimum deposit amount is <?= htmlspecialchars($user['currency']) ?>1.00',
                        icon: 'error',
                        confirmButtonColor: '#7367F0'
                    });
                    return;
                }

                // Validate mobile number
                const mobile = document.getElementById('customer_mobile').value;
                if (!/^\d{10,15}$/.test(mobile)) {
                    Swal.fire({
                        title: 'Invalid Mobile',
                        text: 'Please enter a valid 10-15 digit mobile number',
                        icon: 'error',
                        confirmButtonColor: '#7367F0'
                    });
                    return;
                }

                // Show elegant processing indicator
                Swal.fire({
                    title: 'Processing Payment',
                    html: 'Please wait while we connect to our payment gateway...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                        const timerInterval = setInterval(() => {
                            const content = Swal.getHtmlContainer();
                            if (content) {
                                const seconds = content.querySelector('strong');
                                if (seconds) {
                                    seconds.textContent = (Math.floor(Date.now() / 1000) % 60);
                                }
                            }
                        }, 1000);
                        Swal.getConfirmButton().style.display = 'none';
                    },
                    willClose: () => {
                        clearInterval(timerInterval);
                    }
                });

                // Submit form
                setTimeout(() => {
                    depositForm.submit();
                }, 500); // Small delay for better UX
            });
        }

        // Listen for iframe messages (for payment completion)
        window.addEventListener('message', (event) => {
            if (event.origin !== 'https://charge.versaero.top') return;
            
            if (event.data === 'payment_completed') {
                closePaymentModal();
                Swal.fire({
                    title: 'Payment Successful',
                    text: 'Your deposit has been processed successfully!',
                    icon: 'success',
                    confirmButtonColor: '#7367F0'
                }).then(() => {
                    window.location.reload();
                });
            }
        });
    });
    </script>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>