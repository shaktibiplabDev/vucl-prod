<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
?>
<!doctype html>

<html
  lang="en"
  class="layout-navbar-fixed layout-menu-fixed layout-compact"
  dir="ltr"
  data-skin="default"
  data-assets-path="../../assets/"
  data-template="vertical-menu-template"
  data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
         <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
           <?php include('includes/navbar.php'); ?>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="row">
                <div class="col-12">
                  <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                      <h5 class="mb-0">Documentation Center</h5>
                    </div>
                    <div class="card-body">
                      <div class="row">
                        <div class="col-md-12">
                          <div class="mb-4">
                            <h4 class="fw-bold">About This Portal</h4>
                            <p class="mb-4">Our biometric services portal provides secure, government-approved fingerprint-based services including child enrollment, name updates, date of birth corrections, address changes, and contact information updates.</p>
                            
                            <div class="alert alert-primary">
                              <i class="ti tabler-info-circle me-2"></i>
                              All services require biometric verification through our secure fingerprint capture system.
                            </div>
                          </div>

                          <div class="mb-4">
                            <h4 class="fw-bold">Getting Started</h4>
                            <div class="accordion mb-4" id="gettingStartedAccordion">
                              <div class="card accordion-item">
                                <h2 class="accordion-header">
                                  <button type="button" class="accordion-button" data-bs-toggle="collapse" data-bs-target="#accountSetup">
                                    <i class="ti tabler-user-plus me-2"></i> Account Setup
                                  </button>
                                </h2>
                                <div id="accountSetup" class="accordion-collapse collapse show" data-bs-parent="#gettingStartedAccordion">
                                  <div class="accordion-body">
                                    <ol>
                                      <li>Register with your valid email and mobile number</li>
                                      <li>Verify your identity through OTP verification</li>
                                      <li>Complete your profile information</li>
                                      <li>Add funds to your wallet (for paid services)</li>
                                    </ol>
                                  </div>
                                </div>
                              </div>
                              <div class="card accordion-item">
                                <h2 class="accordion-header">
                                  <button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#serviceWorkflow">
                                    <i class="ti tabler-list-numbers me-2"></i> Service Workflow
                                  </button>
                                </h2>
                                <div id="serviceWorkflow" class="accordion-collapse collapse" data-bs-parent="#gettingStartedAccordion">
                                  <div class="accordion-body">
                                    <ol>
                                      <li>Select the service you need from your dashboard</li>
                                      <li>Complete the application form with accurate information</li>
                                      <li>Upload clear copies of required documents</li>
                                      <li>Complete biometric verification</li>
                                      <li>Review and submit your application</li>
                                      <li>Track status through your dashboard</li>
                                    </ol>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="mb-4">
                            <h4 class="fw-bold">System Requirements</h4>
                            <div class="row">
                              <div class="col-md-6">
                                <div class="card mb-3">
                                  <div class="card-header">
                                    <h5 class="card-title mb-0"><i class="ti tabler-device-desktop me-2"></i> Hardware</h5>
                                  </div>
                                  <div class="card-body">
                                    <ul class="list-unstyled">
                                      <li><i class="ti tabler-check text-success me-2"></i> Windows PC/Laptop (Windows 10+)</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> Minimum 4GB RAM</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> 500MB free disk space</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> Internet connection (2Mbps+)</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> Supported fingerprint reader</li>
                                    </ul>
                                  </div>
                                </div>
                              </div>
                              <div class="col-md-6">
                                <div class="card mb-3">
                                  <div class="card-header">
                                    <h5 class="card-title mb-0"><i class="ti tabler-brand-windows me-2"></i> Software</h5>
                                  </div>
                                  <div class="card-body">
                                    <ul class="list-unstyled">
                                      <li><i class="ti tabler-check text-success me-2"></i> Chrome/Edge/Firefox (latest)</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> Fingerprint drivers (provided)</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> PDF reader</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> .NET Framework 4.5+</li>
                                    </ul>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="mb-4">
                            <h4 class="fw-bold">Frequently Asked Questions</h4>
                            <div class="accordion mb-4" id="faqAccordion">
                              <div class="card accordion-item">
                                <h2 class="accordion-header">
                                  <button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#processingTime">
                                    How long do applications take to process?
                                  </button>
                                </h2>
                                <div id="processingTime" class="accordion-collapse collapse" data-bs-parent="#faqAccordion">
                                  <div class="accordion-body">
                                    Processing times vary by service but typically take 3-7 business days. Complex cases may take longer.
                                  </div>
                                </div>
                              </div>
                              <div class="card accordion-item">
                                <h2 class="accordion-header">
                                  <button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#fingerprintIssues">
                                    What if my fingerprints aren't being recognized?
                                  </button>
                                </h2>
                                <div id="fingerprintIssues" class="accordion-collapse collapse" data-bs-parent="#faqAccordion">
                                  <div class="accordion-body">
                                    <ol>
                                      <li>Clean your fingers and the scanner surface</li>
                                      <li>Try different finger positions</li>
                                      <li>Moisturize dry fingers if needed</li>
                                      <li>Contact support if issues persist</li>
                                    </ol>
                                  </div>
                                </div>
                              </div>
                              <div class="card accordion-item">
                                <h2 class="accordion-header">
                                  <button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#dataSecurity">
                                    How is my biometric data secured?
                                  </button>
                                </h2>
                                <div id="dataSecurity" class="accordion-collapse collapse" data-bs-parent="#faqAccordion">
                                  <div class="accordion-body">
                                    We use military-grade encryption and never store actual fingerprint images. Only mathematical representations (templates) are stored securely.
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="mb-4">
                            <h4 class="fw-bold">Support Resources</h4>
                            <div class="row">
                              <div class="col-md-4 mb-3">
                                <div class="card h-100">
                                  <div class="card-body text-center">
                                    <div class="avatar avatar-lg bg-label-primary mb-3">
                                      <span class="avatar-initial rounded-circle"><i class="ti tabler-help"></i></span>
                                    </div>
                                    <h5 class="card-title">Help Center</h5>
                                    <a href="#" class="btn btn-outline-primary">Visit Help Center</a>
                                  </div>
                                </div>
                              </div>
                              <div class="col-md-4 mb-3">
                                <div class="card h-100">
                                  <div class="card-body text-center">
                                    <div class="avatar avatar-lg bg-label-success mb-3">
                                      <span class="avatar-initial rounded-circle"><i class="ti tabler-headphones"></i></span>
                                    </div>
                                    <h5 class="card-title">Live Support</h5>
                                    <a href="#" class="btn btn-outline-success">Start Live Chat</a>
                                  </div>
                                </div>
                              </div>
                              <div class="col-md-4 mb-3">
                                <div class="card h-100">
                                  <div class="card-body text-center">
                                    <div class="avatar avatar-lg bg-label-info mb-3">
                                      <span class="avatar-initial rounded-circle"><i class="ti tabler-mail"></i></span>
                                    </div>
                                    <h5 class="card-title">Email Support</h5>
                                    <a href="mailto:support@fingerprintportal.com" class="btn btn-outline-info">Email Us</a>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div class="alert alert-secondary">
                            <div class="d-flex justify-content-between">
                              <span>System Version: 2.3.1</span>
                              <span>Last Updated: <?php echo date('F j, Y'); ?></span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
             <?php include('includes/footer.php'); ?>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>

      <!-- Drag Target Area To SlideIn Menu On Small Screens -->
      <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->
     <?php include('includes/script.php'); ?>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>