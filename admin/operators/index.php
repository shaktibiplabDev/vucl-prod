<?php
$code = base64_decode('PD9waHAKcmVxdWlyZSBfX0RJUl9fIC4gJy9zZWN1cml0eS9hdXRoLnBocCc7Cgokc3RtdCA9ICRwZG8tPnByZXBhcmUoJwogIFNFTEVDVAogICAgYXBwbGljYXRpb25faWQsCiAgICBjaGlsZF9uYW1lIGFzIGFwcGxpY2FudF9uYW1lLAogICAgc3VibWl0dGVkX2F0LAogICAgc3RhdHVzLAogICAgaXNfdXJnZW50CiAgRlJPTSBjaGlsZF9lbnJvbGwKICBXSEVSRSBhc3NpZ25lZF90byA9ID8nKTsKCiRzdG10LT5leGVjdXRlKFskdXNlcl9pZF0pOwokY2hpbGRfZW5yb2xsX2FwcGxpY2F0aW9ucyA9ICRzdG10LT5mZXRjaEFsbChQRE86OkZFVENIX0FTU09DKTsKZm9yZWFjaCAoJGNoaWxkX2Vucm9sbF9hcHBsaWNhdGlvbnMgYXMgJiRhcHBsaWNhdGlvbikgewogICRhcHBsaWNhdGlvblsnc2VydmljZSddID0gJ0NoaWxkIEVucm9sbCc7CgogIGlmKCRhcHBsaWNhdGlvblsnaXNfdXJnZW50J10pIHsKICAgICRhcHBsaWNhdGlvblsnbGluayddID0gJy9hZG1pbi9vcGVyYXRvcnMvaW1wb3J0YW50LWNoaWxkLWRhdGEucGhwP2FwcF9pZD0nLiAkYXBwbGljYXRpb25bJ2FwcGxpY2F0aW9uX2lkJ107CiAgfSBlbHNlIHsKICAgICRhcHBsaWNhdGlvblsnbGluayddID0gJy9hZG1pbi9vcGVyYXRvcnMvY2hpbGQtZGF0YS5waHA/YXBwX2lkPScuICRhcHBsaWNhdGlvblsnYXBwbGljYXRpb25faWQnXTsKICB9Cn0KCiRzdG10ID0gJHBkby0+cHJlcGFyZSgnCiAgU0VMRUNUCiAgICBhcHBsaWNhdGlvbl9pZCwKICAgIGZ1bGxfbmFtZSBhcyBhcHBsaWNhbnRfbmFtZSwKICAgIHN1Ym1pdHRlZF9hdCwKICAgIHN0YXR1cywKICAgIGlzX3VyZ2VudAogIEZST00gYWRkcmVzc191cGRhdGUKICBXSEVSRSBhc3NpZ25lZF90byA9PycpOwoKJHN0bXQtPmV4ZWN1dGUoWyR1c2VyX2lkXSk7CiRhZGRyZXNzX3VwZGF0ZV9hcHBsaWNhdGlvbnMgPSAkc3RtdC0+ZmV0Y2hBbGwoUERPOjpGRVRDSF9BU1NPQyk7CmZvcmVhY2ggKCRhZGRyZXNzX3VwZGF0ZV9hcHBsaWNhdGlvbnMgYXMgJiRhcHBsaWNhdGlvbikgewogICRhcHBsaWNhdGlvblsnc2VydmljZSddID0gJ0FkZHJlc3MgVXBkYXRlJzsKCiAgaWYoJGFwcGxpY2F0aW9uWydpc191cmdlbnQnXSkgewogICAgJGFwcGxpY2F0aW9uWydsaW5rJ10gPSAnL2FkbWluL29wZXJhdG9ycy9pbXBvcnRhbnQtYWRkcmVzcy1kYXRhLnBocD9hcHBfaWQ9Jy4gJGFwcGxpY2F0aW9uWydhcHBsaWNhdGlvbl9pZCddOwogIH0gZWxzZSB7CiAgICAkYXBwbGljYXRpb25bJ2xpbmsnXSA9ICcvYWRtaW4vb3BlcmF0b3JzL2FkZHJlc3MtZGF0YS5waHA/YXBwX2lkPScuICRhcHBsaWNhdGlvblsnYXBwbGljYXRpb25faWQnXTsKICB9Cn0KCiRzdG10ID0gJHBkby0+cHJlcGFyZSgnCiAgU0VMRUNUCiAgICBhcHBsaWNhdGlvbl9pZCwKICAgIGZ1bGxfbmFtZSBhcyBhcHBsaWNhbnRfbmFtZSwKICAgIHN1Ym1pdHRlZF9hdCwKICAgIHN0YXR1cywKICAgIGlzX3VyZ2VudAogIEZST00gZG9iX3VwZGF0ZQogIFdIRVJFIGFzc2lnbmVkX3RvID0/Jyk7Cgokc3RtdC0+ZXhlY3V0ZShbJHVzZXJfaWRdKTsKJGRvYl91cGRhdGVfYXBwbGljYXRpb25zID0gJHN0bXQtPmZldGNoQWxsKFBETzo6RkVUQ0hfQVNTT0MpOwpmb3JlYWNoICgkZG9iX3VwZGF0ZV9hcHBsaWNhdGlvbnMgYXMgJiRhcHBsaWNhdGlvbikgewogICRhcHBsaWNhdGlvblsnc2VydmljZSddID0gJ0RPQiBVcGRhdGUnOwoKICBpZigkYXBwbGljYXRpb25bJ2lzX3VyZ2VudCddKSB7CiAgICAkYXBwbGljYXRpb25bJ2xpbmsnXSA9ICcvYWRtaW4vb3BlcmF0b3JzL2ltcG9ydGFudC1kb2ItZGF0YS5waHA/YXBwX2lkPScuICRhcHBsaWNhdGlvblsnYXBwbGljYXRpb25faWQnXTsKICB9IGVsc2UgewogICAgJGFwcGxpY2F0aW9uWydsaW5rJ10gPSAnL2FkbWluL29wZXJhdG9ycy9kb2ItZGF0YS5waHA/YXBwX2lkPScuICRhcHBsaWNhdGlvblsnYXBwbGljYXRpb25faWQnXTsKICB9Cn0KCiRzdG10ID0gJHBkby0+cHJlcGFyZSgnCiAgU0VMRUNUCiAgICBhcHBsaWNhdGlvbl9pZCwKICAgIG9sZF9uYW1lIGFzIGFwcGxpY2FudF9uYW1lLAogICAgc3VibWl0dGVkX2F0LAogICAgc3RhdHVzLAogICAgaXNfdXJnZW50CiAgRlJPTSBuYW1lX3VwZGF0ZQogIFdIRVJFIGFzc2lnbmVkX3RvID0/Jyk7Cgokc3RtdC0+ZXhlY3V0ZShbJHVzZXJfaWRdKTsKJG5hbWVfdXBkYXRlX2FwcGxpY2F0aW9ucyA9ICRzdG10LT5mZXRjaEFsbChQRE86OkZFVENIX0FTU09DKTsKZm9yZWFjaCAoJG5hbWVfdXBkYXRlX2FwcGxpY2F0aW9ucyBhcyAmJGFwcGxpY2F0aW9uKSB7CiAgJGFwcGxpY2F0aW9uWydzZXJ2aWNlJ10gPSAnTmFtZSBVcGRhdGUnOwoKICBpZigkYXBwbGljYXRpb25bJ2lzX3VyZ2VudCddKSB7CiAgICAkYXBwbGljYXRpb25bJ2xpbmsnXSA9ICcvYWRtaW4vb3BlcmF0b3JzL2ltcG9ydGFudC1uYW1lLWRhdGEucGhwP2FwcF9pZD0nLiAkYXBwbGljYXRpb25bJ2FwcGxpY2F0aW9uX2lkJ107CiAgfSBlbHNlIHsKICAgICRhcHBsaWNhdGlvblsnbGluayddID0gJy9hZG1pbi9vcGVyYXRvcnMvbmFtZS1kYXRhLnBocD9hcHBfaWQ9Jy4gJGFwcGxpY2F0aW9uWydhcHBsaWNhdGlvbl9pZCddOwogIH0KfQoKJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCcKICBTRUxFQ1QKICAgIGFwcGxpY2F0aW9uX2lkLAogICAgZnVsbF9uYW1lIGFzIGFwcGxpY2FudF9uYW1lLAogICAgc3VibWl0dGVkX2F0LAogICAgc3RhdHVzLAogICAgaXNfdXJnZW50CiAgRlJPTSBtb2JpbGVfZW1haWxfdXBkYXRlcwogIFdIRVJFIGFzc2lnbmVkX3RvID0/Jyk7Cgokc3RtdC0+ZXhlY3V0ZShbJHVzZXJfaWRdKTsKJG1vYmlsZV9lbWFpbF91cGRhdGVfYXBwbGljYXRpb25zID0gJHN0bXQtPmZldGNoQWxsKFBETzo6RkVUQ0hfQVNTT0MpOwpmb3JlYWNoICgkbW9iaWxlX2VtYWlsX3VwZGF0ZV9hcHBsaWNhdGlvbnMgYXMgJiRhcHBsaWNhdGlvbikgewogICRhcHBsaWNhdGlvblsnc2VydmljZSddID0gJ01vYmlsZSBFbWFpbCBVcGRhdGUnOwoKICBpZigkYXBwbGljYXRpb25bJ2lzX3VyZ2VudCddKSB7CiAgICAkYXBwbGljYXRpb25bJ2xpbmsnXSA9ICcvYWRtaW4vb3BlcmF0b3JzL2ltcG9ydGFudC1jb250YWN0LWRhdGEucGhwP2FwcF9pZD0nLiAkYXBwbGljYXRpb25bJ2FwcGxpY2F0aW9uX2lkJ107CiAgfSBlbHNlIHsKICAgICRhcHBsaWNhdGlvblsnbGluayddID0gJy9hZG1pbi9vcGVyYXRvcnMvY29udGFjdC1kYXRhLnBocD9hcHBfaWQ9Jy4gJGFwcGxpY2F0aW9uWydhcHBsaWNhdGlvbl9pZCddOwogIH0KfQoKJGFsbF9hcHBsaWNhdGlvbnMgPSBhcnJheV9tZXJnZSgkY2hpbGRfZW5yb2xsX2FwcGxpY2F0aW9ucywgJGFkZHJlc3NfdXBkYXRlX2FwcGxpY2F0aW9ucywgJGRvYl91cGRhdGVfYXBwbGljYXRpb25zLCAkbmFtZV91cGRhdGVfYXBwbGljYXRpb25zLCAkbW9iaWxlX2VtYWlsX3VwZGF0ZV9hcHBsaWNhdGlvbnMpOwoKJHByb2Nlc3NpbmdfYXBwbGljYXRpb25zID0gYXJyYXlfZmlsdGVyKCRhbGxfYXBwbGljYXRpb25zLCBmdW5jdGlvbigkYXBwbGljYXRpb24pIHsKICByZXR1cm4gJGFwcGxpY2F0aW9uWydzdGF0dXMnXSA9PT0gJ3Byb2Nlc3NpbmcnOwp9KTsKCiRhcHByb3ZlZF9hcHBsaWNhdGlvbnMgPSBhcnJheV9maWx0ZXIoJGFsbF9hcHBsaWNhdGlvbnMsIGZ1bmN0aW9uKCRhcHBsaWNhdGlvbikgewogIHJldHVybiAkYXBwbGljYXRpb25bJ3N0YXR1cyddID09PSAnYXBwcm92ZWQnOwp9KTsKCiRyZWplY3RlZF9hcHBsaWNhdGlvbnMgPSBhcnJheV9maWx0ZXIoJGFsbF9hcHBsaWNhdGlvbnMsIGZ1bmN0aW9uKCRhcHBsaWNhdGlvbikgewogIHJldHVybiAkYXBwbGljYXRpb25bJ3N0YXR1cyddID09PSAncmVqZWN0ZWQnOwp9KTsKCiRwZXJjZW50YWdlX2FwcHJvdmVkID0gJ05BJzsKJHBlcmNlbnRhZ2VfcmVqZWN0ZWQgPSAnTkEnOwoKaWYgKGNvdW50KCRhbGxfYXBwbGljYXRpb25zKSkgewogICRwZXJjZW50YWdlX2FwcHJvdmVkID0gcm91bmQoKGNvdW50KCRhcHByb3ZlZF9hcHBsaWNhdGlvbnMpIC8gY291bnQoJGFsbF9hcHBsaWNhdGlvbnMpKSAqIDEwMCwgMik7CiAgJHBlcmNlbnRhZ2VfcmVqZWN0ZWQgPSByb3VuZCgoY291bnQoJHJlamVjdGVkX2FwcGxpY2F0aW9ucykgLyBjb3VudCgkYWxsX2FwcGxpY2F0aW9ucykpICogMTAwLCAyKTsKfSBlbHNlIHsKICAkcGVyY2VudGFnZV9hcHByb3ZlZCA9IDA7CiAgJHBlcmNlbnRhZ2VfcmVqZWN0ZWQgPSAwOwp9CgoKLy8gV2FsbGV0IE92ZXJ2aWV3CiRzdG10ID0gJHBkby0+cHJlcGFyZSgnCiAgU0VMRUNUCiAgICB3YWxsZXQsCiAgICBib251c193YWxsZXQsCiAgICBjdXJyZW5jeQogIEZST00gdXNlcnMKICBXSEVSRSBpZCA9PycpOwoKJHN0bXQtPmV4ZWN1dGUoWyR1c2VyX2lkXSk7CiR3YWxsZXQgPSAkc3RtdC0+ZmV0Y2goUERPOjpGRVRDSF9BU1NPQyk7CiRib251c193YWxsZXQgPSAkd2FsbGV0Wydib251c193YWxsZXQnXTsKJG1haW5fd2FsbGV0ID0gJHdhbGxldFsnd2FsbGV0J107CiRjdXJyZW5jeSA9ICR3YWxsZXRbJ2N1cnJlbmN5J107CgoKLy8gV2FsbGV0IGFuYWx5dGljcwokYWRkZWRfd2FsbGV0ID0gJG1haW5fd2FsbGV0ICsgJGJvbnVzX3dhbGxldDsKJG1haW5fd2FsbGV0X3BlcmNlbnRhZ2UgPSAwOwokYm9udXNfd2FsbGV0X3BlcmNlbnRhZ2UgPSAwOwoKaWYgKCFlbXB0eSgkYWRkZWRfd2FsbGV0KSAmJiBpc19udW1lcmljKCRhZGRlZF93YWxsZXQpICYmICRhZGRlZF93YWxsZXQgIT0gMCkgewogICAgJG1haW5fd2FsbGV0X3BlcmNlbnRhZ2UgPSByb3VuZCgoJG1haW5fd2FsbGV0IC8gJGFkZGVkX3dhbGxldCkgKiAxMDAsIDIpOwogICAgJGJvbnVzX3dhbGxldF9wZXJjZW50YWdlID0gcm91bmQoKCRib251c193YWxsZXQgLyAkYWRkZWRfd2FsbGV0KSAqIDEwMCwgMik7Cn0gZWxzZSB7CiAgICAkbWFpbl93YWxsZXRfcGVyY2VudGFnZSA9IDA7CiAgICAkYm9udXNfd2FsbGV0X3BlcmNlbnRhZ2UgPSAwOwp9Cgo/Pgo8IWRvY3R5cGUgaHRtbD4KCjxodG1sCiAgbGFuZz0iZW4iCiAgY2xhc3M9ImxheW91dC1uYXZiYXItZml4ZWQgbGF5b3V0LW1lbnUtZml4ZWQgbGF5b3V0LWNvbXBhY3QiCiAgZGlyPSJsdHIiCiAgZGF0YS1za2luPSJkZWZhdWx0IgogIGRhdGEtYXNzZXRzLXBhdGg9Ii4uLy4uL2Fzc2V0cy8iCiAgZGF0YS10ZW1wbGF0ZT0idmVydGljYWwtbWVudS10ZW1wbGF0ZSIKICBkYXRhLWJzLXRoZW1lPSJsaWdodCI+CiAgPD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvaGVhZC5waHAnKTsgPz4KCiAgPGJvZHk+CiAgICA8IS0tIExheW91dCB3cmFwcGVyIC0tPgogICAgPGRpdiBjbGFzcz0ibGF5b3V0LXdyYXBwZXIgbGF5b3V0LWNvbnRlbnQtbmF2YmFyIj4KICAgICAgPGRpdiBjbGFzcz0ibGF5b3V0LWNvbnRhaW5lciI+CiAgICAgICAgPCEtLSBNZW51IC0tPgogICAgICAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9zaWRlYmFyLnBocCcpOyA/PgoKICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LW1vYmlsZS10b2dnbGVyIGQteGwtbm9uZSByb3VuZGVkLTEiPgogICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9ImxheW91dC1tZW51LXRvZ2dsZSBtZW51LWxpbmsgdGV4dC1sYXJnZSB0ZXh0LWJnLXNlY29uZGFyeSBwLTIgcm91bmRlZC0xIj4KICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1tZW51IGljb24tYmFzZSI+PC9pPgogICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLWNoZXZyb24tcmlnaHQgaWNvbi1iYXNlIj48L2k+CiAgICAgICAgICA8L2E+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSAvIE1lbnUgLS0+CgogICAgICAgIDwhLS0gTGF5b3V0IGNvbnRhaW5lciAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtcGFnZSI+CiAgICAgICAgICA8IS0tIE5hdmJhciAtLT4KICAgICAgICAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9uYXZiYXIucGhwJyk7ID8+CgogICAgICAgICAgPCEtLSAvIE5hdmJhciAtLT4KCiAgICAgICAgICA8IS0tIENvbnRlbnQgd3JhcHBlciAtLT4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtd3JhcHBlciI+CiAgICAgICAgICAgIDwhLS0gQ29udGVudCAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLXh4bCBmbGV4LWdyb3ctMSBjb250YWluZXItcC15Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgZy02Ij4KICAgICAgICAgICAgICAgIDwhLS0gV2Vic2l0ZSBBbmFseXRpY3MgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteGwtNiBjb2wiPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InN3aXBlci1jb250YWluZXIgc3dpcGVyLWNvbnRhaW5lci1ob3Jpem9udGFsIHN3aXBlciBzd2lwZXItY2FyZC1hZHZhbmNlLWJnIgogICAgICAgICAgICAgICAgICAgIGlkPSJzd2lwZXItd2l0aC1wYWdpbmF0aW9uLWNhcmRzIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InRleHQtd2hpdGUgbWItMCI+RGFzaGJvYXJkIEFuYWx5dGljczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGw+VG90YWwgPD89IGNvdW50KCRhbGxfYXBwbGljYXRpb25zKSA/PiBBcHBsaWNhdGlvbnMgVGFrZW48L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNyBjb2wtbWQtOSBjb2wtMTIgb3JkZXItMiBvcmRlci1tZC0xIHB0LW1kLTkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtd2hpdGUgbXQtMCBtdC1tZC0zIG1iLTQiPkFuYWx5c2lzPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgbWItMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZC1mbGV4IG1iLTQgYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMCBmdy1tZWRpdW0gbWUtMiB3ZWJzaXRlLWFuYWx5dGljcy10ZXh0LWJnIj48Pz0gJHBlcmNlbnRhZ2VfYXBwcm92ZWQgPz4lPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi0wIj5BcHByb3ZlZDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMCBmdy1tZWRpdW0gbWUtMiB3ZWJzaXRlLWFuYWx5dGljcy10ZXh0LWJnIj48Pz0gJHBlcmNlbnRhZ2VfcmVqZWN0ZWQgPz4lPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi0wIj5SZWplY3RlZDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNSBjb2wtbWQtMyBjb2wtMTIgb3JkZXItMSBvcmRlci1tZC0yIG15LTQgbXktbWQtMCB0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii4uLy4uL2Fzc2V0cy9pbWcvaWxsdXN0cmF0aW9ucy9jYXJkLXdlYnNpdGUtYW5hbHl0aWNzLTEucG5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iV2Vic2l0ZSBBbmFseXRpY3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PSIxNTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImNhcmQtd2Vic2l0ZS1hbmFseXRpY3MtaW1nIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3dpcGVyLXBhZ2luYXRpb24iPjwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLS8gV2Vic2l0ZSBBbmFseXRpY3MgLS0+CgogICAgICAgICAgICAgICAgPCEtLSBQcm9jZXNzaW5nIEFwcGxpY2F0aW9ucyAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14bC0zIGNvbC1zbS02Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBoLTEwMCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIgcGItMCI+CiAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1iLTMgY2FyZC10aXRsZSI+UHJvY2Vzc2luZzwvaDU+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMCB0ZXh0LWJvZHkiPkFwcGxpY2F0aW9ucyB1bmRlciBQcm9jZXNzaW5nPC9wPgogICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJtYi0wIj48Pz0gY291bnQoJHByb2Nlc3NpbmdfYXBwbGljYXRpb25zKSA/PjwvaDQ+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IHB4LTAiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYXZlcmFnZURhaWx5U2FsZXMiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLS8gUHJvY2Vzc2luZyBBcHBsaWNhdGlvbnMgLS0+CgogICAgICAgICAgICAgICAgPCEtLSBXYWxsZXQgT3ZlcnZpZXcgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteGwtMyBjb2wtc20tNiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgaC0xMDAiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi0wIHRleHQtYm9keSI+V2FsbGV0IE92ZXJ2aWV3PC9wPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9ImNhcmQtdGl0bGUgbWItMSI+PD89ICRjdXJyZW5jeSAuICRhZGRlZF93YWxsZXQgPz48L2g0PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGdhcC0yIGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSBiZy1sYWJlbC1pbmZvIHAtMSByb3VuZGVkIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PGkgY2xhc3M9Imljb24tYmFzZSB0aSB0YWJsZXItc2hvcHBpbmctY2FydCBpY29uLXNtIj48L2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItMCI+TWFpbjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1iLTAgcHQtMSI+PD89ICRjdXJyZW5jeSAuICRtYWluX3dhbGxldCA/PjwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LWJvZHktc2Vjb25kYXJ5Ij48Pz0gJG1haW5fd2FsbGV0X3BlcmNlbnRhZ2U/PiU8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlkZXIgZGl2aWRlci12ZXJ0aWNhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkaXZpZGVyLXRleHQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2UtZGl2aWRlci1iZyBiZy1sYWJlbC1zZWNvbmRhcnkiPlZTPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCB0ZXh0LWVuZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGdhcC0yIGp1c3RpZnktY29udGVudC1lbmQgYWxpZ24taXRlbXMtY2VudGVyIG1iLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTAiPkJvbnVzPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImJhZGdlIGJnLWxhYmVsLXByaW1hcnkgcC0xIHJvdW5kZWQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48aSBjbGFzcz0iaWNvbi1iYXNlIHRpIHRhYmxlci1saW5rIGljb24tc20iPjwvaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1iLTAgcHQtMSI+PD89ICRjdXJyZW5jeSAuICRib251c193YWxsZXQgPz48L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1ib2R5LXNlY29uZGFyeSI+PD89ICRib251c193YWxsZXRfcGVyY2VudGFnZSA/PiU8L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtdC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3Jlc3Mgdy0xMDAiIHN0eWxlPSJoZWlnaHQ6IDEwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJwcm9ncmVzcy1iYXIgYmctaW5mbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogPD89ICRtYWluX3dhbGxldF9wZXJjZW50YWdlID8+JSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9InByb2dyZXNzYmFyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS12YWx1ZW5vdz0iNzAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLXZhbHVlbWluPSIwIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS12YWx1ZW1heD0iMTAwIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0icHJvZ3Jlc3MtYmFyIGJnLXByaW1hcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPSJwcm9ncmVzc2JhciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogPD89ICRib251c193YWxsZXRfcGVyY2VudGFnZSA/PiUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLXZhbHVlbm93PSIzMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtdmFsdWVtaW49IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLXZhbHVlbWF4PSIxMDAiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLS8gV2FsbGV0IE92ZXJ2aWV3IC0tPgoKICAgICAgICAgICAgICAgIDwhLS0gUHJvamVjdHMgdGFibGUgLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHhsLTEyIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBtYi00Ij4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNhcmQtaGVhZGVyIj5Qcm9jZXNzaW5nIEFwcGxpY2F0aW9uczwvaDU+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLXJlc3BvbnNpdmUgdGV4dC1ub3dyYXAiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9ImR0LXJlc3BvbnNpdmUgdGFibGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2F0aW9uIElEPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFwcGxpY2FudCBOYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNlcnZpY2U8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGF0ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5MaW5rPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoICgkcHJvY2Vzc2luZ19hcHBsaWNhdGlvbnMgYXMgJGFwcGxpY2F0aW9uKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkYXBwbGljYXRpb25bJ2FwcGxpY2F0aW9uX2lkJ10/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gJGFwcGxpY2F0aW9uWydhcHBsaWNhbnRfbmFtZSddPz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89ICRhcHBsaWNhdGlvblsnc2VydmljZSddPz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89IGRhdGUoJ2QgTSwgWScsIHN0cnRvdGltZSgkYXBwbGljYXRpb25bJ3N1Ym1pdHRlZF9hdCddKSk/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI8Pz0gJGFwcGxpY2F0aW9uWydsaW5rJ10gPz4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPlZpZXc8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kZm9yZWFjaDs/PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS0vIFByb2plY3RzIHRhYmxlIC0tPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSAvIENvbnRlbnQgLS0+CgogICAgICAgICAgICA8IS0tIEZvb3RlciAtLT4KICAgICAgICAgICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL2Zvb3Rlci5waHAnKTsgPz4KICAgICAgICAgICAgPCEtLSAvIEZvb3RlciAtLT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtYmFja2Ryb3AgZmFkZSI+PC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwhLS0gQ29udGVudCB3cmFwcGVyIC0tPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gLyBMYXlvdXQgcGFnZSAtLT4KICAgICAgPC9kaXY+CgogICAgICA8IS0tIE92ZXJsYXkgLS0+CiAgICAgIDxkaXYgY2xhc3M9ImxheW91dC1vdmVybGF5IGxheW91dC1tZW51LXRvZ2dsZSI+PC9kaXY+CgogICAgICA8IS0tIERyYWcgVGFyZ2V0IEFyZWEgVG8gU2xpZGVJbiBNZW51IE9uIFNtYWxsIFNjcmVlbnMgLS0+CiAgICAgIDxkaXYgY2xhc3M9ImRyYWctdGFyZ2V0Ij48L2Rpdj4KICAgIDwvZGl2PgogICAgPCEtLSAvIExheW91dCB3cmFwcGVyIC0tPgogICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL3NjcmlwdC5waHAnKTsgPz4KICAgIDxzY3JpcHQ+CiAgICAgIGNvbnN0IGR0X3Jlc3BvbnNpdmVfdGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZHQtcmVzcG9uc2l2ZScpOwogICAgICAgIGlmIChkdF9yZXNwb25zaXZlX3RhYmxlKSB7CiAgICAgICAgICAgIGxldCBkdF9yZXNwb25zaXZlID0gbmV3IERhdGFUYWJsZShkdF9yZXNwb25zaXZlX3RhYmxlLCB7CiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLAogICAgICAgICAgICAgICAgbGF5b3V0OiB7CiAgICAgICAgICAgICAgICB0b3BTdGFydDogewogICAgICAgICAgICAgICAgICAgIHJvd0NsYXNzOiAncm93IG15LTAganVzdGlmeS1jb250ZW50LWJldHdlZW4nLAogICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICdwYWdlTGVuZ3RoJwogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgcGFnZUxlbmd0aDogewogICAgICAgICAgICAgICAgICAgICAgICBtZW51OiBbMTAsIDI1LCA1MCwgMTAwXSwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1Nob3cgX01FTlVfIGVudHJpZXMnCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJvdHRvbVN0YXJ0OiB7CiAgICAgICAgICAgICAgICAgICAgcm93Q2xhc3M6ICdyb3cgbXgtMyBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbicsCiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXM6IFsnaW5mbyddCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYm90dG9tRW5kOiAncGFnaW5nJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGxhbmd1YWdlOiB7CiAgICAgICAgICAgICAgICBwYWdpbmF0ZTogewogICAgICAgICAgICAgICAgICAgIG5leHQ6ICc8aSBjbGFzcz0iaWNvbi1iYXNlIHRpIHRhYmxlci1jaGV2cm9uLXJpZ2h0IHNjYWxlWC1uMS1ydGwgaWNvbi0xOHB4Ij48L2k+JywKICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogJzxpIGNsYXNzPSJpY29uLWJhc2UgdGkgdGFibGVyLWNoZXZyb24tbGVmdCBzY2FsZVgtbjEtcnRsIGljb24tMThweCI+PC9pPicsCiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICc8aSBjbGFzcz0iaWNvbi1iYXNlIHRpIHRhYmxlci1jaGV2cm9ucy1sZWZ0IHNjYWxlWC1uMS1ydGwgaWNvbi0xOHB4Ij48L2k+JywKICAgICAgICAgICAgICAgICAgICBsYXN0OiAnPGkgY2xhc3M9Imljb24tYmFzZSB0aSB0YWJsZXItY2hldnJvbnMtcmlnaHQgc2NhbGVYLW4xLXJ0bCBpY29uLTE4cHgiPjwvaT4nCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2VhcmNoOiAnJywKICAgICAgICAgICAgICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnU2VhcmNoIHJlY29yZHMuLi4nLAogICAgICAgICAgICAgICAgbGVuZ3RoTWVudTogJ1Nob3cgX01FTlVfIGVudHJpZXMnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY29sdW1uRGVmczogW3sKICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogMQogICAgICAgICAgICAgICAgfSwgLy8gQXBwbGljYXRpb24gSUQKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogMgogICAgICAgICAgICAgICAgfSwgLy8gRnVsbCBOYW1lCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAzLAogICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IC0xCiAgICAgICAgICAgICAgICB9IC8vIEFjdGlvbnMKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgPC9zY3JpcHQ+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>