<?php
$code = base64_decode('<?php
session_start();
if (empty($_SESSION['logged_in']) || $_SESSION['logged_in'] !== true || empty($_SESSION['user_type'])) {
    session_unset();
    session_destroy();
    ?>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Session Expired</title>
        <style>
            body, html {
                margin: 0;
                padding: 0;
                height: 100%;
                overflow: hidden;
                font-family: 'Arial', sans-serif;
            }
            
            .background-container {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: url('../../assets/images/background.gif') no-repeat center center;
                background-size: cover;
                filter: blur(5px);
                z-index: -1;
            }
            
            .overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 0;
            }
            
            .modal {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 400px;
                max-width: 90%;
                background: #2F3349;
                border-radius: 10px;
                box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
                overflow: hidden;
                z-index: 10;
                animation: fadeIn 0.5s ease-out;
            }
            
            .modal-header {
                background: #685DD8;
                color: white;
                padding: 20px;
                text-align: center;
                font-size: 1.5rem;
                font-weight: bold;
            }
            
            .modal-body {
                padding: 30px;
                text-align: center;
                color: white;
                line-height: 1.6;
            }
            
            .modal-footer {
                padding: 15px;
                text-align: center;
                background: #2F3349;
            }
            
            .btn {
                padding: 10px 25px;
                border: none;
                border-radius: 5px;
                background: #685DD8;
                color: white;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .btn:hover {
                background:rgb(60, 47, 196);
                transform: translateY(-2px);
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            }
            
            @keyframes fadeIn {
                from { opacity: 0; transform: translate(-50%, -60%); }
                to { opacity: 1; transform: translate(-50%, -50%); }
            }
        </style>
    </head>
    <body>
        <div class="background-container"></div>
        <div class="overlay"></div>
        
        <div class="modal">
            <div class="modal-header">
                <i class="fas fa-exclamation-triangle"></i> Session Expired
            </div>
            <div class="modal-body">
                <p>Your session has expired due to inactivity.</p>
                <p>Please login again to continue using the system.</p>
            </div>
            <div class="modal-footer">
                <button class="btn" onclick="window.location.href='../../login.php'">
                    Login Now
                </button>
            </div>
        </div>
        
        <!-- Optional: Font Awesome for icons -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    </body>
    </html>
    <?php
    exit();
}

if ($_SESSION['user_type'] !== 'distributor') {
    include 'unauthorized.php';
    exit();
}

require_once realpath(__DIR__ . '/../../../config/database.php');

// Get current user data
$user_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
$stmt->execute([$user_id]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$user) {
    ?>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>User Not Found</title>
        <style>
            body, html {
                margin: 0;
                padding: 0;
                height: 100%;
                overflow: hidden;
                font-family: 'Arial', sans-serif;
            }
            
            .background-container {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: url('../../assets/images/background.gif') no-repeat center center;
                background-size: cover;
                filter: blur(5px);
                z-index: -1;
            }
            
            .overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.7);
                z-index: 0;
            }
            
            .modal {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 500px;
                max-width: 90%;
                background: #2F3349;
                border-radius: 10px;
                box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
                overflow: hidden;
                z-index: 10;
                animation: fadeIn 0.5s ease-out;
            }
            
            .modal-header {
                background: #FF5722;
                color: white;
                padding: 20px;
                text-align: center;
                font-size: 1.5rem;
                font-weight: bold;
            }
            
            .modal-body {
                padding: 30px;
                text-align: center;
                color: white;
                line-height: 1.6;
            }
            
            .modal-footer {
                padding: 15px;
                text-align: center;
                background: #2F3349;
            }
            
            .btn {
                padding: 10px 25px;
                border: none;
                border-radius: 5px;
                background: #685DD8;
                color: white;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .btn:hover {
                background:rgb(60, 47, 196);
                transform: translateY(-2px);
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            }
            
            @keyframes fadeIn {
                from { opacity: 0; transform: translate(-50%, -60%); }
                to { opacity: 1; transform: translate(-50%, -50%); }
            }
        </style>
    </head>
    <body>
        <div class="background-container"></div>
        <div class="overlay"></div>
        
        <div class="modal">
            <div class="modal-header">
                <i class="fas fa-user-times"></i> User Not Found
            </div>
            <div class="modal-body">
                <p>Your user account could not be found in the system.</p>
                <p>You will be automatically logged out.</p>
            </div>
            <div class="modal-footer">
                <button class="btn" onclick="window.location.href='logout.php'">
                    <i class="fas fa-sign-out-alt"></i> Continue to Logout
                </button>
            </div>
        </div>
        
        <!-- Optional: Font Awesome for icons -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
        <script>
            setTimeout(function() {
                window.location.href = 'logout.php';
            }, 3000);
        </script>
    </body>
    </html>
    <?php
    exit();
}

$isBanned = $user['isbanned'];

if ($isBanned) {
    include './banned.php';
    exit();
}

function verifyHostaeroIP() {
    // Current server IP
    $currentIP = $_SERVER['SERVER_ADDR'] ?? gethostbyname(gethostname());
    
    // Get IPs of Hostaero nameservers
    $ns1_ip = gethostbyname('ns1.hostaero.top');
    $ns2_ip = gethostbyname('ns2.hostaero.top');
    
    // Check if current IP matches either nameserver IP
    return ($currentIP === $ns1_ip || $currentIP === $ns2_ip);
}

// Perform the verification
if (!verifyHostaeroIP()) {
    // Get current IP for display purposes
    $currentIP = $_SERVER['SERVER_ADDR'] ?? gethostbyname(gethostname());
    $ns1_ip = gethostbyname('ns1.hostaero.top');
    $ns2_ip = gethostbyname('ns2.hostaero.top');
    ?>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Hosting Verification Failed</title>
        <style>
            body, html {
                margin: 0;
                padding: 0;
                height: 100%;
                overflow: hidden;
                font-family: 'Arial', sans-serif;
            }
            
            .background-container {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: url('../../assets/images/background.gif') no-repeat center center;
                background-size: cover;
                filter: blur(5px);
                z-index: -1;
            }
            
            .overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.7);
                z-index: 0;
            }
            
            .modal {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 500px;
                max-width: 90%;
                background: #2F3349;
                border-radius: 10px;
                box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
                overflow: hidden;
                z-index: 10;
                animation: fadeIn 0.5s ease-out;
            }
            
            .modal-header {
                background: #FF5722;
                color: white;
                padding: 20px;
                text-align: center;
                font-size: 1.5rem;
                font-weight: bold;
            }
            
            .modal-body {
                padding: 30px;
                text-align: center;
                color: white;
                line-height: 1.6;
            }
            
            .modal-footer {
                padding: 15px;
                text-align: center;
                background: #2F3349;
                display: flex;
                justify-content: center;
                gap: 15px;
            }
            
            .btn {
                padding: 10px 25px;
                border: none;
                border-radius: 5px;
                color: white;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                text-decoration: none;
                display: inline-block;
            }
            
            .btn-primary {
                background: #685DD8;
            }
            
            .btn-primary:hover {
                background: rgb(60, 47, 196);
                transform: translateY(-2px);
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            }
            
            .btn-secondary {
                background: #6c757d;
            }
            
            .btn-secondary:hover {
                background: #5a6268;
                transform: translateY(-2px);
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            }
            
            @keyframes fadeIn {
                from { opacity: 0; transform: translate(-50%, -60%); }
                to { opacity: 1; transform: translate(-50%, -50%); }
            }
            
            .ip-info {
                background: rgba(0,0,0,0.3);
                padding: 10px;
                border-radius: 5px;
                margin: 15px 0;
                font-family: monospace;
            }
        </style>
    </head>
    <body>
        <div class="background-container"></div>
        <div class="overlay"></div>
        
        <div class="modal">
            <div class="modal-header">
                <i class="fas fa-server"></i> Server Verification Failed
            </div>
            <div class="modal-body">
                <p>This system must run on <strong>Hostaero servers</strong>.</p>
                
                <div class="ip-info">
                    <p>Current Server IP: <?php echo htmlspecialchars($currentIP); ?></p>
                    <p>Hostaero NS1 IP: <?php echo htmlspecialchars($ns1_ip); ?></p>
                    <p>Hostaero NS2 IP: <?php echo htmlspecialchars($ns2_ip); ?></p>
                </div>
                
                <p>The server IP must match one of Hostaero's nameserver IPs.</p>
                
                <div class="contact-info">
                    <p>Please deploy on Hostaero servers or contact:</p>
                    <p><a href="https://hostaero.top" style="color: #685DD8; text-decoration: none;" target="_blank">hostaero.top</a></p>
                </div>
            </div>
            <div class="modal-footer">
                <a href="https://hostaero.top" class="btn btn-primary" target="_blank">
                    <i class="fas fa-external-link-alt"></i> Visit Hostaero
                </a>
                <button class="btn btn-secondary" onclick="window.location.href='logout.php'">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </div>
        
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    </body>
    </html>
    <?php
    exit();
}

// Fetch the latest license config (only one record expected)
$stmt = $pdo->prepare("SELECT * FROM license_config ORDER BY updated_at DESC LIMIT 1");
$stmt->execute();
$license = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$license) {
    ?>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>License Not Found</title>
        <style>
            body, html {
                margin: 0;
                padding: 0;
                height: 100%;
                overflow: hidden;
                font-family: 'Arial', sans-serif;
            }
            
            .background-container {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: url('../../assets/images/background.gif') no-repeat center center;
                background-size: cover;
                filter: blur(5px);
                z-index: -1;
            }
            
            .overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.7);
                z-index: 0;
            }
            
            .modal {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 500px;
                max-width: 90%;
                background: #2F3349;
                border-radius: 10px;
                box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
                overflow: hidden;
                z-index: 10;
                animation: fadeIn 0.5s ease-out;
            }
            
            .modal-header {
                background: #FF5722;
                color: white;
                padding: 20px;
                text-align: center;
                font-size: 1.5rem;
                font-weight: bold;
            }
            
            .modal-body {
                padding: 30px;
                text-align: center;
                color: white;
                line-height: 1.6;
            }
            
            .modal-footer {
                padding: 15px;
                text-align: center;
                background: #2F3349;
            }
            
            .btn {
                padding: 10px 25px;
                border: none;
                border-radius: 5px;
                background: #685DD8;
                color: white;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .btn:hover {
                background:rgb(60, 47, 196);
                transform: translateY(-2px);
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            }
            
            @keyframes fadeIn {
                from { opacity: 0; transform: translate(-50%, -60%); }
                to { opacity: 1; transform: translate(-50%, -50%); }
            }
            
            .contact-info {
                margin-top: 20px;
                font-size: 0.9rem;
                color: #ddd;
            }
        </style>
    </head>
    <body>
        <div class="background-container"></div>
        <div class="overlay"></div>
        
        <div class="modal">
            <div class="modal-header">
                <i class="fas fa-key"></i> License Not Found
            </div>
            <div class="modal-body">
                <p>License information not found in the system.</p>
                <p>Please contact the vendor to resolve this issue.</p>
                <div class="contact-info">
                    <p>If you're the system administrator, please check your license configuration.</p>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn" onclick="window.location.href='logout.php'">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </div>
        
        <!-- Optional: Font Awesome for icons -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    </body>
    </html>
    <?php
    exit();
}

// Build the request to the LicenseBox API
$post_data = json_encode([
    "product_id"   => $license['product_id'],
    "license_code" => $license['license_code'],
    "client_name"  => $license['client_name']
]);

$headers = [
    'LB-API-KEY: 1D80E28583A9FE7CE911',
    'LB-URL: ' . (
        isset($_SERVER['HTTP_HOST'])
            ? (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'https' : 'http') . '://' . $_SERVER['HTTP_HOST']
            : 'cli'
    ),
    'LB-IP: ' . ($_SERVER['REMOTE_ADDR'] ?? gethostbyname(gethostname()) ?? '127.0.0.1'),
    'LB-LANG: english',
    'Content-Type: application/json'
];

$ch = curl_init('https://system.wamosync.in/api/verify_license');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
$response = curl_exec($ch);
curl_close($ch);

$result = json_decode($response, true);

// Check validity
if (!$result || !isset($result['status']) || $result['status'] !== true) {
    ?>
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Invalid License</title>
        <style>
            body, html {
                margin: 0;
                padding: 0;
                height: 100%;
                overflow: hidden;
                font-family: 'Arial', sans-serif;
            }
            
            .background-container {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: url('../../assets/images/background.gif') no-repeat center center;
                background-size: cover;
                filter: blur(5px);
                z-index: -1;
            }
            
            .overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.7);
                z-index: 0;
            }
            
            .modal {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 500px;
                max-width: 90%;
                background: #2F3349;
                border-radius: 10px;
                box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
                overflow: hidden;
                z-index: 10;
                animation: fadeIn 0.5s ease-out;
            }
            
            .modal-header {
                background: #FF5722;
                color: white;
                padding: 20px;
                text-align: center;
                font-size: 1.5rem;
                font-weight: bold;
            }
            
            .modal-body {
                padding: 30px;
                text-align: center;
                color: white;
                line-height: 1.6;
            }
            
            .modal-footer {
                padding: 15px;
                text-align: center;
                background: #2F3349;
            }
            
            .btn {
                padding: 10px 25px;
                border: none;
                border-radius: 5px;
                background: #685DD8;
                color: white;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .btn:hover {
                background:rgb(60, 47, 196);
                transform: translateY(-2px);
                box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            }
            
            @keyframes fadeIn {
                from { opacity: 0; transform: translate(-50%, -60%); }
                to { opacity: 1; transform: translate(-50%, -50%); }
            }
            
            .contact-info {
                margin-top: 20px;
                font-size: 0.9rem;
                color: #ddd;
            }
        </style>
    </head>
    <body>
        <div class="background-container"></div>
        <div class="overlay"></div>
        
        <div class="modal">
            <div class="modal-header">
                <i class="fas fa-key"></i> Invalid License
            </div>
            <div class="modal-body">
                <p>The system license is invalid or has expired.</p>
                <p>Please contact the vendor to resolve this issue.</p>
                <div class="contact-info">
                    <p>If you believe this is an error, please contact support with your license details.</p>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn" onclick="window.location.href='logout.php'">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </div>
        
        <!-- Optional: Font Awesome for icons -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    </body>
    </html>
    <?php
    exit();
}

// License is valid, continue normal flow
$stmt = $pdo->query("SELECT code_version FROM site_global_settings WHERE id = 1 LIMIT 1");
$codeVersion = $stmt->fetchColumn();
?>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>