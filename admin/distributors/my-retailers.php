<?php
$code = base64_decode('PD9waHAKcmVxdWlyZSBfX0RJUl9fIC4gJy9zZWN1cml0eS9hdXRoLnBocCc7CnJlcXVpcmVfb25jZSByZWFscGF0aChfX0RJUl9fIC4gJy8uLi8uLi9jb25maWcvZGF0YWJhc2UucGhwJyk7CgovLyBFbnN1cmUgdGhlIGxvZ2dlZC1pbiB1c2VyIGlzIGEgZGlzdHJpYnV0b3IKaWYgKCRfU0VTU0lPTlsndXNlcl90eXBlJ10gIT09ICdkaXN0cmlidXRvcicpIHsKICAgIGhlYWRlcigiTG9jYXRpb246IGRhc2hib2FyZC5waHAiKTsKICAgIGV4aXQ7Cn0KCi8vIEdldCBnbG9iYWwgc2V0dGluZ3MgZm9yIGFjdGl2YXRpb24gZmVlCiRzdG10ID0gJHBkby0+cHJlcGFyZSgiU0VMRUNUIGZlZXMsIGZlZXNfZW5hYmxlZCBGUk9NIHNpdGVfZ2xvYmFsX3NldHRpbmdzIFdIRVJFIGlkID0gMSIpOwokc3RtdC0+ZXhlY3V0ZSgpOwokZ2xvYmFsU2V0dGluZ3MgPSAkc3RtdC0+ZmV0Y2goUERPOjpGRVRDSF9BU1NPQyk7CgokYWN0aXZhdGlvbkZlZSA9ICRnbG9iYWxTZXR0aW5ncyA/IChmbG9hdCkkZ2xvYmFsU2V0dGluZ3NbJ2ZlZXMnXSA6IDAuMDA7CiRmZWVzRW5hYmxlZCA9ICRnbG9iYWxTZXR0aW5ncyA/IChib29sKSRnbG9iYWxTZXR0aW5nc1snZmVlc19lbmFibGVkJ10gOiBmYWxzZTsKCi8vIEdldCBkaXN0cmlidXRvciBpbmZvcm1hdGlvbiBpbmNsdWRpbmcgd2FsbGV0IGJhbGFuY2UKJGRpc3RyaWJ1dG9ySWQgPSAkX1NFU1NJT05bJ3VzZXJfaWQnXTsKJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJTRUxFQ1QgaWQsIHVzZXJuYW1lLCBmdWxsX25hbWUsIGRpc3RyaWJ1dG9yX2NvZGUsIHdhbGxldCBGUk9NIHVzZXJzIFdIRVJFIGlkID0gPyBBTkQgdXNlcl90eXBlID0gJ2Rpc3RyaWJ1dG9yJyBBTkQgc3RhdHVzID0gJ2FjdGl2ZScgQU5EIGlzYmFubmVkID0gJzAnIik7CiRzdG10LT5leGVjdXRlKFskZGlzdHJpYnV0b3JJZF0pOwokZGlzdHJpYnV0b3IgPSAkc3RtdC0+ZmV0Y2goUERPOjpGRVRDSF9BU1NPQyk7CgppZiAoISRkaXN0cmlidXRvcikgewogICAgaGVhZGVyKCJMb2NhdGlvbjogZGFzaGJvYXJkLnBocCIpOwogICAgZXhpdDsKfQoKLy8gUHJvY2VzcyB3YWxsZXQgYWRkaXRpb24gaWYgZm9ybSBpcyBzdWJtaXR0ZWQKaWYgKCRfU0VSVkVSWydSRVFVRVNUX01FVEhPRCddID09PSAnUE9TVCcgJiYgaXNzZXQoJF9QT1NUWydhZGRfd2FsbGV0J10pKSB7CiAgICAkcmV0YWlsZXJJZCA9ICRfUE9TVFsncmV0YWlsZXJfaWQnXTsKICAgICRhbW91bnQgPSAoZmxvYXQpJF9QT1NUWydhbW91bnQnXTsKICAgICRub3RlID0gJF9QT1NUWydub3RlJ10gPz8gJyc7CiAgICAKICAgIC8vIFZhbGlkYXRlIGFtb3VudAogICAgaWYgKCRhbW91bnQgPD0gMCkgewogICAgICAgICRfU0VTU0lPTlsnZXJyb3InXSA9ICJBbW91bnQgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybyI7CiAgICB9IGVsc2VpZiAoJGFtb3VudCA+ICRkaXN0cmlidXRvclsnd2FsbGV0J10pIHsKICAgICAgICAkX1NFU1NJT05bJ2Vycm9yJ10gPSAiWW91IGRvbid0IGhhdmUgc3VmZmljaWVudCBiYWxhbmNlIGluIHlvdXIgd2FsbGV0IjsKICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJHBkby0+YmVnaW5UcmFuc2FjdGlvbigpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gRGVkdWN0IGZyb20gZGlzdHJpYnV0b3IncyB3YWxsZXQKICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJVUERBVEUgdXNlcnMgU0VUIHdhbGxldCA9IHdhbGxldCAtID8gV0hFUkUgaWQgPSA/Iik7CiAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskYW1vdW50LCAkZGlzdHJpYnV0b3JJZF0pOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gQWRkIHRvIHJldGFpbGVyJ3Mgd2FsbGV0CiAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiVVBEQVRFIHVzZXJzIFNFVCB3YWxsZXQgPSB3YWxsZXQgKyA/IFdIRVJFIGlkID0gPyIpOwogICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbJGFtb3VudCwgJHJldGFpbGVySWRdKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgY3JlZGl0IHRyYW5zYWN0aW9uIGZvciByZXRhaWxlcgogICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIklOU0VSVCBJTlRPIHRyYW5zYWN0aW9uc19saXN0ICh1c2VyX2lkLCBhbW91bnQsIHR5cGUsIGRlc2NyaXB0aW9uLCByZWZlcmVuY2VfaWQsIHNlcnZpY2VfdHlwZSkgVkFMVUVTICg/LCA/LCAnY3JlZGl0JywgPywgPywgJ3dhbGxldC10cmFuc2ZlcicpIik7CiAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFsKICAgICAgICAgICAgICAgICRyZXRhaWxlcklkLCAKICAgICAgICAgICAgICAgICRhbW91bnQsIAogICAgICAgICAgICAgICAgJG5vdGUgPzogIldhbGxldCBjcmVkaXQgZnJvbSBkaXN0cmlidXRvciIsCiAgICAgICAgICAgICAgICAkZGlzdHJpYnV0b3JJZAogICAgICAgICAgICBdKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgZGViaXQgdHJhbnNhY3Rpb24gZm9yIGRpc3RyaWJ1dG9yCiAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiSU5TRVJUIElOVE8gdHJhbnNhY3Rpb25zX2xpc3QgKHVzZXJfaWQsIGFtb3VudCwgdHlwZSwgZGVzY3JpcHRpb24sIHJlZmVyZW5jZV9pZCwgc2VydmljZV90eXBlKSBWQUxVRVMgKD8sID8sICdkZWJpdCcsID8sID8sICd3YWxsZXQtdHJhbnNmZXInKSIpOwogICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbCiAgICAgICAgICAgICAgICAkZGlzdHJpYnV0b3JJZCwgCiAgICAgICAgICAgICAgICAkYW1vdW50LCAKICAgICAgICAgICAgICAgICRub3RlID86ICJXYWxsZXQgdHJhbnNmZXIgdG8gcmV0YWlsZXIgSUQ6ICRyZXRhaWxlcklkIiwgCiAgICAgICAgICAgICAgICAkcmV0YWlsZXJJZAogICAgICAgICAgICBdKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICRwZG8tPmNvbW1pdCgpOwogICAgICAgICAgICAkX1NFU1NJT05bJ3N1Y2Nlc3MnXSA9ICLigrkkYW1vdW50IHN1Y2Nlc3NmdWxseSBhZGRlZCB0byByZXRhaWxlcidzIHdhbGxldCI7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBSZWZyZXNoIGRhdGEKICAgICAgICAgICAgaGVhZGVyKCJMb2NhdGlvbjogbXktcmV0YWlsZXJzLnBocCIpOwogICAgICAgICAgICBleGl0OwogICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiAkZSkgewogICAgICAgICAgICAkcGRvLT5yb2xsQmFjaygpOwogICAgICAgICAgICAkX1NFU1NJT05bJ2Vycm9yJ10gPSAiVHJhbnNhY3Rpb24gZmFpbGVkOiAiIC4gJGUtPmdldE1lc3NhZ2UoKTsKICAgICAgICB9CiAgICB9Cn0KCi8vIFByb2Nlc3MgYWN0aXZhdGlvbiBmZWUgcGF5bWVudCBpZiBmb3JtIGlzIHN1Ym1pdHRlZAppZiAoJF9TRVJWRVJbJ1JFUVVFU1RfTUVUSE9EJ10gPT09ICdQT1NUJyAmJiBpc3NldCgkX1BPU1RbJ3BheV9hY3RpdmF0aW9uX2ZlZSddKSkgewogICAgJHJldGFpbGVySWQgPSAkX1BPU1RbJ3JldGFpbGVyX2lkJ107CiAgICAKICAgIC8vIFZhbGlkYXRlIGFjdGl2YXRpb24gZmVlCiAgICBpZiAoJGFjdGl2YXRpb25GZWUgPD0gMCkgewogICAgICAgICRfU0VTU0lPTlsnZXJyb3InXSA9ICJBY3RpdmF0aW9uIGZlZSBpcyBub3Qgc2V0IG9yIGludmFsaWQiOwogICAgfSBlbHNlaWYgKCRhY3RpdmF0aW9uRmVlID4gJGRpc3RyaWJ1dG9yWyd3YWxsZXQnXSkgewogICAgICAgICRfU0VTU0lPTlsnZXJyb3InXSA9ICJZb3UgZG9uJ3QgaGF2ZSBzdWZmaWNpZW50IGJhbGFuY2UgdG8gcGF5IHRoZSBhY3RpdmF0aW9uIGZlZSI7CiAgICB9IGVsc2UgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgICRwZG8tPmJlZ2luVHJhbnNhY3Rpb24oKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIENoZWNrIGlmIHJldGFpbGVyIGFscmVhZHkgcGFpZCBmZWVzCiAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiU0VMRUNUIGZlZXNfcGFpZCBGUk9NIHVzZXJzIFdIRVJFIGlkID0gPyIpOwogICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbJHJldGFpbGVySWRdKTsKICAgICAgICAgICAgJHJldGFpbGVyID0gJHN0bXQtPmZldGNoKFBETzo6RkVUQ0hfQVNTT0MpOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKCRyZXRhaWxlciAmJiAkcmV0YWlsZXJbJ2ZlZXNfcGFpZCddID09IDEpIHsKICAgICAgICAgICAgICAgICRfU0VTU0lPTlsnZXJyb3InXSA9ICJBY3RpdmF0aW9uIGZlZSBhbHJlYWR5IHBhaWQgZm9yIHRoaXMgcmV0YWlsZXIiOwogICAgICAgICAgICAgICAgaGVhZGVyKCJMb2NhdGlvbjogbXktcmV0YWlsZXJzLnBocCIpOwogICAgICAgICAgICAgICAgZXhpdDsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgLy8gRGVkdWN0IGFjdGl2YXRpb24gZmVlIGZyb20gZGlzdHJpYnV0b3IncyB3YWxsZXQKICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJVUERBVEUgdXNlcnMgU0VUIHdhbGxldCA9IHdhbGxldCAtID8gV0hFUkUgaWQgPSA/Iik7CiAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskYWN0aXZhdGlvbkZlZSwgJGRpc3RyaWJ1dG9ySWRdKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIE1hcmsgcmV0YWlsZXIgYXMgZmVlIHBhaWQKICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJVUERBVEUgdXNlcnMgU0VUIGZlZXNfcGFpZCA9IDEgV0hFUkUgaWQgPSA/Iik7CiAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskcmV0YWlsZXJJZF0pOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSBhY3RpdmF0aW9uIGZlZSB0cmFuc2FjdGlvbgogICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIklOU0VSVCBJTlRPIHRyYW5zYWN0aW9uc19saXN0ICh1c2VyX2lkLCBhbW91bnQsIHR5cGUsIGRlc2NyaXB0aW9uLCByZWZlcmVuY2VfaWQsIHNlcnZpY2VfdHlwZSkgVkFMVUVTICg/LCA/LCAnZGViaXQnLCA/LCA/LCAnYWN0aXZhdGlvbi1mZWUnKSIpOwogICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbCiAgICAgICAgICAgICAgICAkZGlzdHJpYnV0b3JJZCwgCiAgICAgICAgICAgICAgICAkYWN0aXZhdGlvbkZlZSwgCiAgICAgICAgICAgICAgICAiQWN0aXZhdGlvbiBmZWUgcGF5bWVudCBmb3IgcmV0YWlsZXIgSUQ6ICRyZXRhaWxlcklkIiwgCiAgICAgICAgICAgICAgICAkcmV0YWlsZXJJZAogICAgICAgICAgICBdKTsKICAgICAgICAgICAgCiAgICAgICAgICAgICRwZG8tPmNvbW1pdCgpOwogICAgICAgICAgICAkX1NFU1NJT05bJ3N1Y2Nlc3MnXSA9ICJBY3RpdmF0aW9uIGZlZSBvZiDigrkkYWN0aXZhdGlvbkZlZSBwYWlkIHN1Y2Nlc3NmdWxseS4gUmV0YWlsZXIgaXMgbm93IGZ1bGx5IGFjdGl2YXRlZC4iOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gUmVmcmVzaCBkYXRhCiAgICAgICAgICAgIGhlYWRlcigiTG9jYXRpb246IG15LXJldGFpbGVycy5waHAiKTsKICAgICAgICAgICAgZXhpdDsKICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gJGUpIHsKICAgICAgICAgICAgJHBkby0+cm9sbEJhY2soKTsKICAgICAgICAgICAgJF9TRVNTSU9OWydlcnJvciddID0gIlRyYW5zYWN0aW9uIGZhaWxlZDogIiAuICRlLT5nZXRNZXNzYWdlKCk7CiAgICAgICAgfQogICAgfQp9CgovLyBHZXQgcmV0YWlsZXIgcmVjb3JkcyBmb3IgdGhpcyBkaXN0cmlidXRvcgokc3RtdCA9ICRwZG8tPnByZXBhcmUoIgogICAgU0VMRUNUIGlkLCB1c2VybmFtZSwgZW1haWwsIGZ1bGxfbmFtZSwgd2FsbGV0LCBib251c193YWxsZXQsIHN0YXR1cywgaXNiYW5uZWQsIGZlZXNfcGFpZCwgbGFzdF9sb2dpbiwgY3JlYXRlZF9hdAogICAgRlJPTSB1c2VycyAKICAgIFdIRVJFIHVzZXJfdHlwZSA9ICdyZXRhaWxlcicgQU5EIGRpc3RyaWJ1dG9yX2lkID0gPyAKICAgIE9SREVSIEJZIGNyZWF0ZWRfYXQgREVTQwoiKTsKJHN0bXQtPmV4ZWN1dGUoWyRkaXN0cmlidXRvcklkXSk7CiRyZXRhaWxlcnMgPSAkc3RtdC0+ZmV0Y2hBbGwoUERPOjpGRVRDSF9BU1NPQyk7Cj8+Cgo8IWRvY3R5cGUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iIGNsYXNzPSJsYXlvdXQtbmF2YmFyLWZpeGVkIGxheW91dC1tZW51LWZpeGVkIGxheW91dC1jb21wYWN0IiBkaXI9Imx0ciIgZGF0YS1za2luPSJkZWZhdWx0IiBkYXRhLWFzc2V0cy1wYXRoPSIuLi8uLi9hc3NldHMvIiBkYXRhLXRlbXBsYXRlPSJ2ZXJ0aWNhbC1tZW51LXRlbXBsYXRlIiBkYXRhLWJzLXRoZW1lPSJsaWdodCI+CiAgPD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvaGVhZC5waHAnKTsgPz4KCiAgPGJvZHk+CiAgICA8IS0tIExheW91dCB3cmFwcGVyIC0tPgogICAgPGRpdiBjbGFzcz0ibGF5b3V0LXdyYXBwZXIgbGF5b3V0LWNvbnRlbnQtbmF2YmFyIj4KICAgICAgPGRpdiBjbGFzcz0ibGF5b3V0LWNvbnRhaW5lciI+CiAgICAgICAgPCEtLSBNZW51IC0tPgogICAgICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL3NpZGViYXIucGhwJyk7ID8+CgogICAgICAgIDxkaXYgY2xhc3M9Im1lbnUtbW9iaWxlLXRvZ2dsZXIgZC14bC1ub25lIHJvdW5kZWQtMSI+CiAgICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0ibGF5b3V0LW1lbnUtdG9nZ2xlIG1lbnUtbGluayB0ZXh0LWxhcmdlIHRleHQtYmctc2Vjb25kYXJ5IHAtMiByb3VuZGVkLTEiPgogICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLW1lbnUgaWNvbi1iYXNlIj48L2k+CiAgICAgICAgICAgIDxpIGNsYXNzPSJ0aSB0YWJsZXItY2hldnJvbi1yaWdodCBpY29uLWJhc2UiPjwvaT4KICAgICAgICAgIDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIC8gTWVudSAtLT4KCiAgICAgICAgPCEtLSBMYXlvdXQgY29udGFpbmVyIC0tPgogICAgICAgIDxkaXYgY2xhc3M9ImxheW91dC1wYWdlIj4KICAgICAgICAgIDwhLS0gTmF2YmFyIC0tPgogICAgICAgICAgPD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvbmF2YmFyLnBocCcpOyA/PgoKICAgICAgICAgIDwhLS0gLyBOYXZiYXIgLS0+CgogICAgICAgICAgPCEtLSBDb250ZW50IHdyYXBwZXIgLS0+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXdyYXBwZXIiPgogICAgICAgICAgICA8IS0tIENvbnRlbnQgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci14eGwgZmxleC1ncm93LTEgY29udGFpbmVyLXAteSI+CiAgICAgICAgICAgICAgPD9waHAgaWYgKGlzc2V0KCRfU0VTU0lPTlsnZXJyb3InXSkpOiA/PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZGFuZ2VyIGFsZXJ0LWRpc21pc3NpYmxlIGZhZGUgc2hvdyIgcm9sZT0iYWxlcnQiPgogICAgICAgICAgICAgICAgICA8Pz0gJF9TRVNTSU9OWydlcnJvciddID8+CiAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9ImFsZXJ0IiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDw/cGhwIHVuc2V0KCRfU0VTU0lPTlsnZXJyb3InXSk7ID8+CiAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgPD9waHAgaWYgKGlzc2V0KCRfU0VTU0lPTlsnc3VjY2VzcyddKSk6ID8+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1zdWNjZXNzIGFsZXJ0LWRpc21pc3NpYmxlIGZhZGUgc2hvdyIgcm9sZT0iYWxlcnQiPgogICAgICAgICAgICAgICAgICA8Pz0gJF9TRVNTSU9OWydzdWNjZXNzJ10gPz4KICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4tY2xvc2UiIGRhdGEtYnMtZGlzbWlzcz0iYWxlcnQiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPD9waHAgdW5zZXQoJF9TRVNTSU9OWydzdWNjZXNzJ10pOyA/PgogICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDwhLS0gUmV0YWlsZXJzIFRhYmxlIC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIgZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibWItMCI+TXkgUmV0YWlsZXJzPC9oNT4KICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWUtMyI+WW91ciBXYWxsZXQ6IOKCuTw/PSBudW1iZXJfZm9ybWF0KCRkaXN0cmlidXRvclsnd2FsbGV0J10sIDIpID8+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkZmVlc0VuYWJsZWQpOiA/PgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1lLTMiPkFjdGl2YXRpb24gRmVlOiDigrk8Pz0gbnVtYmVyX2Zvcm1hdCgkYWN0aXZhdGlvbkZlZSwgMikgPz48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iY3JlYXRlLXJldGFpbGVyLnBocCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSI+CiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLXVzZXItcGx1cyBtZS0xIj48L2k+IENyZWF0ZSBOZXcgUmV0YWlsZXIKICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtZGF0YXRhYmxlIj4KICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJkdC1yZXNwb25zaXZlIHRhYmxlIHRhYmxlLWJvcmRlcmVkIiBpZD0icmV0YWlsZXJzVGFibGUiPgogICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNMIE5vPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlVzZXJuYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkZ1bGwgTmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5XYWxsZXQgQmFsYW5jZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BY3RpdmF0aW9uIFN0YXR1czwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TdGF0dXM8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+TGFzdCBMb2dpbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BY3Rpb25zPC90aD4KICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoICgkcmV0YWlsZXJzIGFzICRpbmRleCA9PiAkcmV0YWlsZXIpOiA/PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkaW5kZXggKyAxID8+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Pz0gaHRtbHNwZWNpYWxjaGFycygkcmV0YWlsZXJbJ3VzZXJuYW1lJ10pID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJHJldGFpbGVyWydmZWVzX3BhaWQnXSA9PSAwICYmICRmZWVzRW5hYmxlZCk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSBiZy1sYWJlbC13YXJuaW5nIG1zLTEiIHRpdGxlPSJBY3RpdmF0aW9uIGZlZSBwZW5kaW5nIj5QZW5kaW5nPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZWxzZWlmICgkcmV0YWlsZXJbJ2ZlZXNfcGFpZCddID09IDEpOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2UgYmctbGFiZWwtc3VjY2VzcyBtcy0xIiB0aXRsZT0iQWN0aXZhdGlvbiBmZWUgcGFpZCI+QWN0aXZlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89IGh0bWxzcGVjaWFsY2hhcnMoJHJldGFpbGVyWydmdWxsX25hbWUnXSkgPz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD7igrk8Pz0gbnVtYmVyX2Zvcm1hdCgkcmV0YWlsZXJbJ3dhbGxldCddLCAyKSA/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRyZXRhaWxlclsnZmVlc19wYWlkJ10gPT0gMCk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSBiZy1sYWJlbC13YXJuaW5nIj5GZWUgUGVuZGluZzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVsc2U6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSBiZy1sYWJlbC1zdWNjZXNzIj5GZWUgUGFpZDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0dXNDbGFzcyA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXR1c1RleHQgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRyZXRhaWxlclsnaXNiYW5uZWQnXSA9PT0gJzEnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0dXNDbGFzcyA9ICdiZy1sYWJlbC1kYW5nZXInOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzVGV4dCA9ICdCYW5uZWQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzdHJ0b2xvd2VyKCRyZXRhaWxlclsnc3RhdHVzJ10pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWN0aXZlJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0dXNDbGFzcyA9ICdiZy1sYWJlbC1zdWNjZXNzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0dXNUZXh0ID0gJ0FjdGl2ZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbmFjdGl2ZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzQ2xhc3MgPSAnYmctbGFiZWwtd2FybmluZyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzVGV4dCA9ICdJbmFjdGl2ZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXR1c0NsYXNzID0gJ2JnLWxhYmVsLXNlY29uZGFyeSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzVGV4dCA9IHVjZmlyc3QoJHJldGFpbGVyWydzdGF0dXMnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2UgPD89ICRzdGF0dXNDbGFzcyA/PiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/PSAkc3RhdHVzVGV4dCA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSAkcmV0YWlsZXJbJ2xhc3RfbG9naW4nXSA/IGRhdGUoJ2QgTSBZJywgc3RydG90aW1lKCRyZXRhaWxlclsnbGFzdF9sb2dpbiddKSkgOiAnTmV2ZXInID8+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXggZ2FwLTIganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gVmlldyBEZXRhaWxzIEJ1dHRvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4taWNvbiBidG4tcHJpbWFyeSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1icy10b2dnbGU9Im1vZGFsIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWJzLXRhcmdldD0iI3ZpZXdSZXRhaWxlck1vZGFsPD89ICRyZXRhaWxlclsnaWQnXSA/PiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlZpZXcgRGV0YWlscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1leWUiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEVkaXQgQnV0dG9uIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXNtIGJ0bi1pY29uIGJ0bi1pbmZvIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWJzLXRvZ2dsZT0ibW9kYWwiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYnMtdGFyZ2V0PSIjZWRpdFJldGFpbGVyTW9kYWw8Pz0gJHJldGFpbGVyWydpZCddID8+IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iRWRpdCBSZXRhaWxlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1lZGl0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBBZGQgV2FsbGV0IEJ1dHRvbiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4taWNvbiBidG4tc3VjY2VzcyIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1icy10b2dnbGU9Im1vZGFsIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWJzLXRhcmdldD0iI2FkZFdhbGxldE1vZGFsPD89ICRyZXRhaWxlclsnaWQnXSA/PiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkFkZCB0byBXYWxsZXQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ0aSB0YWJsZXItd2FsbGV0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQYXkgQWN0aXZhdGlvbiBGZWUgQnV0dG9uIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGZlZXNFbmFibGVkICYmICRyZXRhaWxlclsnZmVlc19wYWlkJ10gPT0gMCAmJiAkcmV0YWlsZXJbJ3N0YXR1cyddID09PSAnYWN0aXZlJyAmJiAkcmV0YWlsZXJbJ2lzYmFubmVkJ10gPT09ICcwJyk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4taWNvbiBidG4td2FybmluZyIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWJzLXRvZ2dsZT0ibW9kYWwiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1icy10YXJnZXQ9IiNhY3RpdmF0ZUZlZU1vZGFsPD89ICRyZXRhaWxlclsnaWQnXSA/PiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iUGF5IEFjdGl2YXRpb24gRmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ0aSB0YWJsZXItY29pbiI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gU3RhdHVzIFRvZ2dsZSBCdXR0b24gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkcmV0YWlsZXJbJ3N0YXR1cyddID09PSAnYWN0aXZlJyk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4taWNvbiBidG4tZGFuZ2VyIiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYnMtdG9nZ2xlPSJtb2RhbCIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWJzLXRhcmdldD0iI2RlYWN0aXZhdGVSZXRhaWxlck1vZGFsPD89ICRyZXRhaWxlclsnaWQnXSA/PiIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT0iRGVhY3RpdmF0ZSBSZXRhaWxlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLXVzZXItb2ZmIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVsc2U6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4taWNvbiBidG4tc3VjY2VzcyIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWJzLXRvZ2dsZT0ibW9kYWwiIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1icy10YXJnZXQ9IiNhY3RpdmF0ZVJldGFpbGVyTW9kYWw8Pz0gJHJldGFpbGVyWydpZCddID8+IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPSJBY3RpdmF0ZSBSZXRhaWxlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLXVzZXItY2hlY2siPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kZm9yZWFjaDsgPz4KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIC8gQ29udGVudCAtLT4KCiAgICAgICAgICAgIDwhLS0gRm9vdGVyIC0tPgogICAgICAgICAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9mb290ZXIucGhwJyk7ID8+CiAgICAgICAgICAgIDwhLS0gLyBGb290ZXIgLS0+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LWJhY2tkcm9wIGZhZGUiPjwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8IS0tIENvbnRlbnQgd3JhcHBlciAtLT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIC8gTGF5b3V0IHBhZ2UgLS0+CiAgICAgIDwvZGl2PgoKICAgICAgPCEtLSBPdmVybGF5IC0tPgogICAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtb3ZlcmxheSBsYXlvdXQtbWVudS10b2dnbGUiPjwvZGl2PgoKICAgICAgPCEtLSBEcmFnIFRhcmdldCBBcmVhIFRvIFNsaWRlSW4gTWVudSBPbiBTbWFsbCBTY3JlZW5zIC0tPgogICAgICA8ZGl2IGNsYXNzPSJkcmFnLXRhcmdldCI+PC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gLyBMYXlvdXQgd3JhcHBlciAtLT4KCiAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9zY3JpcHQucGhwJyk7ID8+CiAgICAKICAgIDwhLS0gQmVnaW4gTW9kYWxzIGZvciBlYWNoIHJldGFpbGVyIC0tPgogICAgPD9waHAgZm9yZWFjaCAoJHJldGFpbGVycyBhcyAkcmV0YWlsZXIpOiA/PgogICAgICA8IS0tIFZpZXcgUmV0YWlsZXIgTW9kYWwgLS0+CiAgICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJ2aWV3UmV0YWlsZXJNb2RhbDw/PSAkcmV0YWlsZXJbJ2lkJ10gPz4iIHRhYmluZGV4PSItMSIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtbGciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUiPlJldGFpbGVyIERldGFpbHM8L2g1PgogICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9ImZ3LXNlbWlib2xkIj5CYXNpYyBJbmZvcm1hdGlvbjwvaDY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCBmdy1zZW1pYm9sZCI+VXNlcm5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxwPjw/PSBodG1sc3BlY2lhbGNoYXJzKCRyZXRhaWxlclsndXNlcm5hbWUnXSkgPz48L3A+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwgZnctc2VtaWJvbGQiPkZ1bGwgTmFtZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPHA+PD89IGh0bWxzcGVjaWFsY2hhcnMoJHJldGFpbGVyWydmdWxsX25hbWUnXSkgPz48L3A+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwgZnctc2VtaWJvbGQiPkVtYWlsPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8cD48Pz0gaHRtbHNwZWNpYWxjaGFycygkcmV0YWlsZXJbJ2VtYWlsJ10pID8+PC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9ImZ3LXNlbWlib2xkIj5GaW5hbmNpYWwgSW5mb3JtYXRpb248L2g2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwgZnctc2VtaWJvbGQiPk1haW4gV2FsbGV0IEJhbGFuY2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxwPuKCuSA8Pz0gbnVtYmVyX2Zvcm1hdCgkcmV0YWlsZXJbJ3dhbGxldCddLCAyKSA/PjwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCBmdy1zZW1pYm9sZCI+Qm9udXMgV2FsbGV0IEJhbGFuY2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxwPuKCuSA8Pz0gbnVtYmVyX2Zvcm1hdCgkcmV0YWlsZXJbJ2JvbnVzX3dhbGxldCddLCAyKSA/PjwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCBmdy1zZW1pYm9sZCI+VG90YWwgQmFsYW5jZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPHA+4oK5IDw/PSBudW1iZXJfZm9ybWF0KCRyZXRhaWxlclsnd2FsbGV0J10gKyAkcmV0YWlsZXJbJ2JvbnVzX3dhbGxldCddLCAyKSA/PjwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCBmdy1zZW1pYm9sZCI+QWN0aXZhdGlvbiBTdGF0dXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRyZXRhaWxlclsnZmVlc19wYWlkJ10gPT0gMCk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSBiZy1sYWJlbC13YXJuaW5nIj5GZWUgUGVuZGluZzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVsc2U6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSBiZy1sYWJlbC1zdWNjZXNzIj5GZWUgUGFpZDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbXQtMyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iZnctc2VtaWJvbGQiPlN0YXR1cyBJbmZvcm1hdGlvbjwvaDY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCBmdy1zZW1pYm9sZCI+QWNjb3VudCBTdGF0dXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICAgICAgPD9waHAKICAgICAgICAgICAgICAgICAgICAgIGlmICgkcmV0YWlsZXJbJ2lzYmFubmVkJ10gPT09ICcxJykgewogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8c3BhbiBjbGFzcz0iYmFkZ2UgYmctbGFiZWwtZGFuZ2VyIj5CYW5uZWQ8L3NwYW4+JzsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RydG9sb3dlcigkcmV0YWlsZXJbJ3N0YXR1cyddKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FjdGl2ZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8c3BhbiBjbGFzcz0iYmFkZ2UgYmctbGFiZWwtc3VjY2VzcyI+QWN0aXZlPC9zcGFuPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbmFjdGl2ZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8c3BhbiBjbGFzcz0iYmFkZ2UgYmctbGFiZWwtd2FybmluZyI+SW5hY3RpdmU8L3NwYW4+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlY2hvICc8c3BhbiBjbGFzcz0iYmFkZ2UgYmctbGFiZWwtc2Vjb25kYXJ5Ij4nIC4gdWNmaXJzdCgkcmV0YWlsZXJbJ3N0YXR1cyddKSAuICc8L3NwYW4+JzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgPz4KICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwgZnctc2VtaWJvbGQiPkNyZWF0ZWQgT248L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxwPjw/PSBkYXRlKCdGIGQsIFknLCBzdHJ0b3RpbWUoJHJldGFpbGVyWydjcmVhdGVkX2F0J10pKSA/PjwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCBmdy1zZW1pYm9sZCI+TGFzdCBMb2dpbjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPHA+PD89ICRyZXRhaWxlclsnbGFzdF9sb2dpbiddID8gZGF0ZSgnRiBkLCBZJywgc3RydG90aW1lKCRyZXRhaWxlclsnbGFzdF9sb2dpbiddKSkgOiAnTmV2ZXInID8+PC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9ImZ3LXNlbWlib2xkIj5EaXN0cmlidXRvciBJbmZvcm1hdGlvbjwvaDY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCBmdy1zZW1pYm9sZCI+RGlzdHJpYnV0b3I8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxwPjw/PSBodG1sc3BlY2lhbGNoYXJzKCRkaXN0cmlidXRvclsndXNlcm5hbWUnXSAuICcgLSAnIC4gJGRpc3RyaWJ1dG9yWydmdWxsX25hbWUnXSkgPz48L3A+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwgZnctc2VtaWJvbGQiPkRpc3RyaWJ1dG9yIENvZGU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxwPjw/PSBodG1sc3BlY2lhbGNoYXJzKCRkaXN0cmlidXRvclsnZGlzdHJpYnV0b3JfY29kZSddKSA/PjwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkZmVlc0VuYWJsZWQpOiA/PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWxhYmVsIGZ3LXNlbWlib2xkIj5BY3RpdmF0aW9uIEZlZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICA8cD7igrkgPD89IG51bWJlcl9mb3JtYXQoJGFjdGl2YXRpb25GZWUsIDIpID8+PC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkiIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiPkNsb3NlPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICAKICAgICAgPCEtLSBFZGl0IFJldGFpbGVyIE1vZGFsIC0tPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iZWRpdFJldGFpbGVyTW9kYWw8Pz0gJHJldGFpbGVyWydpZCddID8+IiB0YWJpbmRleD0iLTEiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIj5FZGl0IFJldGFpbGVyPC9oNT4KICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0bi1jbG9zZSIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSJ1cGRhdGUtcmV0YWlsZXIucGhwIiBtZXRob2Q9InBvc3QiPgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJldGFpbGVyX2lkIiB2YWx1ZT0iPD89ICRyZXRhaWxlclsnaWQnXSA/PiI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWxhYmVsIj5GdWxsIE5hbWUgPHNwYW4gY2xhc3M9InRleHQtZGFuZ2VyIj4qPC9zcGFuPjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9ImZ1bGxfbmFtZSIgdmFsdWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRyZXRhaWxlclsnZnVsbF9uYW1lJ10pID8+IiByZXF1aXJlZD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPkVtYWlsIDxzcGFuIGNsYXNzPSJ0ZXh0LWRhbmdlciI+Kjwvc3Bhbj48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJlbWFpbCIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iZW1haWwiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkcmV0YWlsZXJbJ2VtYWlsJ10pID8+IiByZXF1aXJlZD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPlN0YXR1czwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1zZWxlY3QiIG5hbWU9InN0YXR1cyI+CiAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJhY3RpdmUiIDw/PSBzdHJ0b2xvd2VyKCRyZXRhaWxlclsnc3RhdHVzJ10pID09PSAnYWN0aXZlJyA/ICdzZWxlY3RlZCcgOiAnJyA/Pj5BY3RpdmU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImluYWN0aXZlIiA8Pz0gc3RydG9sb3dlcigkcmV0YWlsZXJbJ3N0YXR1cyddKSA9PT0gJ2luYWN0aXZlJyA/ICdzZWxlY3RlZCcgOiAnJyA/Pj5JbmFjdGl2ZTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIG1iLTMiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCI+TmV3IFBhc3N3b3JkIChsZWF2ZSBibGFuayB0byBrZWVwIGN1cnJlbnQpPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5hbWU9Im5ld19wYXNzd29yZCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS10ZXh0Ij5NaW5pbXVtIDYgY2hhcmFjdGVycy4gTGVhdmUgZW1wdHkgdG8ga2VlcCB0aGUgY3VycmVudCBwYXNzd29yZC48L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIj5DYW5jZWw8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij5TYXZlIENoYW5nZXM8L2J1dHRvbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICAKICAgICAgPCEtLSBBZGQgV2FsbGV0IE1vZGFsIC0tPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iYWRkV2FsbGV0TW9kYWw8Pz0gJHJldGFpbGVyWydpZCddID8+IiB0YWJpbmRleD0iLTEiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIj5BZGQgdG8gUmV0YWlsZXIgV2FsbGV0PC9oNT4KICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0bi1jbG9zZSIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXRhaWxlcl9pZCIgdmFsdWU9Ijw/PSAkcmV0YWlsZXJbJ2lkJ10gPz4iPgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFkZF93YWxsZXQiIHZhbHVlPSIxIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPlJldGFpbGVyPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImZvcm0tY29udHJvbC1zdGF0aWMiPjw/PSBodG1sc3BlY2lhbGNoYXJzKCRyZXRhaWxlclsndXNlcm5hbWUnXSAuICcgLSAnIC4gJHJldGFpbGVyWydmdWxsX25hbWUnXSkgPz48L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPkN1cnJlbnQgQmFsYW5jZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJmb3JtLWNvbnRyb2wtc3RhdGljIj7igrk8Pz0gbnVtYmVyX2Zvcm1hdCgkcmV0YWlsZXJbJ3dhbGxldCddLCAyKSA/PjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCI+QW1vdW50IHRvIEFkZCA8c3BhbiBjbGFzcz0idGV4dC1kYW5nZXIiPio8L3NwYW4+PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmFtZT0iYW1vdW50IiBtaW49IjAuMDEiIHN0ZXA9IjAuMDEiIG1heD0iPD89ICRkaXN0cmlidXRvclsnd2FsbGV0J10gPz4iIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXRleHQiPllvdXIgYXZhaWxhYmxlIGJhbGFuY2U6IOKCuTw/PSBudW1iZXJfZm9ybWF0KCRkaXN0cmlidXRvclsnd2FsbGV0J10sIDIpID8+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPk5vdGUgKE9wdGlvbmFsKTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJub3RlIiByb3dzPSIyIj48L3RleHRhcmVhPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCI+Q2FuY2VsPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSI+QWRkIHRvIFdhbGxldDwvYnV0dG9uPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIAogICAgICA8IS0tIFBheSBBY3RpdmF0aW9uIEZlZSBNb2RhbCAtLT4KICAgICAgPD9waHAgaWYgKCRmZWVzRW5hYmxlZCAmJiAkcmV0YWlsZXJbJ2ZlZXNfcGFpZCddID09IDApOiA/PgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0iYWN0aXZhdGVGZWVNb2RhbDw/PSAkcmV0YWlsZXJbJ2lkJ10gPz4iIHRhYmluZGV4PSItMSIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQiIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUiPlBheSBBY3RpdmF0aW9uIEZlZTwvaDU+CiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4tY2xvc2UiIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icmV0YWlsZXJfaWQiIHZhbHVlPSI8Pz0gJHJldGFpbGVyWydpZCddID8+Ij4KICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwYXlfYWN0aXZhdGlvbl9mZWUiIHZhbHVlPSIxIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPlJldGFpbGVyPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImZvcm0tY29udHJvbC1zdGF0aWMiPjw/PSBodG1sc3BlY2lhbGNoYXJzKCRyZXRhaWxlclsndXNlcm5hbWUnXSAuICcgLSAnIC4gJHJldGFpbGVyWydmdWxsX25hbWUnXSkgPz48L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPkFjdGl2YXRpb24gRmVlPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImZvcm0tY29udHJvbC1zdGF0aWMiPuKCuTw/PSBudW1iZXJfZm9ybWF0KCRhY3RpdmF0aW9uRmVlLCAyKSA/PjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMyI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1sYWJlbCI+WW91ciBDdXJyZW50IEJhbGFuY2U8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZm9ybS1jb250cm9sLXN0YXRpYyI+4oK5PD89IG51bWJlcl9mb3JtYXQoJGRpc3RyaWJ1dG9yWyd3YWxsZXQnXSwgMikgPz48L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkZGlzdHJpYnV0b3JbJ3dhbGxldCddIDwgJGFjdGl2YXRpb25GZWUpOiA/PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIiPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ0aSB0YWJsZXItYWxlcnQtY2lyY2xlIG1lLTEiPjwvaT4KICAgICAgICAgICAgICAgICAgICBJbnN1ZmZpY2llbnQgYmFsYW5jZS4gWW91IG5lZWQg4oK5PD89IG51bWJlcl9mb3JtYXQoJGFjdGl2YXRpb25GZWUgLSAkZGlzdHJpYnV0b3JbJ3dhbGxldCddLCAyKSA/PiBtb3JlIHRvIGFjdGl2YXRlIHRoaXMgcmV0YWlsZXIuCiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPD9waHAgZWxzZTogPz4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1pbmZvLWNpcmNsZSBtZS0xIj48L2k+CiAgICAgICAgICAgICAgICAgICAgUGF5aW5nIHRoZSBhY3RpdmF0aW9uIGZlZSB3aWxsIGZ1bGx5IGFjdGl2YXRlIHRoaXMgcmV0YWlsZXIgYWNjb3VudC4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIj5DYW5jZWw8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDw/cGhwIGlmICgkZGlzdHJpYnV0b3JbJ3dhbGxldCddID49ICRhY3RpdmF0aW9uRmVlKTogPz4KICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLXdhcm5pbmciPlBheSBBY3RpdmF0aW9uIEZlZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPD9waHAgZWxzZTogPz4KICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4gYnRuLXdhcm5pbmciIGRpc2FibGVkPkluc3VmZmljaWVudCBCYWxhbmNlPC9idXR0b24+CiAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgCiAgICAgIDwhLS0gRGVhY3RpdmF0ZSBSZXRhaWxlciBNb2RhbCAtLT4KICAgICAgPD9waHAgaWYgKCRyZXRhaWxlclsnc3RhdHVzJ10gPT09ICdhY3RpdmUnKTogPz4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImRlYWN0aXZhdGVSZXRhaWxlck1vZGFsPD89ICRyZXRhaWxlclsnaWQnXSA/PiIgdGFiaW5kZXg9Ii0xIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy1jZW50ZXJlZCIgcm9sZT0iZG9jdW1lbnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgICAgICAgICAgPGg1IGNsYXNzPSJtb2RhbC10aXRsZSI+RGVhY3RpdmF0ZSBSZXRhaWxlcjwvaDU+CiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4tY2xvc2UiIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgIDxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWFjdGl2YXRlIHJldGFpbGVyIDxzdHJvbmc+PD89IGh0bWxzcGVjaWFsY2hhcnMoJHJldGFpbGVyWyd1c2VybmFtZSddKSA/Pjwvc3Ryb25nPj88L3A+CiAgICAgICAgICAgICAgPHA+VGhlIHJldGFpbGVyIHdvbid0IGJlIGFibGUgdG8gYWNjZXNzIHRoZSBzeXN0ZW0gdW50aWwgcmVhY3RpdmF0ZWQuPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnkiIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiPkNhbmNlbDwvYnV0dG9uPgogICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0idG9nZ2xlLXJldGFpbGVyLXN0YXR1cy5waHAiIG1ldGhvZD0icG9zdCI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXRhaWxlcl9pZCIgdmFsdWU9Ijw/PSAkcmV0YWlsZXJbJ2lkJ10gPz4iPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iYWN0aW9uIiB2YWx1ZT0iZGVhY3RpdmF0ZSI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIj5EZWFjdGl2YXRlPC9idXR0b24+CiAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPD9waHAgZWxzZTogPz4KICAgICAgPCEtLSBBY3RpdmF0ZSBSZXRhaWxlciBNb2RhbCAtLT4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImFjdGl2YXRlUmV0YWlsZXJNb2RhbDw/PSAkcmV0YWlsZXJbJ2lkJ10gPz4iIHRhYmluZGV4PSItMSIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQiIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUiPkFjdGl2YXRlIFJldGFpbGVyPC9oNT4KICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0bi1jbG9zZSIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICAgICAgPHA+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGFjdGl2YXRlIHJldGFpbGVyIDxzdHJvbmc+PD89IGh0bWxzcGVjaWFsY2hhcnMoJHJldGFpbGVyWyd1c2VybmFtZSddKSA/Pjwvc3Ryb25nPj88L3A+CiAgICAgICAgICAgICAgPHA+VGhlIHJldGFpbGVyIHdpbGwgYmUgYWJsZSB0byBhY2Nlc3MgdGhlIHN5c3RlbSBpbW1lZGlhdGVseS48L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCI+Q2FuY2VsPC9idXR0b24+CiAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSJ0b2dnbGUtcmV0YWlsZXItc3RhdHVzLnBocCIgbWV0aG9kPSJwb3N0Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJldGFpbGVyX2lkIiB2YWx1ZT0iPD89ICRyZXRhaWxlclsnaWQnXSA/PiI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJhY3Rpb24iIHZhbHVlPSJhY3RpdmF0ZSI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biBidG4tc3VjY2VzcyI+QWN0aXZhdGU8L2J1dHRvbj4KICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8P3BocCBlbmRpZjsgPz4KICAgIDw/cGhwIGVuZGZvcmVhY2g7ID8+CiAgICA8IS0tIEVuZCBNb2RhbHMgLS0+CiAgICAKICAgIDxzY3JpcHQ+CiAgICAgIGNvbnN0IGR0X3Jlc3BvbnNpdmVfdGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmV0YWlsZXJzVGFibGUnKTsKICAgICAgaWYgKGR0X3Jlc3BvbnNpdmVfdGFibGUpIHsKICAgICAgICBsZXQgZHRfcmVzcG9uc2l2ZSA9IG5ldyBEYXRhVGFibGUoZHRfcmVzcG9uc2l2ZV90YWJsZSwgewogICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSwKICAgICAgICAgIGxheW91dDogewogICAgICAgICAgICB0b3BTdGFydDogewogICAgICAgICAgICAgIHJvd0NsYXNzOiAncm93IG14LTMgbXktMCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbicsCiAgICAgICAgICAgICAgZmVhdHVyZXM6IFt7CiAgICAgICAgICAgICAgICBwYWdlTGVuZ3RoOiB7CiAgICAgICAgICAgICAgICAgIG1lbnU6IFsxMCwgMjUsIDUwLCAxMDBdLAogICAgICAgICAgICAgICAgICB0ZXh0OiAnU2hvdyBfTUVOVV8gZW50cmllcycKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9XQogICAgICAgICAgICB9LAogICAgICAgICAgICB0b3BFbmQ6IHsKICAgICAgICAgICAgICBzZWFyY2g6IHsKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VhcmNoIHJldGFpbGVycy4uLicKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJvdHRvbVN0YXJ0OiB7CiAgICAgICAgICAgICAgcm93Q2xhc3M6ICdyb3cgbXgtMyBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbicsCiAgICAgICAgICAgICAgZmVhdHVyZXM6IFsnaW5mbyddCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJvdHRvbUVuZDogJ3BhZ2luZycKICAgICAgICAgIH0sCiAgICAgICAgICBsYW5ndWFnZTogewogICAgICAgICAgICBwYWdpbmF0ZTogewogICAgICAgICAgICAgIG5leHQ6ICc8aSBjbGFzcz0iaWNvbi1iYXNlIHRpIHRhYmxlci1jaGV2cm9uLXJpZ2h0IHNjYWxlWC1uMS1ydGwgaWNvbi0xOHB4Ij48L2k+JywKICAgICAgICAgICAgICBwcmV2aW91czogJzxpIGNsYXNzPSJpY29uLWJhc2UgdGkgdGFibGVyLWNoZXZyb24tbGVmdCBzY2FsZVgtbjEtcnRsIGljb24tMThweCI+PC9pPicsCiAgICAgICAgICAgICAgZmlyc3Q6ICc8aSBjbGFzcz0iaWNvbi1iYXNlIHRpIHRhYmxlci1jaGV2cm9ucy1sZWZ0IHNjYWxlWC1uMS1ydGwgaWNvbi0xOHB4Ij48L2k+JywKICAgICAgICAgICAgICBsYXN0OiAnPGkgY2xhc3M9Imljb24tYmFzZSB0aSB0YWJsZXItY2hldnJvbnMtcmlnaHQgc2NhbGVYLW4xLXJ0bCBpY29uLTE4cHgiPjwvaT4nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNlYXJjaDogJycsCiAgICAgICAgICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnU2VhcmNoIHJldGFpbGVycy4uLicsCiAgICAgICAgICAgIGxlbmd0aE1lbnU6ICdTaG93IF9NRU5VXyBlbnRyaWVzJwogICAgICAgICAgfSwKICAgICAgICAgIGRvbTogJzwidG9wImxmPnJ0PCJib3R0b20iaXA+JywKICAgICAgICAgIGNvbHVtbkRlZnM6IFt7CiAgICAgICAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLAogICAgICAgICAgICAgIHRhcmdldHM6IDEKICAgICAgICAgICAgfSwgLy8gVXNlcm5hbWUKICAgICAgICAgICAgewogICAgICAgICAgICAgIHJlc3BvbnNpdmVQcmlvcml0eTogMiwKICAgICAgICAgICAgICB0YXJnZXRzOiAyCiAgICAgICAgICAgIH0sIC8vIEZ1bGwgTmFtZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAzLAogICAgICAgICAgICAgIHRhcmdldHM6IDMKICAgICAgICAgICAgfSAvLyBXYWxsZXQgQmFsYW5jZQogICAgICAgICAgXQogICAgICAgIH0pOwogICAgICB9CiAgICAgIAogICAgICAvLyBTZXQgbWF4IGFtb3VudCB2YWxpZGF0aW9uIGZvciB3YWxsZXQgYWRkaXRpb24gZm9ybXMKICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2lkXj0iYWRkV2FsbGV0TW9kYWwiXScpLmZvckVhY2gobW9kYWwgPT4gewogICAgICAgIG1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbigpIHsKICAgICAgICAgIGNvbnN0IGFtb3VudElucHV0ID0gdGhpcy5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPSJhbW91bnQiXScpOwogICAgICAgICAgY29uc3QgbWF4QW1vdW50ID0gcGFyc2VGbG9hdChhbW91bnRJbnB1dC5nZXRBdHRyaWJ1dGUoJ21heCcpKTsKICAgICAgICAgIAogICAgICAgICAgYW1vdW50SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQodGhpcy52YWx1ZSkgPiBtYXhBbW91bnQpIHsKICAgICAgICAgICAgICB0aGlzLnNldEN1c3RvbVZhbGlkaXR5KGBBbW91bnQgY2Fubm90IGV4Y2VlZCB5b3VyIGF2YWlsYWJsZSBiYWxhbmNlIG9mIOKCuSR7bWF4QW1vdW50LnRvRml4ZWQoMil9YCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdGhpcy5zZXRDdXN0b21WYWxpZGl0eSgnJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAuYmFkZ2UuYmctbGFiZWwtc3VjY2VzcyB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg0MCwgMTk5LCAxMTEsIDAuMTIpICFpbXBvcnRhbnQ7CiAgICAgICAgY29sb3I6ICMyOGM3NmYgIWltcG9ydGFudDsKICAgICAgfQogICAgICAuYmFkZ2UuYmctbGFiZWwtd2FybmluZyB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDE1OSwgNjcsIDAuMTIpICFpbXBvcnRhbnQ7CiAgICAgICAgY29sb3I6ICNmZjlmNDMgIWltcG9ydGFudDsKICAgICAgfQogICAgICAuYmFkZ2UuYmctbGFiZWwtZGFuZ2VyIHsKICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIzNCwgODQsIDg1LCAwLjEyKSAhaW1wb3J0YW50OwogICAgICAgIGNvbG9yOiAjZWE1NDU1ICFpbXBvcnRhbnQ7CiAgICAgIH0KICAgICAgLmJhZGdlLmJnLWxhYmVsLXNlY29uZGFyeSB7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMzAsIDEzNCwgMTM5LCAwLjEyKSAhaW1wb3J0YW50OwogICAgICAgIGNvbG9yOiAjODI4NjhiICFpbXBvcnRhbnQ7CiAgICAgIH0KICAgIDwvc3R5bGU+CiAgPC9ib2R5Pgo8L2h0bWw+');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>