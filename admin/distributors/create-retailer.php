<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Ensure the logged-in user is a distributor
if ($_SESSION['user_type'] !== 'distributor') {
    header("Location: dashboard.php");
    exit;
}

// Get distributor information
$distributorId = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT id, username, full_name, distributor_code FROM users WHERE id = ? AND user_type = 'distributor' AND status = 'active' AND isbanned = '0'");
$stmt->execute([$distributorId]);
$distributor = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$distributor) {
    header("Location: dashboard.php");
    exit;
}

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'] ?? '';
    $email = $_POST['email'] ?? '';
    $password = $_POST['password'] ?? '';
    $confirmPassword = $_POST['confirm_password'] ?? '';
    $fullName = $_POST['full_name'] ?? '';
    $wallet = isset($_POST['wallet']) ? (float)$_POST['wallet'] : 0.00;
    $bonusWallet = isset($_POST['bonus_wallet']) ? (float)$_POST['bonus_wallet'] : 0.00;
    $status = $_POST['status'] ?? 'active';

    // Use the logged-in distributor's information
    $distributorId = $distributor['id'];
    $distributorCode = $distributor['distributor_code'];

    // Validate inputs
    $errors = [];

    if (empty($username)) {
        $errors[] = 'Username is required';
    }

    if (empty($email)) {
        $errors[] = 'Email is required';
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $errors[] = 'Invalid email format';
    }

    if (empty($password)) {
        $errors[] = 'Password is required';
    } elseif (strlen($password) < 6) {
        $errors[] = 'Password must be at least 6 characters';
    }

    if ($password !== $confirmPassword) {
        $errors[] = 'Passwords do not match';
    }

    if (empty($fullName)) {
        $errors[] = 'Full name is required';
    }

    // Check if username or email already exists
    $stmt = $pdo->prepare("SELECT COUNT(*) FROM users WHERE username = ? OR email = ?");
    $stmt->execute([$username, $email]);
    if ($stmt->fetchColumn() > 0) {
        $errors[] = 'Username or email already exists';
    }

    // If no errors, create the retailer
    if (empty($errors)) {
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        
        $stmt = $pdo->prepare("INSERT INTO users (
            username, 
            email, 
            password, 
            full_name, 
            wallet, 
            bonus_wallet, 
            distributor_id,
            distributor_code,
            status, 
            user_type,
            created_at,
            currency
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'retailer', NOW(), '₹')");
        
        $stmt->execute([
            $username,
            $email,
            $hashedPassword,
            $fullName,
            $wallet,
            $bonusWallet,
            $distributorId,
            $distributorCode,
            $status
        ]);
        // Get last inserted retailer ID
        $retailerId = $pdo->lastInsertId();

        // Generate referral code: RTL-FIRST4 + last 3 digits of ID
        $prefix = strtoupper(substr(preg_replace('/\s+/', '', $fullName), 0, 4));
        $referralCode = 'RTL-' . $prefix . sprintf('%03d', $retailerId);

        // Update referral_code in users table
        $updateStmt = $pdo->prepare("UPDATE users SET referral_code = ? WHERE id = ?");
        $updateStmt->execute([$referralCode, $retailerId]);

        $success = 'Retailer created successfully! Referral Code: ' . $referralCode;
    }
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
        <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
          <?php include('includes/navbar.php'); ?>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="card">
                <h5 class="card-header pb-0 text-md-start text-center">Create New Retailer</h5>

                <div class="card-body">
                  <?php if (!empty($errors)): ?>
                    <div class="alert alert-danger">
                      <ul class="mb-0">
                        <?php foreach ($errors as $error): ?>
                          <li><?= htmlspecialchars($error) ?></li>
                        <?php endforeach; ?>
                      </ul>
                    </div>
                  <?php endif; ?>
                  
                  <?php if (isset($success)): ?>
                    <div class="alert alert-success">
                      <?= htmlspecialchars($success) ?>
                    </div>
                  <?php endif; ?>
                  
                  <form method="POST">
                    <div class="row">
                      <div class="col-md-6">
                        <div class="mb-3">
                          <label class="form-label">Username <span class="text-danger">*</span></label>
                          <input type="text" class="form-control" name="username" value="<?= htmlspecialchars($_POST['username'] ?? '') ?>" required>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Email <span class="text-danger">*</span></label>
                          <input type="email" class="form-control" name="email" value="<?= htmlspecialchars($_POST['email'] ?? '') ?>" required>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Password <span class="text-danger">*</span></label>
                          <input type="password" class="form-control" name="password" required>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Confirm Password <span class="text-danger">*</span></label>
                          <input type="password" class="form-control" name="confirm_password" required>
                        </div>
                      </div>
                      
                      <div class="col-md-6">
                        <div class="mb-3">
                          <label class="form-label">Full Name <span class="text-danger">*</span></label>
                          <input type="text" class="form-control" name="full_name" value="<?= htmlspecialchars($_POST['full_name'] ?? '') ?>" required>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Distributor Information</label>
                          <input type="text" class="form-control" value="<?= htmlspecialchars($distributor['username'] . ' - ' . $distributor['full_name']) ?>" readonly>
                          <div class="text-muted small mt-1">
                            Distributor Code: <?= htmlspecialchars($distributor['distributor_code']) ?>
                          </div>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Initial Wallet Balance</label>
                          <input type="number" class="form-control" name="wallet" value="<?= htmlspecialchars($_POST['wallet'] ?? '0.00') ?>" step="0.01" min="0">
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Initial Bonus Wallet Balance</label>
                          <input type="number" class="form-control" name="bonus_wallet" value="<?= htmlspecialchars($_POST['bonus_wallet'] ?? '0.00') ?>" step="0.01" min="0">
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Status</label>
                          <select class="form-select" name="status">
                            <option value="active" <?= ($_POST['status'] ?? 'active') === 'active' ? 'selected' : '' ?>>Active</option>
                            <option value="inactive" <?= ($_POST['status'] ?? '') === 'inactive' ? 'selected' : '' ?>>Inactive</option>
                          </select>
                        </div>
                      </div>
                    </div>
                    
                    <div class="mt-4">
                      <button type="submit" class="btn btn-primary">
                        <i class="ti tabler-user-plus me-1"></i> Create Retailer
                      </button>
                      <a href="my-retailers.php" class="btn btn-outline-secondary ms-2">
                        <i class="ti tabler-list me-1"></i> View My Retailers
                      </a>
                    </div>
                  </form>
                </div>
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
            <?php include('includes/footer.php'); ?>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>

      <!-- Drag Target Area To SlideIn Menu On Small Screens -->
      <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->

    <?php include('includes/script.php'); ?>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>