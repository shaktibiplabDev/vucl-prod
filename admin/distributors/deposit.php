<?php
$code = base64_decode('<?php
session_start();
require __DIR__ . '/security/auth.php';
require_once(__DIR__ . '/../../config/database.php');

// Initialize variables
$paymentUrl = null;
$error = null;
$showOfflinePayment = false;
$transactionId = null;
$onlineGateways = [];
$offlineGateways = [];
$defaultOnlineGateway = null;
$defaultOfflineGateway = null;
$pendingTransactions = [];

if (isset($_GET['reset_deposit'])) {
  unset($_SESSION['deposit_data']);
  exit; // Just exit after clearing session, the JS will reload
}

try {
  // Get active payment gateways
  $stmt = $pdo->prepare("SELECT * FROM payment_settings WHERE active = 1");
  $stmt->execute();
  $onlineGateways = $stmt->fetchAll(PDO::FETCH_ASSOC);

  // Get active UPI payment methods
  $stmt = $pdo->prepare("SELECT * FROM upi_payments WHERE active = 1");
  $stmt->execute();
  $offlineGateways = $stmt->fetchAll(PDO::FETCH_ASSOC);

  // Find default gateways
  foreach ($onlineGateways as $gateway) {
    if ($gateway['is_primary']) {
      $defaultOnlineGateway = $gateway;
      break;
    }
  }
  if (!$defaultOnlineGateway && count($onlineGateways)) {
    $defaultOnlineGateway = $onlineGateways[0];
  }

  foreach ($offlineGateways as $gateway) {
    if ($gateway['is_default']) {
      $defaultOfflineGateway = $gateway;
      break;
    }
  }
  if (!$defaultOfflineGateway && count($offlineGateways)) {
    $defaultOfflineGateway = $offlineGateways[0];
  }

  // Get pending transactions for this user
  $stmt = $pdo->prepare("SELECT d.*, ot.upi_id, ot.transaction_id AS upi_transaction_id 
                          FROM deposits d 
                          LEFT JOIN offline_transactions ot ON d.id = ot.deposit_id
                          WHERE d.user_id = ? AND d.status = 'pending'
                          ORDER BY d.created_at DESC");
  $stmt->execute([$user['id']]);
  $pendingTransactions = $stmt->fetchAll(PDO::FETCH_ASSOC);

  // Handle form submission
  if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['submit_deposit'])) {
      // First step - validate and show payment options
      try {
        // Validate required fields
        $required = ['customer_mobile', 'amount'];
        foreach ($required as $field) {
          if (empty($_POST[$field])) {
            throw new Exception("Missing required field: $field");
          }
        }

        $amount = (float) $_POST['amount'];
        $minAmount = $defaultOnlineGateway ? (float) $defaultOnlineGateway['min_amt'] : 1.00;

        if ($amount < $minAmount) {
          throw new Exception("Minimum deposit amount is RS " . number_format($minAmount, 2));
        }

        // Validate mobile number
        if (!preg_match('/^\d{10,15}$/', $_POST['customer_mobile'])) {
          throw new Exception("Please enter a valid 10-15 digit mobile number");
        }

        // Store in session for next step
        $_SESSION['deposit_data'] = [
          'customer_mobile' => $_POST['customer_mobile'],
          'amount' => $amount,
          'remark1' => $_POST['remark1'] ?? '',
          'remark2' => 'From ' . $_SESSION['username']
        ];

        // Determine if we should show payment options
        $showOfflinePayment = (count($offlineGateways) > 0);
        $showOnlinePayment = (count($onlineGateways) > 0);

        if (!$showOfflinePayment && !$showOnlinePayment) {
          throw new Exception("No payment methods available");
        }

        // Redirect to prevent form resubmission
        header("Location: " . $_SERVER['REQUEST_URI']);
        exit();
      } catch (Exception $e) {
        $error = $e->getMessage();
        error_log("Deposit Error: " . $e->getMessage());
      }
    } elseif (isset($_POST['process_online_payment'])) {
      // Process online payment
      try {
        if (!isset($_SESSION['deposit_data'])) {
          throw new Exception("Session expired. Please try again.");
        }

        $depositData = $_SESSION['deposit_data'];

        // Generate order ID
        $orderId = 'DEP-' . time() . '-' . bin2hex(random_bytes(4));

        // Insert deposit record into database
        $stmt = $pdo->prepare("INSERT INTO deposits (user_id, order_id, amount, status, payment_method, created_at, updated_at) 
                                      VALUES (?, ?, ?, 'pending', 'online', NOW(), NOW())");
        $stmt->execute([$user['id'], $orderId, $depositData['amount']]);

        $paymentData = [
          'customer_mobile' => $depositData['customer_mobile'],
          'user_token' => $defaultOnlineGateway['user_token'],
          'amount' => $depositData['amount'],
          'order_id' => $orderId,
          'redirect_url' => (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http")
            . "://{$_SERVER['HTTP_HOST']}/admin/distributors/payments/complete.php?order_id=" . urlencode($orderId)
            . "&user_id=" . urlencode($user['id']),
          'remark1' => $depositData['remark1'] ?? 'testremark',
          'remark2' => $depositData['remark2'] ?? 'From ' . $_SESSION['username']
        ];

        // Send to payment gateway
        $ch = curl_init($defaultOnlineGateway['api_url'] . '/api/create-order');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($paymentData));
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: application/json']);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $curlError = curl_error($ch);
        curl_close($ch);

        if ($curlError) {
          throw new Exception("Payment gateway connection failed: " . $curlError);
        }

        if ($httpCode === 200 || $httpCode === 201) {
          $result = json_decode($response, true);

          if (!$result || !isset($result['status'])) {
            throw new Exception("Invalid response from payment gateway");
          }

          if ($result['status'] !== true) {
            throw new Exception($result['message'] ?? "Payment processing failed");
          }

          if (!isset($result['result']['payment_url'])) {
            throw new Exception("Payment URL missing from response");
          }

          $paymentUrl = $result['result']['payment_url'];
          unset($_SESSION['deposit_data']);
        } else {
          throw new Exception("Payment gateway returned HTTP $httpCode");
        }
      } catch (Exception $e) {
        $error = $e->getMessage();
        error_log("Payment Error: " . $e->getMessage());
      }
    } elseif (isset($_POST['process_offline_payment'])) {
      // Process offline payment
      try {
        if (!isset($_SESSION['deposit_data'])) {
          throw new Exception("Session expired. Please try again.");
        }

        if (empty($_POST['transaction_id'])) {
          throw new Exception("Transaction ID is required");
        }

        $depositData = $_SESSION['deposit_data'];

        // Generate order ID
        $orderId = 'DEP-' . time() . '-' . bin2hex(random_bytes(4));

        // Insert deposit record into database
        $stmt = $pdo->prepare("INSERT INTO deposits (user_id, order_id, amount, status, payment_method, transaction_id, created_at, updated_at) 
                                      VALUES (?, ?, ?, 'pending', 'offline', ?, NOW(), NOW())");
        $stmt->execute([
          $user['id'],
          $orderId,
          $depositData['amount'],
          $_POST['transaction_id']
        ]);

        // Insert into offline transactions table
        $stmt = $pdo->prepare("INSERT INTO offline_transactions (deposit_id, upi_id, amount, transaction_id, status, created_at) 
                                      VALUES (?, ?, ?, ?, 'pending', NOW())");
        $stmt->execute([
          $pdo->lastInsertId(),
          $defaultOfflineGateway['upi_id'],
          $depositData['amount'],
          $_POST['transaction_id']
        ]);

        // Clear session data
        unset($_SESSION['deposit_data']);

        // Redirect to prevent form resubmission
        header("Location: " . $_SERVER['REQUEST_URI']);
        exit();
      } catch (Exception $e) {
        $error = $e->getMessage();
        error_log("Offline Payment Error: " . $e->getMessage());
      }
    }
  }
} catch (Exception $e) {
  $error = "System error: " . $e->getMessage();
  error_log("System Error: " . $e->getMessage());
}
?>

<!doctype html>
<html
  lang="en"
  class="layout-navbar-fixed layout-menu-fixed layout-compact"
  dir="ltr"
  data-skin="default"
  data-assets-path="../../assets/"
  data-template="vertical-menu-template"
  data-bs-theme="light">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Deposit Funds</title>
  <?php include('includes/head.php'); ?>
  <style>
    /* Modern Payment Modal Styles */
    .payment-modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.6);
      backdrop-filter: blur(4px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }

    .payment-modal-overlay.active {
      opacity: 1;
      visibility: visible;
    }

    .payment-modal-container {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 420px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
      transform: translateY(20px);
      transition: transform 0.3s ease;
      overflow: hidden;
    }

    .payment-modal-overlay.active .payment-modal-container {
      transform: translateY(0);
    }

    .payment-modal-header {
      padding: 16px 20px;
      background: #7367F0;
      color: white;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .payment-modal-title {
      margin: 0;
      font-size: 1.1rem;
      font-weight: 600;
    }

    .payment-modal-close {
      background: none;
      border: none;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
      line-height: 1;
      padding: 0;
    }

    .payment-modal-body {
      padding: 0;
    }

    .payment-modal-frame {
      width: 100%;
      height: 500px;
      border: none;
    }

    .payment-modal-footer {
      padding: 12px 16px;
      background: #f8f8f8;
      text-align: center;
    }

    .payment-modal-btn {
      background: #6c757d;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: background 0.2s;
    }

    .payment-modal-btn:hover {
      background: #5a6268;
    }

    .payment-alert {
      padding: 20px;
      text-align: center;
    }

    /* Payment method selection */
    .payment-method-container {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      padding: 1.5rem;
    }

    .payment-method {
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 1rem;
      cursor: pointer;
      transition: all 0.2s;
    }

    .payment-method:hover {
      border-color: #7367F0;
    }

    .payment-method.selected {
      border-color: #7367F0;
      background-color: rgba(115, 103, 240, 0.05);
    }

    .payment-method input[type="radio"] {
      margin-right: 0.5rem;
    }

    .payment-method-details {
      margin-top: 0.5rem;
      padding-left: 1.5rem;
      display: none;
    }

    .payment-method.selected .payment-method-details {
      display: block;
    }

    .upi-details-container {
      text-align: center;
      margin: 20px 0;
      padding: 20px;
      background: #f9f9f9;
      border-radius: 8px;
    }

    .upi-qr-code {
      max-width: 200px;
      margin: 0.5rem auto;
      display: block;
      border: 1px solid #ddd;
      padding: 10px;
      background: white;
    }

    .upi-info {
      margin: 15px 0;
    }

    .upi-info h4 {
      color: #7367F0;
      margin-bottom: 10px;
    }

    /* Animation for loading */
    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .payment-loading {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 40px 20px;
    }

    .payment-spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      border-top: 4px solid #7367F0;
      animation: spin 1s linear infinite;
      margin-bottom: 16px;
    }

    /* Form enhancements */
    .form-control:focus {
      border-color: #7367F0;
      box-shadow: 0 0 0 0.2rem rgba(115, 103, 240, 0.25);
    }

    /* Transaction history styles */
    .transaction-card {
      border-left: 4px solid #7367F0;
      transition: all 0.3s;
    }

    .transaction-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .transaction-status-pending {
      color: #FF9F43;
    }

    .transaction-status-completed {
      color: #28C76F;
    }

    .transaction-status-failed {
      color: #EA5455;
    }
  </style>
</head>

<body>
  <!-- Layout wrapper -->
  <div class="layout-wrapper layout-content-navbar">
    <div class="layout-container">
      <!-- Menu -->
      <?php include('includes/sidebar.php'); ?>

      <div class="menu-mobile-toggler d-xl-none rounded-1">
        <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
          <i class="ti tabler-menu icon-base"></i>
          <i class="ti tabler-chevron-right icon-base"></i>
        </a>
      </div>

      <!-- Layout container -->
      <div class="layout-page">
        <!-- Navbar -->
        <?php include('includes/navbar.php'); ?>

        <!-- Content wrapper -->
        <div class="content-wrapper">
          <!-- Content -->
          <div class="container-xxl flex-grow-1 container-p-y">
            <div class="row">
              <div class="col-md-12">
                <!-- Wallet Balance Cards -->
                <div class="row mb-4">
                  <div class="col-md-4 mb-3">
                    <div class="card bg-primary text-white h-100">
                      <div class="card-body d-flex flex-column">
                        <h5 class="card-title">Main Balance</h5>
                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($user['wallet'], 2) ?></h3>
                        <small class="text-white-50">Available for withdrawal</small>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-4 mb-3">
                    <div class="card bg-success text-white h-100">
                      <div class="card-body d-flex flex-column">
                        <h5 class="card-title">Bonus Balance</h5>
                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($user['bonus_wallet'], 2) ?></h3>
                        <small class="text-white-50">For trading only</small>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-4 mb-3">
                    <div class="card bg-info text-white h-100">
                      <div class="card-body d-flex flex-column">
                        <h5 class="card-title">Total Balance</h5>
                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($user['wallet'] + $user['bonus_wallet'], 2) ?></h3>
                        <small class="text-white-50">Combined funds</small>
                      </div>
                    </div>
                  </div>
                </div>

                <?php if (!isset($_SESSION['deposit_data'])): ?>
                  <!-- Initial Deposit Form -->
                  <div class="card mb-4">
                    <h5 class="card-header bg-transparent">Make a Deposit</h5>
                    <div class="card-body">
                      <form id="depositForm" method="POST">
                        <input type="hidden" name="submit_deposit" value="1">

                        <!-- Mobile Number -->
                        <div class="mb-3">
                          <label for="customer_mobile" class="form-label">Mobile Number</label>
                          <input
                            type="tel"
                            class="form-control"
                            id="customer_mobile"
                            name="customer_mobile"
                            placeholder="Enter your mobile number"
                            required
                            pattern="[0-9]{10,15}"
                            title="Please enter a valid 10-15 digit mobile number" />
                        </div>

                        <!-- Amount Input -->
                        <div class="mb-3">
                          <label for="amount" class="form-label">Amount</label>
                          <div class="input-group">
                            <span class="input-group-text"><?= htmlspecialchars($user['currency']) ?></span>
                            <input
                              type="number"
                              class="form-control"
                              id="amount"
                              name="amount"
                              placeholder="Enter amount"
                              min="1"
                              step="0.01"
                              required />
                          </div>
                          <div class="form-text text-muted">
                            Minimum deposit: <?= htmlspecialchars($user['currency']) . number_format($defaultOnlineGateway ? $defaultOnlineGateway['min_amt'] : 1.00, 2) ?>
                          </div>
                        </div>

                        <!-- Remarks -->
                        <div class="mb-3">
                          <label for="remark1" class="form-label">Note (Optional)</label>
                          <input
                            type="text"
                            class="form-control"
                            id="remark1"
                            name="remark1"
                            placeholder="Enter a note for this deposit" />
                        </div>

                        <input type="hidden" name="remark2" value="From <?= htmlspecialchars($user['username']) ?>">

                        <!-- Submit Button -->
                        <div class="mt-4">
                          <button type="submit" class="btn btn-primary w-100 py-2">
                            Proceed to Payment
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                <?php else: ?>
                  <!-- Payment Method Selection -->
                  <div class="d-flex justify-content-center align-items-start py-5">
                    <div class="card" style="max-width: 500px; width: 100%; margin: 40px 0;">
                      <h5 class="card-header bg-transparent text-center">Select Payment Method</h5>
                      <div class="card-body">
                        <div class="payment-method-container">

                          <?php if (count($onlineGateways) > 0): ?>
                            <form method="POST" id="onlinePaymentForm">
                              <div class="payment-method <?= count($offlineGateways) == 0 ? 'selected' : '' ?>" onclick="selectPayment(this)">
                                <input
                                  type="radio"
                                  name="payment_method"
                                  value="online"
                                  <?= count($offlineGateways) == 0 ? 'checked' : '' ?>
                                  class="d-none">
                                <strong>Online Payment</strong>
                                <div class="payment-method-details mt-2">
                                  <p>Pay instantly using our secure payment gateway</p>
                                  <button type="submit" name="process_online_payment" class="btn btn-primary w-100">
                                    Pay Now (<?= htmlspecialchars($user['currency']) ?> <?= number_format($_SESSION['deposit_data']['amount'], 2) ?>)
                                  </button>
                                </div>
                              </div>
                            </form>
                          <?php endif; ?>

                          <?php if (count($offlineGateways) > 0): ?>
                            <form method="POST" id="offlinePaymentForm">
                              <div class="payment-method <?= count($onlineGateways) == 0 ? 'selected' : '' ?>" onclick="selectPayment(this)">
                                <input
                                  type="radio"
                                  name="payment_method"
                                  value="offline"
                                  <?= count($onlineGateways) == 0 ? 'checked' : '' ?>
                                  class="d-none">
                                <strong>UPI / Bank Transfer</strong>
                                <div class="payment-method-details mt-2">
                                  <div class="upi-info">
                                    <h5>Send <?= htmlspecialchars($user['currency']) ?> <?= number_format($_SESSION['deposit_data']['amount'], 2) ?></h5>
                                    <p>to the following UPI ID:</p>
                                    <h4 class="text-primary"><?= htmlspecialchars($defaultOfflineGateway['upi_id']) ?></h4>
                                  </div>

                                  <?php if (!empty($defaultOfflineGateway['qr_code_image'])): ?>
                                    <div class="text-center my-3">
                                      <p>Or scan this QR code:</p>
                                      <img src="<?= htmlspecialchars($defaultOfflineGateway['qr_code_image']) ?>" alt="UPI QR Code" class="upi-qr-code" style="max-width:200px;">
                                    </div>
                                  <?php endif; ?>

                                  <div class="mb-3">
                                    <label for="transaction_id" class="form-label">Transaction ID / UTR Number</label>
                                    <input type="text" class="form-control" id="transaction_id" name="transaction_id" placeholder="Enter reference number" required>
                                  </div>

                                  <button type="submit" name="process_offline_payment" class="btn btn-primary w-100">
                                    Submit Payment Details
                                  </button>
                                </div>
                              </div>
                            </form>
                          <?php endif; ?>

                        </div>

                        <div class="mt-4 text-center">
                          <button class="btn btn-outline-secondary" onclick="resetDepositForm()">
                            Cancel
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                <?php endif; ?>

                <!-- Pending Transactions -->
                <?php if (!empty($pendingTransactions)): ?>
                  <div class="card mb-4">
                    <h5 class="card-header bg-transparent">Pending Transactions</h5>
                    <div class="card-body">
                      <div class="table-responsive">
                        <table class="table table-hover">
                          <thead>
                            <tr>
                              <th>Order ID</th>
                              <th>Amount</th>
                              <th>Payment Method</th>
                              <th>Transaction ID</th>
                              <th>Status</th>
                              <th>Date</th>
                            </tr>
                          </thead>
                          <tbody>
                            <?php foreach ($pendingTransactions as $transaction): ?>
                              <tr class="transaction-card">
                                <td><?= htmlspecialchars($transaction['order_id']) ?></td>
                                <td><?= htmlspecialchars($user['currency']) ?> <?= number_format($transaction['amount'], 2) ?></td>
                                <td><?= ucfirst(htmlspecialchars($transaction['payment_method'])) ?></td>
                                <td>
                                  <?= !empty($transaction['transaction_id']) ? htmlspecialchars($transaction['transaction_id']) : (!empty($transaction['upi_transaction_id']) ? htmlspecialchars($transaction['upi_transaction_id']) : 'N/A') ?>
                                </td>
                                <td class="transaction-status-pending">
                                  <span class="badge bg-label-warning">Pending</span>
                                </td>
                                <td><?= date('d M Y h:i A', strtotime($transaction['created_at'])) ?></td>
                              </tr>
                            <?php endforeach; ?>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                <?php endif; ?>
              </div>
            </div>
          </div>

          <!-- Footer -->
          <?php include('includes/footer.php'); ?>
        </div>
      </div>
    </div>

    <!-- Overlay -->
    <div class="layout-overlay layout-menu-toggle"></div>
  </div>

  <!-- Payment Modal -->
  <div id="paymentModal" class="payment-modal-overlay">
    <div class="payment-modal-container">
      <div class="payment-modal-header">
        <h3 class="payment-modal-title">Complete Payment</h3>
        <button class="payment-modal-close">&times;</button>
      </div>
      <div class="payment-modal-body">
        <?php if ($paymentUrl): ?>
          <iframe class="payment-modal-frame" src="<?= htmlspecialchars($paymentUrl) ?>"
            sandbox="allow-forms allow-scripts allow-same-origin"></iframe>
        <?php else: ?>
          <div class="payment-alert alert alert-danger">
            <i class="ti ti-alert-circle me-2"></i> Payment URL not available
          </div>
        <?php endif; ?>
      </div>
      <div class="payment-modal-footer">
        <button class="payment-modal-btn cancel-payment">
          Close
        </button>
      </div>
    </div>
  </div>

  <?php include('includes/script.php'); ?>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Payment modal elements
      const paymentModal = document.getElementById('paymentModal');
      const paymentFrame = document.querySelector('.payment-modal-frame');

      // Show/hide modal functions with animations
      function showPaymentModal() {
        paymentModal.classList.add('active');
        document.body.style.overflow = 'hidden';
      }

      function closePaymentModal() {
        paymentModal.classList.remove('active');
        document.body.style.overflow = '';
        window.location.href = window.location.pathname; // Reloads page without form data
      }

      // Set up modal event listeners
      document.querySelector('.payment-modal-close').addEventListener('click', closePaymentModal);
      document.querySelector('.cancel-payment').addEventListener('click', closePaymentModal);
      paymentModal.addEventListener('click', function(e) {
        if (e.target === paymentModal) closePaymentModal();
      });

      // Show modal if payment URL exists
      <?php if ($paymentUrl): ?>
        showPaymentModal();
      <?php endif; ?>

      // Show success message if offline payment was just submitted
      <?php if (isset($_GET['offline_success']) && $_GET['offline_success'] == '1'): ?>
        Swal.fire({
          title: 'Payment Submitted',
          text: 'Your payment details have been submitted. We will verify and update your balance shortly.',
          icon: 'success',
          confirmButtonColor: '#7367F0'
        }).then(() => {
          // Remove the success parameter from URL
          window.history.replaceState({}, document.title, window.location.pathname);
        });
      <?php endif; ?>

      // Show error if exists
      <?php if ($error): ?>
        Swal.fire({
          title: 'Error',
          html: '<?= addslashes($error) ?>',
          icon: 'error',
          confirmButtonText: 'OK',
          confirmButtonColor: '#7367F0',
          customClass: {
            confirmButton: 'btn btn-primary'
          }
        });
      <?php endif; ?>

      // Function to toggle payment method details
      window.togglePaymentDetails = function() {
        const methods = document.querySelectorAll('.payment-method');
        methods.forEach(method => {
          const radio = method.querySelector('input[type="radio"]');
          if (radio.checked) {
            method.classList.add('selected');
          } else {
            method.classList.remove('selected');
          }
        });
      };

      // Initialize payment method selection
      togglePaymentDetails();

      // Enhanced form validation and submission for initial deposit form
      const depositForm = document.getElementById('depositForm');
      if (depositForm) {
        depositForm.addEventListener('submit', function(e) {
          e.preventDefault();

          // Validate amount
          const amount = parseFloat(document.getElementById('amount').value);
          const minAmt = <?= $defaultOnlineGateway ? (float)$defaultOnlineGateway['min_amt'] : 1.00 ?>;
          if (isNaN(amount)) {
            Swal.fire({
              title: 'Invalid Amount',
              text: 'Please enter a valid amount',
              icon: 'error',
              confirmButtonColor: '#7367F0'
            });
            return;
          }

          if (amount < minAmt) {
            Swal.fire({
              title: 'Invalid Amount',
              text: 'Minimum deposit amount is <?= htmlspecialchars($user['currency']) ?>' + minAmt.toFixed(2),
              icon: 'error',
              confirmButtonColor: '#7367F0'
            });
            return;
          }

          // Validate mobile number
          const mobile = document.getElementById('customer_mobile').value;
          if (!/^\d{10,15}$/.test(mobile)) {
            Swal.fire({
              title: 'Invalid Mobile',
              text: 'Please enter a valid 10-15 digit mobile number',
              icon: 'error',
              confirmButtonColor: '#7367F0'
            });
            return;
          }

          // Submit form
          depositForm.submit();
        });
      }

      // Form validation for offline payment
      const offlinePaymentForm = document.getElementById('offlinePaymentForm');
      if (offlinePaymentForm) {
        offlinePaymentForm.addEventListener('submit', function(e) {
          const transactionId = document.getElementById('transaction_id').value.trim();
          if (!transactionId) {
            e.preventDefault();
            Swal.fire({
              title: 'Transaction ID Required',
              text: 'Please enter your transaction reference number',
              icon: 'error',
              confirmButtonColor: '#7367F0'
            });
          }
        });
      }

      // Listen for iframe messages (for payment completion)
      window.addEventListener('message', (event) => {
        <?php if ($defaultOnlineGateway): ?>
          if (event.origin !== '<?= $defaultOnlineGateway['api_url'] ?>') return;
        <?php endif; ?>

        if (event.data === 'payment_completed') {
          closePaymentModal();
          Swal.fire({
            title: 'Payment Successful',
            text: 'Your deposit has been processed successfully!',
            icon: 'success',
            confirmButtonColor: '#7367F0'
          }).then(() => {
            window.location.reload();
          });
        }
      });
    });

    function resetDepositForm() {
      // Send an AJAX request to clear the session data
      fetch('<?= htmlspecialchars($_SERVER['PHP_SELF']) ?>?reset_deposit=1', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          }
        })
        .then(response => {
          if (response.ok) {
            // Reload the page to show the initial form
            window.location.href = '<?= htmlspecialchars($_SERVER['PHP_SELF']) ?>';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          // Fallback to just reloading if AJAX fails
          window.location.href = '<?= htmlspecialchars($_SERVER['PHP_SELF']) ?>';
        });
    }
  </script>
  <style>
    .payment-method-container {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .payment-method {
      border: 2px solid #ddd;
      border-radius: 10px;
      padding: 15px;
      cursor: pointer;
      transition: 0.3s;
    }

    .payment-method:hover {
      border-color: #7367F0;
      background: #f9f9ff;
    }

    .payment-method.selected {
      border-color: #7367F0;
      background: #f1f1ff;
      box-shadow: 0 0 10px rgba(115, 103, 240, 0.3);
    }
  </style>

  <script>
    function selectPayment(el) {
      document.querySelectorAll('.payment-method').forEach(m => m.classList.remove('selected'));
      el.classList.add('selected');
      el.querySelector('input[type="radio"]').checked = true;
    }
  </script>
</body>

</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>