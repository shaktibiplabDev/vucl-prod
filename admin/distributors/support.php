<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
?>
<!doctype html>

<html
  lang="en"
  class="layout-navbar-fixed layout-menu-fixed layout-compact"
  dir="ltr"
  data-skin="default"
  data-assets-path="../../assets/"
  data-template="vertical-menu-template"
  data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
         <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
           <?php include('includes/navbar.php'); ?>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="row">
                <div class="col-12">
                  <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                      <h5 class="mb-0">Support Center</h5>
                      <span class="badge bg-primary">24/7 Support</span>
                    </div>
                    <div class="card-body">
                      <div class="row">
                        <!-- Support Options -->
                        <div class="col-md-4 mb-4">
                          <div class="card h-100 border border-primary">
                            <div class="card-body text-center">
                              <div class="avatar avatar-lg bg-primary bg-opacity-10 mb-3">
                                <span class="avatar-initial rounded-circle"><i class="ti tabler-headphones text-primary"></i></span>
                              </div>
                              <h4 class="card-title">Live Chat</h4>
                              <p class="card-text">Instant help from our support team</p>
                              <button class="btn btn-primary">Start Chat</button>
                            </div>
                          </div>
                        </div>
                        
                        <div class="col-md-4 mb-4">
                          <div class="card h-100 border border-success">
                            <div class="card-body text-center">
                              <div class="avatar avatar-lg bg-success bg-opacity-10 mb-3">
                                <span class="avatar-initial rounded-circle"><i class="ti tabler-mail text-success"></i></span>
                              </div>
                              <h4 class="card-title">Email Us</h4>
                              <p class="card-text">Response within 24 hours</p>
                              <a href="mailto:support@fingerprintportal.com" class="btn btn-success">Send Email</a>
                            </div>
                          </div>
                        </div>
                        
                        <div class="col-md-4 mb-4">
                          <div class="card h-100 border border-info">
                            <div class="card-body text-center">
                              <div class="avatar avatar-lg bg-info bg-opacity-10 mb-3">
                                <span class="avatar-initial rounded-circle"><i class="ti tabler-phone text-info"></i></span>
                              </div>
                              <h4 class="card-title">Call Us</h4>
                              <p class="card-text">9AM-6PM, Monday to Friday</p>
                              <a href="tel:+18001234567" class="btn btn-info">+1 (800) 123-4567</a>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <!-- FAQ Section -->
                      <div class="row mt-4">
                        <div class="col-12">
                          <div class="card">
                            <div class="card-header">
                              <h5 class="mb-0">Frequently Asked Questions</h5>
                            </div>
                            <div class="card-body">
                              <div class="accordion" id="faqAccordion">
                                <!-- FAQ Item 1 -->
                                <div class="card accordion-item">
                                  <h2 class="accordion-header">
                                    <button type="button" class="accordion-button" data-bs-toggle="collapse" data-bs-target="#faq1">
                                      How do I reset my password?
                                    </button>
                                  </h2>
                                  <div id="faq1" class="accordion-collapse collapse show" data-bs-parent="#faqAccordion">
                                    <div class="accordion-body">
                                      You can reset your password by clicking on "Forgot Password" on the login page. A reset link will be sent to your registered email address.
                                    </div>
                                  </div>
                                </div>
                                
                                <!-- FAQ Item 2 -->
                                <div class="card accordion-item">
                                  <h2 class="accordion-header">
                                    <button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#faq2">
                                      Why isn't my fingerprint scanner working?
                                    </button>
                                  </h2>
                                  <div id="faq2" class="accordion-collapse collapse" data-bs-parent="#faqAccordion">
                                    <div class="accordion-body">
                                      <ol>
                                        <li>Ensure you've installed the correct drivers</li>
                                        <li>Check that the device is properly connected</li>
                                        <li>Clean the scanner surface</li>
                                        <li>Try different fingers</li>
                                        <li>Restart the application</li>
                                      </ol>
                                    </div>
                                  </div>
                                </div>
                                
                                <!-- FAQ Item 3 -->
                                <div class="card accordion-item">
                                  <h2 class="accordion-header">
                                    <button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#faq3">
                                      How long does application processing take?
                                    </button>
                                  </h2>
                                  <div id="faq3" class="accordion-collapse collapse" data-bs-parent="#faqAccordion">
                                    <div class="accordion-body">
                                      Processing times vary by service type:
                                      <ul class="mt-2">
                                        <li>Name updates: 3-5 business days</li>
                                        <li>Address changes: 2-3 business days</li>
                                        <li>Date of birth corrections: 5-7 business days</li>
                                      </ul>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Knowledge Base -->
                      <div class="row mt-4">
                        <div class="col-12">
                          <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                              <h5 class="mb-0">Knowledge Base</h5>
                              <div class="input-group" style="width: 300px;">
                                <input type="text" class="form-control" placeholder="Search help articles...">
                                <button class="btn btn-outline-primary" type="button">
                                  <i class="ti tabler-search"></i>
                                </button>
                              </div>
                            </div>
                            <div class="card-body">
                              <div class="row">
                                <div class="col-md-4 mb-3">
                                  <div class="card h-100">
                                    <div class="card-body">
                                      <h6 class="card-title"><i class="ti tabler-file-text me-2"></i> Getting Started Guide</h6>
                                      <p class="card-text small">Learn how to set up your account and use basic features</p>
                                      <a href="#" class="btn btn-sm btn-outline-primary">Read Article</a>
                                    </div>
                                  </div>
                                </div>
                                <div class="col-md-4 mb-3">
                                  <div class="card h-100">
                                    <div class="card-body">
                                      <h6 class="card-title"><i class="ti tabler-fingerprint me-2"></i> Biometric Setup</h6>
                                      <p class="card-text small">Complete guide to fingerprint enrollment and troubleshooting</p>
                                      <a href="#" class="btn btn-sm btn-outline-primary">Read Article</a>
                                    </div>
                                  </div>
                                </div>
                                <div class="col-md-4 mb-3">
                                  <div class="card h-100">
                                    <div class="card-body">
                                      <h6 class="card-title"><i class="ti tabler-wallet me-2"></i> Payment Guide</h6>
                                      <p class="card-text small">How to add funds and make payments securely</p>
                                      <a href="#" class="btn btn-sm btn-outline-primary">Read Article</a>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <!-- System Status -->
                      <div class="row mt-4">
                        <div class="col-12">
                          <div class="card">
                            <div class="card-header">
                              <h5 class="mb-0">System Status</h5>
                            </div>
                            <div class="card-body">
                              <div class="alert alert-success">
                                <div class="d-flex justify-content-between align-items-center">
                                  <div>
                                    <i class="ti tabler-circle-check me-2"></i>
                                    <strong>All systems operational</strong>
                                  </div>
                                  <small>Last updated: <?php echo date('h:i A, F j'); ?></small>
                                </div>
                              </div>
                              <div class="table-responsive">
                                <table class="table">
                                  <thead>
                                    <tr>
                                      <th>Service</th>
                                      <th>Status</th>
                                      <th>Last Incident</th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    <tr>
                                      <td>Application Portal</td>
                                      <td><span class="badge bg-success">Operational</span></td>
                                      <td>No incidents reported</td>
                                    </tr>
                                    <tr>
                                      <td>Biometric Verification</td>
                                      <td><span class="badge bg-success">Operational</span></td>
                                      <td>No incidents reported</td>
                                    </tr>
                                    <tr>
                                      <td>Payment Processing</td>
                                      <td><span class="badge bg-success">Operational</span></td>
                                      <td>No incidents reported</td>
                                    </tr>
                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
             <?php include('includes/footer.php'); ?>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>

      <!-- Drag Target Area To SlideIn Menu On Small Screens -->
      <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->
     <?php include('includes/script.php'); ?>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>