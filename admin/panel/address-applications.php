<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Initialize filters
$statusFilter = $_GET['status'] ?? '';
$dateFrom = $_GET['date_from'] ?? '';
$dateTo = $_GET['date_to'] ?? '';
$appIdSearch = $_GET['app_id'] ?? '';

// Build the base query
$query = "SELECT 
            id,
            application_id,
            full_name,
            aadhaar_no,
            village,
            district,
            mobile_no,
            post,
            state,
            pincode,
            purpose,
            landmark,
            submitted_at,
            status,
            finger1,
            finger2,
            finger3,
            finger4,
            finger5,
            finger6,
            finger7,
            finger8,
            finger9,
            finger10,
            missing_fingers
          FROM address_update
          WHERE user_id = $user_id";

// Add WHERE conditions based on filters
$conditions = [];
$params = [];

if (!empty($statusFilter)) {
  $conditions[] = "status = ?";
  $params[] = $statusFilter;
}

if (!empty($dateFrom)) {
  $conditions[] = "submitted_at >= ?";
  $params[] = $dateFrom . ' 00:00:00';
}

if (!empty($dateTo)) {
  $conditions[] = "submitted_at <= ?";
  $params[] = $dateTo . ' 23:59:59';
}

if (!empty($appIdSearch)) {
  $conditions[] = "application_id LIKE ?";
  $params[] = '%' . $appIdSearch . '%';
}

if (!empty($conditions)) {
  $query .= " AND " . implode(" AND ", $conditions);
}

$query .= " ORDER BY submitted_at ASC";

// Prepare and execute the query
$stmt = $pdo->prepare($query);
$stmt->execute($params);
$addressUpdates = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Get distinct status values for filter dropdown
$statuses = $pdo->query("SELECT DISTINCT status FROM address_update")->fetchAll(PDO::FETCH_COLUMN);
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
<head>
    <?php include('includes/head.php'); ?>
    <title>Address Update Records - <?= htmlspecialchars($site_name, ENT_QUOTES, 'UTF-8') ?></title>
</head>

<body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->
            <?php include('includes/sidebar.php'); ?>

            <div class="menu-mobile-toggler d-xl-none rounded-1">
                <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
                    <i class="ti tabler-menu icon-base"></i>
                    <i class="ti tabler-chevron-right icon-base"></i>
                </a>
            </div>
            <!-- / Menu -->

            <!-- Layout container -->
            <div class="layout-page">
                <!-- Navbar -->
                <?php include('includes/navbar.php'); ?>
                <!-- / Navbar -->

                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <!-- Content -->
                    <div class="container-xxl flex-grow-1 container-p-y">
                        <div class="card">
                            <h5 class="card-header pb-0 text-md-start text-center">Address Update Records</h5>
                            <!-- Filter Section -->
                            <div class="card-body border-bottom">
                                <form method="GET" class="row g-3">
                                    <div class="col-md-3">
                                        <label class="form-label">Application ID</label>
                                        <input type="text" name="app_id" class="form-control" placeholder="Search by ID" value="<?= htmlspecialchars($appIdSearch) ?>">
                                    </div>

                                    <div class="col-md-2">
                                        <label class="form-label">Status</label>
                                        <select name="status" class="form-select">
                                            <option value="">All Statuses</option>
                                            <?php foreach ($statuses as $status): ?>
                                                <option value="<?= $status ?>" <?= $status === $statusFilter ? 'selected' : '' ?>>
                                                    <?= ucfirst($status) ?>
                                                </option>
                                            <?php endforeach; ?>
                                        </select>
                                    </div>

                                    <div class="col-md-3">
                                        <label class="form-label">Date From</label>
                                        <input type="date" name="date_from" class="form-control" value="<?= htmlspecialchars($dateFrom) ?>">
                                    </div>

                                    <div class="col-md-3">
                                        <label class="form-label">Date To</label>
                                        <input type="date" name="date_to" class="form-control" value="<?= htmlspecialchars($dateTo) ?>">
                                    </div>

                                    <div class="col-md-1 d-flex align-items-end">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="ti tabler-filter me-1"></i> Filter
                                        </button>
                                    </div>
                                </form>
                            </div>

                            <div class="card-datatable p-5">
                                <table class="dt-responsive table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>SL No</th>
                                            <th>Application ID</th>
                                            <th>Full Name</th>
                                            <th>Submitted At</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <?php foreach ($addressUpdates as $index => $update): ?>
                                        <tr>
                                            <td><?= $index + 1 ?></td>
                                            <td><?= htmlspecialchars($update['application_id']) ?></td>
                                            <td><?= htmlspecialchars($update['full_name']) ?></td>
                                            <td><?= date('d M Y, h:i A', strtotime($update['submitted_at'])) ?></td>
                                            <td>
                                                <?php
                                                $statusClass = '';
                                                switch (strtolower($update['status'])) {
                                                    case 'pending':
                                                        $statusClass = 'bg-label-warning';
                                                        break;
                                                    case 'approved':
                                                        $statusClass = 'bg-label-success';
                                                        break;
                                                    case 'rejected':
                                                        $statusClass = 'bg-label-danger';
                                                        break;
                                                    case 'processing':
                                                        $statusClass = 'bg-label-info';
                                                        break;
                                                    default:
                                                        $statusClass = 'bg-label-secondary';
                                                }
                                                ?>
                                                <span class="badge <?= $statusClass ?>">
                                                    <?= ucfirst($update['status']) ?>
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary view-btn"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#viewModal"
                                                    data-app-id="<?= htmlspecialchars($update['application_id']) ?>"
                                                    data-full-name="<?= htmlspecialchars($update['full_name']) ?>"
                                                    data-aadhaar-no="<?= htmlspecialchars($update['aadhaar_no']) ?>"
                                                    data-village="<?= htmlspecialchars($update['village']) ?>"
                                                    data-district="<?= htmlspecialchars($update['district']) ?>"
                                                    data-mobile-no="<?= htmlspecialchars($update['mobile_no']) ?>"
                                                    data-post="<?= htmlspecialchars($update['post']) ?>"
                                                    data-state="<?= htmlspecialchars($update['state']) ?>"
                                                    data-pincode="<?= htmlspecialchars($update['pincode']) ?>"
                                                    data-purpose="<?= htmlspecialchars($update['purpose']) ?>"
                                                    data-landmark="<?= htmlspecialchars($update['landmark']) ?>"
                                                    data-submitted="<?= date('d M Y, h:i A', strtotime($update['submitted_at'])) ?>"
                                                    data-status="<?= htmlspecialchars($update['status']) ?>"
                                                    data-finger1="<?= !empty($update['finger1']) ? 'true' : 'false' ?>"
                                                    data-finger2="<?= !empty($update['finger2']) ? 'true' : 'false' ?>"
                                                    data-finger3="<?= !empty($update['finger3']) ? 'true' : 'false' ?>"
                                                    data-finger4="<?= !empty($update['finger4']) ? 'true' : 'false' ?>"
                                                    data-finger5="<?= !empty($update['finger5']) ? 'true' : 'false' ?>"
                                                    data-finger6="<?= !empty($update['finger6']) ? 'true' : 'false' ?>"
                                                    data-finger7="<?= !empty($update['finger7']) ? 'true' : 'false' ?>"
                                                    data-finger8="<?= !empty($update['finger8']) ? 'true' : 'false' ?>"
                                                    data-finger9="<?= !empty($update['finger9']) ? 'true' : 'false' ?>"
                                                    data-finger10="<?= !empty($update['finger10']) ? 'true' : 'false' ?>"
                                                    data-missing-fingers="<?= htmlspecialchars($update['missing_fingers']) ?>">
                                                    <i class="ti tabler-eye me-1"></i> View
                                                </button>
                                            </td>
                                        </tr>
                                        <?php endforeach; ?>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <!-- / Content -->

                    <!-- Footer -->
                    <?php include('includes/footer.php'); ?>
                    <!-- / Footer -->

                    <div class="content-backdrop fade"></div>
                </div>
                <!-- Content wrapper -->
            </div>
            <!-- / Layout page -->
        </div>

        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>

        <!-- Drag Target Area To SlideIn Menu On Small Screens -->
        <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->

    <!-- View Modal -->
    <div class="modal fade" id="viewModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Application Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Application ID:</strong> <span id="modalAppId"></span></p>
                            <p><strong>Full Name:</strong> <span id="modalFullName"></span></p>
                            <p><strong>Aadhaar No:</strong> <span id="modalAadhaar"></span></p>
                            <p><strong>Mobile No:</strong> <span id="modalMobile"></span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Submitted At:</strong> <span id="modalSubmitted"></span></p>
                            <p><strong>Status:</strong> <span id="modalStatus"></span></p>
                            <p><strong>Purpose:</strong> <span id="modalPurpose"></span></p>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>Address Details</h6>
                            <p><strong>Village:</strong> <span id="modalVillage"></span></p>
                            <p><strong>Post:</strong> <span id="modalPost"></span></p>
                            <p><strong>District:</strong> <span id="modalDistrict"></span></p>
                            <p><strong>State:</strong> <span id="modalState"></span></p>
                            <p><strong>Pincode:</strong> <span id="modalPincode"></span></p>
                            <p><strong>Landmark:</strong> <span id="modalLandmark"></span></p>
                        </div>
                        <!-- Fingerprint visualization using images -->
                        <div class="col-md-6">
                            <h6>Fingerprint Collection</h6>
                            <div class="fingerprint-diagram">
                                <div class="d-flex justify-content-center align-items-start">
                                    <!-- Left Hand -->
                                    <div class="hand-wrapper me-5">
                                        <h6 class="text-center">LEFT HAND</h6>
                                        <div class="hand-container position-relative">
                                            <img src="../../assets/images/left-hand.png" alt="Left Hand" class="hand-image" id="left-hand-image" />
                                            <!-- Indicators for fingers 1-5 (Left Hand) -->
                                            <span class="finger-indicator" id="finger1-indicator">?</span> <!-- Thumb -->
                                            <span class="finger-indicator" id="finger2-indicator">?</span> <!-- Index -->
                                            <span class="finger-indicator" id="finger3-indicator">?</span> <!-- Middle -->
                                            <span class="finger-indicator" id="finger4-indicator">?</span> <!-- Ring -->
                                            <span class="finger-indicator" id="finger5-indicator">?</span> <!-- Little -->
                                        </div>
                                    </div>

                                    <!-- Right Hand -->
                                    <div class="hand-wrapper">
                                        <h6 class="text-center">RIGHT HAND</h6>
                                        <div class="hand-container position-relative">
                                            <img src="../../assets/images/right-hand.png" alt="Right Hand" class="hand-image" id="right-hand-image" />
                                            <!-- Indicators for fingers 6-10 (Right Hand) -->
                                            <span class="finger-indicator" id="finger6-indicator">?</span> <!-- Thumb -->
                                            <span class="finger-indicator" id="finger7-indicator">?</span> <!-- Index -->
                                            <span class="finger-indicator" id="finger8-indicator">?</span> <!-- Middle -->
                                            <span class="finger-indicator" id="finger9-indicator">?</span> <!-- Ring -->
                                            <span class="finger-indicator" id="finger10-indicator">?</span> <!-- Little -->
                                        </div>
                                    </div>
                                </div>

                                <div class="mt-3 text-center">
                                    <p><span class="text-success">✓</span> = Collected | <span class="text-danger">✗</span> = Not Collected</p>
                                    <p><strong>Missing Fingers:</strong> <span id="modalMissingFingers"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="downloadPdf">
                        <i class="ti tabler-file-download me-1"></i> Download PDF
                    </button>
                </div>
            </div>
        </div>
    </div>

    <?php include('includes/script.php'); ?>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize DataTable
        const dt_responsive_table = document.querySelector('.dt-responsive');
        if (dt_responsive_table) {
            let dt_responsive = new DataTable(dt_responsive_table, {
                responsive: true,
                layout: {
                    topStart: {
                        rowClass: 'row my-0 justify-content-between',
                        features: ['pageLength'],
                        pageLength: {
                            menu: [10, 25, 50, 100],
                            text: 'Show _MENU_ entries'
                        }
                    },
                    bottomStart: {
                        rowClass: 'row mx-3 justify-content-between',
                        features: ['info']
                    },
                    bottomEnd: 'paging'
                },
                language: {
                    paginate: {
                        next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
                        previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
                        first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                        last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
                    },
                    search: '',
                    searchPlaceholder: 'Search records...',
                    lengthMenu: 'Show _MENU_ entries'
                },
                columnDefs: [{
                    responsivePriority: 1,
                    targets: 1
                }, // Application ID
                {
                    responsivePriority: 2,
                    targets: 2
                }, // Full Name
                {
                    responsivePriority: 3,
                    targets: -1
                } // Actions
                ]
            });
        }

        // Handle view modal
        const viewModal = document.getElementById('viewModal');
        if (viewModal) {
            viewModal.addEventListener('show.bs.modal', function(event) {
                const button = event.relatedTarget;
                
                // Set modal content
                document.getElementById('modalAppId').textContent = button.dataset.appId;
                document.getElementById('modalFullName').textContent = button.dataset.fullName;
                document.getElementById('modalAadhaar').textContent = button.dataset.aadhaarNo;
                document.getElementById('modalVillage').textContent = button.dataset.village;
                document.getElementById('modalDistrict').textContent = button.dataset.district;
                document.getElementById('modalMobile').textContent = button.dataset.mobileNo;
                document.getElementById('modalPost').textContent = button.dataset.post;
                document.getElementById('modalState').textContent = button.dataset.state;
                document.getElementById('modalPincode').textContent = button.dataset.pincode;
                document.getElementById('modalPurpose').textContent = button.dataset.purpose;
                document.getElementById('modalLandmark').textContent = button.dataset.landmark || 'N/A';
                document.getElementById('modalSubmitted').textContent = button.dataset.submitted;
                document.getElementById('modalMissingFingers').textContent = button.dataset.missingFingers || 'None';

                // Set status with badge
                const statusSpan = document.getElementById('modalStatus');
                statusSpan.innerHTML = '';
                const badge = document.createElement('span');
                badge.className = `badge ${button.dataset.status === 'pending' ? 'bg-label-warning' : 
                                    button.dataset.status === 'approved' ? 'bg-label-success' : 
                                    button.dataset.status === 'rejected' ? 'bg-label-danger' : 
                                    button.dataset.status === 'processing' ? 'bg-label-info' : 'bg-label-secondary'}`;
                badge.textContent = button.dataset.status.charAt(0).toUpperCase() + button.dataset.status.slice(1);
                statusSpan.appendChild(badge);

                // Update fingerprint status for all fingers
                for (let i = 1; i <= 10; i++) {
                    const fingerIndicatorEl = document.getElementById(`finger${i}-indicator`);
                    
                    if (fingerIndicatorEl) {
                        // Get finger data from button dataset
                        const isCollected = button.dataset[`finger${i}`] === 'true';
                        
                        // Update status symbol and color
                        fingerIndicatorEl.textContent = isCollected ? '✓' : '✗';
                        fingerIndicatorEl.classList.remove('text-success', 'text-danger');
                        fingerIndicatorEl.classList.add(isCollected ? 'text-success' : 'text-danger');
                    }
                }

                // Set PDF download link
                document.getElementById('downloadPdf').onclick = function() {
                    window.location.href = `generate_pdf.php?app_id=${button.dataset.appId}`;
                };
            });
        }
    });
    </script>
    
    <style>
        /* Fingerprint Visualization Styles */
        .fingerprint-diagram {
            margin-top: 1rem;
            padding: 1rem;
            background-color: #2c3e50;
            border-radius: 5px;
        }

        .hand-wrapper {
            text-align: center;
            flex: 1;
        }

        .hand-container {
            position: relative;
            margin: 0 auto;
            width: 150px;
            height: 165px;
        }

        .hand-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .finger-indicator {
            position: absolute;
            font-weight: bold;
            font-size: 18px;
            width: 28px;
            height: 28px;
            line-height: 28px;
            text-align: center;
            background-color: #fff;
            border-radius: 50%;
            border: 1px solid #666;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        /* Left Hand Finger Positions */
        #finger1-indicator {
            left: 15px;
            top: 70px;
        } /* Left Thumb */
        #finger2-indicator {
            left: 40px;
            top: 10px;
        } /* Left Index */
        #finger3-indicator {
            left: 70px;
            top: 1px;
        } /* Left Middle */
        #finger4-indicator {
            left: 97px;
            top: 5px;
        } /* Left Ring */
        #finger5-indicator {
            left: 120px;
            top: 30px;
        } /* Left Little */

        /* Right Hand Finger Positions */
        #finger6-indicator {
            left: 115px;
            top: 70px;
        } /* Right Thumb */
        #finger7-indicator {
            left: 85px;
            top: 10px;
        } /* Right Index */
        #finger8-indicator {
            left: 55px;
            top: 1px;
        } /* Right Middle */
        #finger9-indicator {
            left: 27px;
            top: 5px;
        } /* Right Ring */
        #finger10-indicator {
            left: 5px;
            top: 30px;
        } /* Right Little */

        .finger-indicator.text-success {
            color: #28a745;
        }

        .finger-indicator.text-danger {
            color: #dc3545;
        }

        .finger-indicator:hover {
            cursor: pointer;
            opacity: 0.8;
            border-width: 2px;
        }

        .fingerprint-diagram h6 {
            color: #fff;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
        }

        .fingerprint-diagram p {
            color: #fff;
            margin: 0.5rem 0;
        }

        .fingerprint-diagram .text-success {
            color: #28a745;
        }

        .fingerprint-diagram .text-danger {
            color: #dc3545;
        }
    </style>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>