<?php
$code = base64_decode('<?php
require_once __DIR__ . '/../../../config/database.php';

// Initialize logging
$logDir = __DIR__ . '/../../../logs';
$logFile = $logDir . '/activation_payment_processing.log';

if (!is_dir($logDir)) {
    mkdir($logDir, 0755, true);
}

// Optionally create the log file if it doesn't exist
if (!file_exists($logFile)) {
    touch($logFile);
    chmod($logFile, 0644);
}

file_put_contents($logFile, date('Y-m-d H:i:s') . " - Activation payment processing started\n", FILE_APPEND);

// Log the request details for debugging
file_put_contents($logFile, date('Y-m-d H:i:s') . " - GET: " . print_r($_GET, true) . "\n", FILE_APPEND);
file_put_contents($logFile, date('Y-m-d H:i:s') . " - POST: " . print_r($_POST, true) . "\n", FILE_APPEND);

// Verify database connection
if (!isset($pdo) || !($pdo instanceof PDO)) {
    $error = 'Database connection not established';
    file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: $error\n", FILE_APPEND);
    renderResponse('error', 'Database Error', $error);
}

// Validate input parameters
if (!isset($_GET['order_id']) || empty($_GET['order_id']) || !isset($_GET['user_id']) || empty($_GET['user_id'])) {
    $error = 'Order ID or User ID is missing';
    file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: $error\n", FILE_APPEND);
    renderResponse('error', 'Missing Information', $error);
}

$order_id = trim($_GET['order_id']);
$user_id = trim($_GET['user_id']);

// Input validation
if (!preg_match('/^ACT-[a-zA-Z0-9\-_]+$/', $order_id)) {
    $error = 'Invalid activation order ID format';
    file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: $error\n", FILE_APPEND);
    renderResponse('error', 'Invalid Input', $error);
}

if (!is_numeric($user_id) || $user_id <= 0) {
    $error = 'Invalid user ID';
    file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: $error\n", FILE_APPEND);
    renderResponse('error', 'Invalid Input', $error);
}

file_put_contents($logFile, date('Y-m-d H:i:s') . " - Processing activation order $order_id for user $user_id\n", FILE_APPEND);

try {
    // Get payment gateway settings
    $stmt = $pdo->prepare("SELECT api_url, user_token FROM payment_settings WHERE is_primary = 1 AND active = 1 LIMIT 1");
    $stmt->execute();
    $gateway = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if (!$gateway) {
        $error = 'No active payment gateway found';
        file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: $error\n", FILE_APPEND);
        renderResponse('error', 'Payment Gateway Error', $error);
    }

    // Get activation fee amount from site settings
    $stmt = $pdo->prepare("SELECT fees FROM site_global_settings WHERE id = 1");
    $stmt->execute();
    $settings = $stmt->fetch(PDO::FETCH_ASSOC);
    $activationFee = $settings['fees'] ?? 2.50;

    // Get transaction details with FOR UPDATE to prevent race conditions
    $pdo->beginTransaction();
    $stmt = $pdo->prepare("SELECT * FROM transactions_list WHERE reference_id = ? AND user_id = ? AND service_type = 'activation_fee' FOR UPDATE");
    $stmt->execute([$order_id, $user_id]);
    $transaction = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!$transaction) {
        $pdo->rollBack();
        $error = 'Activation transaction record not found';
        file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: $error\n", FILE_APPEND);
        renderResponse('error', 'Not Found', $error);
    }

    // Check if user is already activated
    $stmt = $pdo->prepare("SELECT fees_paid FROM users WHERE id = ?");
    $stmt->execute([$user_id]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);
    
    if ($user && $user['fees_paid'] == 1) {
        $pdo->rollBack();
        $message = 'User is already activated';
        file_put_contents($logFile, date('Y-m-d H:i:s') . " - INFO: $message\n", FILE_APPEND);
        renderResponse('info', 'Already Activated', $message);
    }

    // Check order status with payment gateway
    $checkData = [
        'user_token' => $gateway['user_token'],
        'order_id' => $order_id
    ];

    file_put_contents($logFile, date('Y-m-d H:i:s') . " - Checking payment gateway for activation order $order_id\n", FILE_APPEND);
    file_put_contents($logFile, date('Y-m-d H:i:s') . " - API URL: " . $gateway['api_url'] . "/api/check-order-status\n", FILE_APPEND);
    file_put_contents($logFile, date('Y-m-d H:i:s') . " - Request data: " . print_r($checkData, true) . "\n", FILE_APPEND);

    $ch = curl_init($gateway['api_url'] . '/api/check-order-status');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($checkData));
    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: application/json']);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    $curlError = curl_error($ch);
    curl_close($ch);

    file_put_contents($logFile, date('Y-m-d H:i:s') . " - Gateway response HTTP code: $httpCode\n", FILE_APPEND);
    file_put_contents($logFile, date('Y-m-d H:i:s') . " - Gateway response: $response\n", FILE_APPEND);

    if ($curlError) {
        $pdo->rollBack();
        $error = "Payment gateway connection failed: $curlError";
        file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: $error\n", FILE_APPEND);
        renderResponse('error', 'Connection Error', $error);
    }

    if ($httpCode !== 200) {
        $pdo->rollBack();
        $error = "Payment gateway returned HTTP $httpCode";
        file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: $error\n", FILE_APPEND);
        renderResponse('error', 'Gateway Error', $error);
    }

    $result = json_decode($response, true);

    if (!$result) {
        $pdo->rollBack();
        $error = 'Payment gateway returned invalid response';
        file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: $error\n", FILE_APPEND);
        renderResponse('error', 'Invalid Response', $error);
    }

    // Unified status detection for different API providers
    $isSuccess = false;
    $isPending = false;
    $statusMessage = $result['message'] ?? 'Unknown status';

    // Check for first API provider format (COMPLETED/SUCCESS)
    if (isset($result['status'])) {
        $statusVal = is_bool($result['status']) ? ($result['status'] ? 'SUCCESS' : 'FAILED') : strtoupper($result['status']);
        $txnStatus = isset($result['result']['txnStatus']) ? strtoupper($result['result']['txnStatus']) : '';
        
        $isSuccess = in_array($statusVal, ['COMPLETED', 'SUCCESS', 'TRUE']) && 
                     in_array($txnStatus, ['COMPLETED', 'SUCCESS', '']);
        $isPending = $txnStatus === 'PENDING';
    }
    // Check for second API provider format (true/false with txnStatus)
    elseif (isset($result['result']['txnStatus'])) {
        $txnStatus = strtoupper($result['result']['txnStatus']);
        $isSuccess = $txnStatus === 'SUCCESS';
        $isPending = $txnStatus === 'PENDING';
    }

    file_put_contents($logFile, date('Y-m-d H:i:s') . " - Payment status evaluation: " . 
        ($isSuccess ? 'SUCCESS' : ($isPending ? 'PENDING' : 'FAILED')) . "\n", FILE_APPEND);

    if ($isSuccess) {
        try {
            // Update user's activation status
            $stmt = $pdo->prepare("UPDATE users SET fees_paid = 1 WHERE id = ?");
            $stmt->execute([$user_id]);

            // Update transaction description to mark as completed
            $stmt = $pdo->prepare("UPDATE transactions_list SET description = CONCAT(description, ' - COMPLETED') WHERE reference_id = ? AND user_id = ?");
            $stmt->execute([$order_id, $user_id]);

            $pdo->commit();

            file_put_contents($logFile, date('Y-m-d H:i:s') . " - SUCCESS: Activation fee payment completed for user $user_id\n", FILE_APPEND);
            
            // FIX: Call renderResponse instead of exit()
            renderResponse('success', 'Payment Successful', 'Your activation payment was successful! Your account has been activated.');
            
        } catch (Exception $e) {
            $pdo->rollBack();
            file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: " . $e->getMessage() . "\n", FILE_APPEND);
            renderResponse('error', 'Processing Error', 'An error occurred while processing your activation payment.');
        }
    } elseif ($isPending) {
        $pdo->commit();

        file_put_contents($logFile, date('Y-m-d H:i:s') . " - INFO: Activation payment for order $order_id is still pending\n", FILE_APPEND);
        renderResponse('pending', 'Payment Processing', 'Your activation payment is still being processed. We will notify you once it is completed.');
    } else {
        $pdo->commit();

        file_put_contents($logFile, date('Y-m-d H:i:s') . " - ERROR: Payment failed - $statusMessage\n", FILE_APPEND);
        renderResponse('failed', 'Payment Failed', $statusMessage);
    }

} catch (PDOException $e) {
    if (isset($pdo) && $pdo->inTransaction()) {
        $pdo->rollBack();
    }
    file_put_contents($logFile, date('Y-m-d H:i:s') . " - DATABASE ERROR: " . $e->getMessage() . "\n", FILE_APPEND);
    renderResponse('error', 'Database Error', 'A database error occurred while processing your activation payment.');
} catch (Exception $e) {
    if (isset($pdo) && $pdo->inTransaction()) {
        $pdo->rollBack();
    }
    file_put_contents($logFile, date('Y-m-d H:i:s') . " - SYSTEM ERROR: " . $e->getMessage() . "\n", FILE_APPEND);
    renderResponse('error', 'System Error', 'An unexpected error occurred while processing your activation payment.');
}

function renderResponse($status, $title, $message) {
    // Define colors and icons based on status
    $colors = [
        'success' => '#28a745',
        'pending' => '#ffc107',
        'failed' => '#dc3545',
        'error' => '#dc3545',
        'info' => '#17a2b8'
    ];
    
    $icons = [
        'success' => '✓',
        'pending' => '⏳',
        'failed' => '✗',
        'error' => '⚠',
        'info' => 'ℹ'
    ];
    
    $color = $colors[$status] ?? '#6c757d';
    $icon = $icons[$status] ?? '?';
    
    echo <<<HTML
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Activation Status - $title</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f8f9fa;
                margin: 0;
                padding: 20px;
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
            }
            .container {
                background-color: white;
                border-radius: 10px;
                box-shadow: 0 0 20px rgba(0,0,0,0.1);
                padding: 30px;
                text-align: center;
                max-width: 500px;
                width: 100%;
            }
            .icon {
                font-size: 60px;
                margin-bottom: 20px;
            }
            .title {
                font-size: 24px;
                font-weight: bold;
                margin-bottom: 15px;
                color: #333;
            }
            .message {
                font-size: 16px;
                color: #666;
                margin-bottom: 25px;
                line-height: 1.5;
            }
            .button {
                display: inline-block;
                background-color: $color;
                color: white;
                padding: 12px 24px;
                text-decoration: none;
                border-radius: 5px;
                font-weight: bold;
                transition: background-color 0.3s;
            }
            .button:hover {
                background-color: #0056b3;
                color: white;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="icon" style="color: $color;">$icon</div>
            <div class="title">$title</div>
            <div class="message">$message</div>
        </div>
    </body>
    </html>
HTML;
    exit();
}
?>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>