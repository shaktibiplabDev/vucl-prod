<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Check if service is active
$stmt = $pdo->prepare("SELECT is_active, price FROM prices_list WHERE service_key = ? LIMIT 1");
$stmt->execute(['mobile-email-update']);
$service = $stmt->fetch(PDO::FETCH_ASSOC);
$isPanelActive = $service['is_active'] ?? false;
$price = (float)($service['price'] ?? 0);

if (!$isPanelActive) {
    echo "<script>
        document.addEventListener('DOMContentLoaded', function() {
            Swal.fire({
                title: '<strong>Service not available at the moment.</strong>',
                html: '<p>The mobile/email service is temporarily disabled. Please try again later.</p>',
                icon: 'info',
                confirmButtonText: '<i class=\"icon-base ti tabler-check\"></i> OK',
                customClass: {
                    popup: 'swal-wide',
                    confirmButton: 'btn btn-success'
                }
            }).then(() => {
                window.location.href = '/admin/panel/index.php';
            });
        });
    </script>";
    // Don't show any form content
    include('includes/head.php');
    echo '</body></html>';
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
$stmt->execute([$user_id]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$user) {
    header("Location: logout.php");
    exit;
}

$wallet_balance = (float)$user['wallet'];
$show_form = ($wallet_balance >= $price);

$success_message = '';
$error_message = '';
$application_id = null;

// Handle form submission if form is shown and submitted
if ($show_form && $_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['submit_update'])) {
    try {
        $pdo->beginTransaction(); // Start transaction

        // FIRST: Deduct from wallet with balance check
        $deduct_stmt = $pdo->prepare("UPDATE users SET wallet = wallet - ? WHERE id = ? AND wallet >= ?");
        $deduct_stmt->execute([$price, $user_id, $price]);
        $rows_affected = $deduct_stmt->rowCount();

        if ($rows_affected === 0) {
            throw new Exception("Insufficient wallet balance. Required: ₹$price, Available: ₹$wallet_balance");
        }

        // Validate required fields
        $required = ['full_name', 'mobile_no', 'email_id', 'purpose', 'aadhar_no'];
        foreach ($required as $field) {
            if (empty($_POST[$field])) throw new Exception("All required fields must be filled");
        }

        if (!filter_var($_POST['email_id'], FILTER_VALIDATE_EMAIL)) {
            throw new Exception("Invalid email format");
        }

        if (!preg_match('/^[0-9]{10}$/', $_POST['mobile_no'])) {
            throw new Exception("Mobile number must be 10 digits");
        }

        if (!preg_match('/^[0-9]{12}$/', $_POST['aadhar_no'])) {
            throw new Exception("Aadhar number must be 12 digits");
        }

        // Validate biometric data
        $capturedFingers = !empty($_POST['fingerprint']) ? count($_POST['fingerprint']) : 0;
        $missingFingersList = array_filter(explode(',', $_POST['missing_fingers'] ?? ''), fn($v) => is_numeric($v));
        $missingFingersCount = count($missingFingersList);

        if (($capturedFingers + $missingFingersCount) < 6) {
            throw new Exception("At least 6 fingerprints must be captured or marked as missing");
        }

        // Validate fingerprint data
        if (!empty($_POST['fingerprint'])) {
            foreach ($_POST['fingerprint'] as $fingerId => $bmpData) {
                if (in_array($fingerId, $missingFingersList)) continue;
                if (!base64_decode($bmpData, true)) {
                    throw new Exception("Invalid fingerprint data for finger $fingerId");
                }
            }
        }

        // Process fingerprints
        $fingerprints = array_fill(1, 10, null);
        if (!empty($_POST['fingerprint'])) {
            foreach ($_POST['fingerprint'] as $fingerId => $bmpData) {
                $fingerId = (int)$fingerId;
                if ($fingerId >= 1 && $fingerId <= 10 && !empty($bmpData)) {
                    $fingerprints[$fingerId] = 'data:image/bmp;base64,' . $bmpData;
                }
            }
        }

        // Generate application ID
        $application_id = 'UPD-MB-EM-' . date('Ymd-His') . '-' . rand(10000, 99999);

        // Insert application data
        $stmt = $pdo->prepare("
            INSERT INTO mobile_email_updates (
                application_id, user_id, full_name, mobile_no, father_name, aadhar_no, email_id, purpose,
                finger1, finger2, finger3, finger4, finger5,
                finger6, finger7, finger8, finger9, finger10,
                missing_fingers, submitted_at
            ) VALUES (
                ?, ?, ?, ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?,
                ?, NOW()
            )
        ");

        $stmt->execute([
            $application_id,
            $user_id,
            htmlspecialchars($_POST['full_name']),
            $_POST['mobile_no'],
            !empty($_POST['father_name']) ? htmlspecialchars($_POST['father_name']) : null,
            $_POST['aadhar_no'],
            $_POST['email_id'],
            $_POST['purpose'],
            $fingerprints[1],
            $fingerprints[2],
            $fingerprints[3],
            $fingerprints[4],
            $fingerprints[5],
            $fingerprints[6],
            $fingerprints[7],
            $fingerprints[8],
            $fingerprints[9],
            $fingerprints[10],
            !empty($missingFingersList) ? implode(',', $missingFingersList) : null
        ]);

        $pdo->commit(); // Commit transaction

        $success_message = "Update submitted successfully! ₹" . number_format($price, 2) . " deducted. Application ID: $application_id";

        echo "<script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    title: '<strong>Success</strong>',
                    html: " . json_encode("<p>$success_message</p>") . ",
                    icon: 'success',
                    confirmButtonText: '<i class=\"icon-base ti tabler-check\"></i> OK',
                    customClass: {
                        popup: 'swal-wide',
                        confirmButton: 'btn btn-success'
                    }
                }).then(() => {
                    window.location.href = 'mobile-email-applications.php';
                });
            });
        </script>";
        unset($_POST);
    } catch (Exception $e) {
        $pdo->rollBack(); // Roll back transaction on error
        $error_message = 'Error: ' . $e->getMessage();

        echo "<script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    title: '<strong>Error</strong>',
                    html: " . json_encode("<p>$error_message</p>") . ",
                    icon: 'error',
                    confirmButtonText: '<i class=\"icon-base ti tabler-alert-circle\"></i> OK',
                    customClass: {
                        popup: 'swal-wide',
                        confirmButton: 'btn btn-danger'
                    }
                });
            });
        </script>";
    }
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
<?php include('includes/head.php'); ?>

<body>
  <!-- Layout wrapper -->
  <div class="layout-wrapper layout-content-navbar">
    <div class="layout-container">
      <!-- Menu -->
      <?php include('includes/sidebar.php'); ?>

      <div class="menu-mobile-toggler d-xl-none rounded-1">
        <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
          <i class="ti tabler-menu icon-base"></i>
          <i class="ti tabler-chevron-right icon-base"></i>
        </a>
      </div>
      <!-- / Menu -->

      <!-- Layout container -->
      <div class="layout-page">
        <!-- Navbar -->
        <?php include('includes/navbar.php'); ?>

        <!-- Content wrapper -->
        <div class="content-wrapper">
          <!-- Content -->
          <div class="container-xxl flex-grow-1 container-p-y">
            <div class="row">
              <div class="col-12">
                <small class="fw-medium">Mobile/Email Update</small>
                
                <?php if (!$show_form): ?>
                  <div class="alert alert-danger mt-3">
                    <h4 class="alert-heading">Insufficient Wallet Balance</h4>
                    <p>You need at least ₹<?= number_format($price, 2) ?> in your wallet to update mobile/email. Your current balance is ₹<?= number_format($wallet_balance, 2) ?>.</p>
                    <hr>
                    <div class="d-flex justify-content-between">
                      <a href="/admin/panel/deposit.php" class="btn btn-primary">
                        <i class="icon-base ti tabler-wallet me-2"></i> Recharge Wallet
                      </a>
                      <a href="/admin/panel/index.php" class="btn btn-secondary">
                        <i class="icon-base ti tabler-arrow-left me-2"></i> Back to Dashboard
                      </a>
                    </div>
                  </div>
                <?php else: ?>
                  <!-- Only show the form if user has sufficient balance -->
                  <div id="wizard-validation" class="bs-stepper vertical wizard-modern wizard-modern-vertical-icons-example mt-2">
                    <div class="bs-stepper-header">
                      <div class="step" data-target="#customer-details">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-user icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Customer Details</span>
                            <span class="bs-stepper-subtitle">Basic information</span>
                          </span>
                        </button>
                      </div>
                      <div class="line"></div>
                      <div class="step" data-target="#biometric-verification">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-fingerprint icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Biometric</span>
                            <span class="bs-stepper-subtitle">Fingerprint verification</span>
                          </span>
                        </button>
                      </div>
                    </div>
                    <div class="bs-stepper-content">
                      <form id="updateForm" method="post" class="needs-validation" enctype="multipart/form-data" action="" novalidate>
                        <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">

                        <!-- Customer Details -->
                        <div id="customer-details" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Customer Information</h6>
                            <small>Enter customer details</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-sm-6">
                              <label class="form-label" for="full-name">Full Name</label>
                              <input type="text" 
                                id="full-name" 
                                name="full_name" 
                                class="form-control" 
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['full_name']) ? htmlspecialchars($_POST['full_name']) : '' ?>">
                              <div class="invalid-feedback">Please enter your full name</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="mobile-no">Mobile No.</label>
                              <input type="tel" 
                                id="mobile-no" 
                                name="mobile_no" 
                                class="form-control" 
                                pattern="^\d{10}$"
                                required
                                value="<?= isset($_POST['mobile_no']) ? htmlspecialchars($_POST['mobile_no']) : '' ?>">
                              <div class="invalid-feedback">Please enter a valid mobile number</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="father-name">Father Name (OPTIONAL)</label>
                              <input type="text" 
                                id="father-name" 
                                name="father_name" 
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                value="<?= isset($_POST['father_name']) ? htmlspecialchars($_POST['father_name']) : '' ?>">
                              <div class="invalid-feedback">Please enter your father's name</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="aadhar-no">Aadhar No.</label>
                              <input type="tel" 
                                id="aadhar-no" 
                                name="aadhar_no" 
                                class="form-control" 
                                pattern="^\d{12}$"
                                required
                                value="<?= isset($_POST['aadhar_no']) ? htmlspecialchars($_POST['aadhar_no']) : '' ?>">
                              <div class="invalid-feedback">Please enter a valid Aadhar number</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="email-id">Email ID</label>
                              <input type="email" 
                                id="email-id" 
                                name="email_id" 
                                class="form-control" 
                                required
                                value="<?= isset($_POST['email_id']) ? htmlspecialchars($_POST['email_id']) : '' ?>">
                              <div class="invalid-feedback">Please enter a valid email address</div>
                            </div>
                            <div class="col-12">
                              <label class="form-label" for="purpose">Purpose of Update</label>
                              <select id="purpose" name="purpose" class="form-select" required>
                                <option value="">Select purpose</option>
                                <option value="Mobile Number Change" <?= (isset($_POST['purpose']) && $_POST['purpose'] == 'Mobile Number Change') ? 'selected' : '' ?>>Mobile Number Change</option>
                                <option value="Email Address Change" <?= (isset($_POST['purpose']) && $_POST['purpose'] == 'Email Address Change') ? 'selected' : '' ?>>Email Address Change</option>
                                <option value="Both Mobile and Email Update" <?= (isset($_POST['purpose']) && $_POST['purpose'] == 'Both Mobile and Email Update') ? 'selected' : '' ?>>Both Mobile and Email Update</option>
                              </select>
                            </div>
                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev" disabled>
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="button" class="btn btn-primary btn-next">
                                <span class="align-middle d-sm-inline-block d-none me-sm-2">Next</span>
                                <i class="icon-base ti tabler-arrow-right icon-xs"></i>
                              </button>
                            </div>
                          </div>
                        </div>

                        <!-- Biometric Verification -->
                        <div id="biometric-verification" class="content">
                          <input type="hidden" name="missing_fingers" id="missing-fingers-input" value="">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Biometric Verification</h6>
                            <small>Capture all 10 fingerprints</small>
                          </div>
                          <div class="row g-3">
                            <!-- Device Status Panel -->
                            <div class="col-12">
                              <div class="status-panel" id="serviceStatus">Checking device services...</div>
                            </div>

                            <!-- Left Hand -->
                            <div class="col-md-6">
                              <div class="card mb-4">
                                <div class="card-header d-flex justify-content-between">
                                  <h5>Left Hand</h5>
                                  <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="left-hand-missing">
                                    <label class="form-check-label" for="left-hand-missing">Entire Hand Missing</label>
                                  </div>
                                </div>
                                <div class="card-body text-center">
                                  <div class="row g-3">
                                    <?php
                                    $leftFingers = [
                                      '1' => 'Left Thumb',
                                      '2' => 'Left Index',
                                      '3' => 'Left Middle',
                                      '4' => 'Left Ring',
                                      '5' => 'Left Little'
                                    ];
                                    foreach ($leftFingers as $num => $finger): ?>
                                      <div class="col-12">
                                        <div class="d-flex align-items-center">
                                          <button type="button" class="btn btn-outline-primary me-3 fingerprint-btn" data-finger="<?= $finger ?>" data-finger-id="<?= $num ?>">
                                            <i class="icon-base ti tabler-fingerprint"></i> Capture
                                          </button>
                                          <span><?= $finger ?></span>
                                          <div class="form-check ms-auto">
                                            <input class="form-check-input finger-missing" type="checkbox" id="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>" data-finger-id="<?= $num ?>">
                                            <label class="form-check-label" for="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>">Missing</label>
                                          </div>
                                          <div class="finger-preview ms-2" data-finger-id="<?= $num ?>">
                                            <canvas class="finger-canvas" width="60" height="80" style="border: 1px solid #ddd; border-radius: 4px;"></canvas>
                                            <div class="finger-quality small text-muted mt-1"></div>
                                          </div>
                                        </div>
                                        <input type="hidden" id="fingerprint-data-<?= $num ?>" name="fingerprint[<?= $num ?>]">
                                      </div>
                                    <?php endforeach; ?>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <!-- Right Hand -->
                            <div class="col-md-6">
                              <div class="card mb-4">
                                <div class="card-header d-flex justify-content-between">
                                  <h5>Right Hand</h5>
                                  <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="right-hand-missing">
                                    <label class="form-check-label" for="right-hand-missing">Entire Hand Missing</label>
                                  </div>
                                </div>
                                <div class="card-body text-center">
                                  <div class="row g-3">
                                    <?php
                                    $rightFingers = [
                                      '6' => 'Right Thumb',
                                      '7' => 'Right Index',
                                      '8' => 'Right Middle',
                                      '9' => 'Right Ring',
                                      '10' => 'Right Little'
                                    ];
                                    foreach ($rightFingers as $num => $finger): ?>
                                      <div class="col-12">
                                        <div class="d-flex align-items-center">
                                          <button type="button" class="btn btn-outline-primary me-3 fingerprint-btn" data-finger="<?= $finger ?>" data-finger-id="<?= $num ?>">
                                            <i class="icon-base ti tabler-fingerprint"></i> Capture
                                          </button>
                                          <span><?= $finger ?></span>
                                          <div class="form-check ms-auto">
                                            <input class="form-check-input finger-missing" type="checkbox" id="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>" data-finger-id="<?= $num ?>">
                                            <label class="form-check-label" for="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>">Missing</label>
                                          </div>
                                          <div class="finger-preview ms-2" data-finger-id="<?= $num ?>">
                                            <canvas class="finger-canvas" width="60" height="80" style="border: 1px solid #ddd; border-radius: 4px;"></canvas>
                                            <div class="finger-quality small text-muted mt-1"></div>
                                          </div>
                                        </div>
                                        <input type="hidden" id="fingerprint-data-<?= $num ?>" name="fingerprint[<?= $num ?>]">
                                      </div>
                                    <?php endforeach; ?>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev">
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="submit" name="submit_update" class="btn btn-success btn-submit">
                                <i class="icon-base ti tabler-check me-2"></i> Submit Update
                              </button>
                            </div>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                <?php endif; ?>
              </div>
            </div>
          </div>
          <!-- / Content -->

          <!-- Footer -->
          <?php include('includes/footer.php'); ?>
          <!-- / Footer -->

          <div class="content-backdrop fade"></div>
        </div>
        <!-- Content wrapper -->
      </div>
      <!-- / Layout page -->
    </div>

    <!-- Overlay -->
    <div class="layout-overlay layout-menu-toggle"></div>

    <!-- Drag Target Area To SlideIn Menu On Small Screens -->
    <div class="drag-target"></div>
  </div>
  <!-- / Layout wrapper -->
  <?php include('includes/script.php'); ?>
  
  <?php if ($show_form): ?>
  <!-- Only load these scripts if form is shown -->
  <style>
    .status-panel {
      background: #222;
      padding: 15px;
      border-radius: 5px;
      margin: 15px 0;
      border-left: 4px solid #555;
      color: white;
    }

    .status-success {
      border-left-color: #28a745;
    }

    .status-error {
      border-left-color: #dc3545;
    }

    .status-warning {
      border-left-color: #ffc107;
    }

    .finger-preview {
      display: none;
      text-align: center;
    }

    .finger-preview.show {
      display: block;
    }

    .finger-quality.low {
      color: #dc3545;
      font-weight: bold;
    }

    .finger-quality.good {
      color: #28a745;
    }

    .finger-quality.fair {
      color: #ffc107;
    }

    .btn-recapture {
      display: none;
    }

    .btn-recapture.show {
      display: inline-block;
    }

    .btn-prev,
    .btn-next {
      min-width: 120px;
    }

    .btn-submit {
      min-width: 150px;
    }

    .fingerprint-btn {
      min-width: 100px;
    }
  </style>

  <script src="../../assets/js/fingerprint-capture.js"></script>
  <script src="../../assets/js/bs-stepper-init.js"></script>
  <script src="../../assets/js/bs-stepper-form-validator.js"></script>
  <script>    
      window.addEventListener('DOMContentLoaded', () => {
        // Handle form submission
        document.getElementById('updateForm').addEventListener('submit', function(e) {
          // Validate consent checkbox
          const consentCheckbox = document.getElementById('biometric-declaration');
          if (consentCheckbox && !consentCheckbox.checked) {
            e.preventDefault();
            Swal.fire({
              title: '<strong>Error</strong>',
              html: '<p>Please accept the self declaration.</p>',
              icon: 'error',
              confirmButtonText: '<i class="icon-base ti tabler-alert-circle"></i> OK',
              customClass: {
                popup: 'swal-wide',
                confirmButton: 'btn btn-danger'
              }
            });
            return;
          }

          // Validate at least 6 fingerprints
          const capturedFingers = document.querySelectorAll('input[name^="fingerprint"]').length;
          const missingFingers = document.getElementById('missing-fingers-input').value.split(',').filter(Boolean).length;
          
          if ((capturedFingers + missingFingers) < 6) {
            e.preventDefault();
            Swal.fire({
              title: '<strong>Error</strong>',
              html: '<p>At least 6 fingerprints must be captured or marked as missing.</p>',
              icon: 'error',
              confirmButtonText: '<i class="icon-base ti tabler-alert-circle"></i> OK',
              customClass: {
                popup: 'swal-wide',
                confirmButton: 'btn btn-danger'
              }
            });
          }
        });

        // Handle missing fingers checkboxes
        document.querySelectorAll('.finger-missing').forEach(checkbox => {
          checkbox.addEventListener('change', function() {
            const fingerId = this.dataset.fingerId;
            const previewElement = document.querySelector(`.finger-preview[data-finger-id="${fingerId}"]`);
            
            if (this.checked) {
              previewElement.style.display = 'none';
              document.getElementById(`fingerprint-data-${fingerId}`).value = '';
            } else {
              previewElement.style.display = 'block';
            }
            
            updateMissingFingersInput();
          });
        });

        // Handle entire hand missing checkboxes
        document.getElementById('left-hand-missing').addEventListener('change', function() {
          const checkboxes = document.querySelectorAll('.finger-missing[data-finger-id="1"], .finger-missing[data-finger-id="2"], .finger-missing[data-finger-id="3"], .finger-missing[data-finger-id="4"], .finger-missing[data-finger-id="5"]');
          
          checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
            const fingerId = checkbox.dataset.fingerId;
            const previewElement = document.querySelector(`.finger-preview[data-finger-id="${fingerId}"]`);
            
            if (this.checked) {
              previewElement.style.display = 'none';
              document.getElementById(`fingerprint-data-${fingerId}`).value = '';
            } else {
              previewElement.style.display = 'block';
            }
          });
          
          updateMissingFingersInput();
        });

        document.getElementById('right-hand-missing').addEventListener('change', function() {
          const checkboxes = document.querySelectorAll('.finger-missing[data-finger-id="6"], .finger-missing[data-finger-id="7"], .finger-missing[data-finger-id="8"], .finger-missing[data-finger-id="9"], .finger-missing[data-finger-id="10"]');
          
          checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
            const fingerId = checkbox.dataset.fingerId;
            const previewElement = document.querySelector(`.finger-preview[data-finger-id="${fingerId}"]`);
            
            if (this.checked) {
              previewElement.style.display = 'none';
              document.getElementById(`fingerprint-data-${fingerId}`).value = '';
            } else {
              previewElement.style.display = 'block';
            }
          });
          
          updateMissingFingersInput();
        });

        // Update the hidden input with missing fingers
        function updateMissingFingersInput() {
          const missingFingers = [];
          document.querySelectorAll('.finger-missing:checked').forEach(checkbox => {
            missingFingers.push(checkbox.dataset.fingerId);
          });
          document.getElementById('missing-fingers-input').value = missingFingers.join(',');
        }
      });
  </script>
  <?php endif; ?>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>