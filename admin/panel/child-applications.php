<?php
$code = base64_decode('PD9waHAKcmVxdWlyZSBfX0RJUl9fIC4gJy9zZWN1cml0eS9hdXRoLnBocCc7CnJlcXVpcmVfb25jZSByZWFscGF0aChfX0RJUl9fIC4gJy8uLi8uLi9jb25maWcvZGF0YWJhc2UucGhwJyk7CgovLyBJbml0aWFsaXplIGZpbHRlcnMKJHN0YXR1c0ZpbHRlciA9ICRfR0VUWydzdGF0dXMnXSA/PyAnJzsKJGRhdGVGcm9tID0gJF9HRVRbJ2RhdGVfZnJvbSddID8/ICcnOwokZGF0ZVRvID0gJF9HRVRbJ2RhdGVfdG8nXSA/PyAnJzsKJGFwcElkU2VhcmNoID0gJF9HRVRbJ2FwcF9pZCddID8/ICcnOwoKLy8gQnVpbGQgdGhlIGJhc2UgcXVlcnkKJHF1ZXJ5ID0gIlNFTEVDVCAKICAgICAgICAgICAgaWQsCiAgICAgICAgICAgIGFwcGxpY2F0aW9uX2lkLAogICAgICAgICAgICBjaGlsZF9uYW1lLAogICAgICAgICAgICBjaGlsZF9kb2IsCiAgICAgICAgICAgIGNoaWxkX2dlbmRlciwKICAgICAgICAgICAgY2hpbGRfYmlydGhwbGFjZSwKICAgICAgICAgICAgY2hpbGRfYmlydGhfaG9zcGl0YWwsCiAgICAgICAgICAgIGNoaWxkX2JpcnRoX3dlaWdodCwKICAgICAgICAgICAgZ3VhcmRpYW5fbmFtZSwKICAgICAgICAgICAgZ3VhcmRpYW5fcmVsYXRpb24sCiAgICAgICAgICAgIGd1YXJkaWFuX2FhZGhhciwKICAgICAgICAgICAgZ3VhcmRpYW5fbW9iaWxlLAogICAgICAgICAgICBndWFyZGlhbl9lbWFpbCwKICAgICAgICAgICAgYWRkcmVzc19saW5lMSwKICAgICAgICAgICAgYWRkcmVzc19saW5lMiwKICAgICAgICAgICAgY2l0eSwKICAgICAgICAgICAgZGlzdHJpY3QsCiAgICAgICAgICAgIHN0YXRlLAogICAgICAgICAgICBwaW5jb2RlLAogICAgICAgICAgICBsYW5kbWFyaywKICAgICAgICAgICAgc3VibWl0dGVkX2F0LAogICAgICAgICAgICBzdGF0dXMsCiAgICAgICAgICAgIGZpbmdlcjEsCiAgICAgICAgICAgIGZpbmdlcjIsCiAgICAgICAgICAgIGZpbmdlcjMsCiAgICAgICAgICAgIGZpbmdlcjQsCiAgICAgICAgICAgIGZpbmdlcjUsCiAgICAgICAgICAgIGZpbmdlcjYsCiAgICAgICAgICAgIGZpbmdlcjcsCiAgICAgICAgICAgIGZpbmdlcjgsCiAgICAgICAgICAgIGZpbmdlcjksCiAgICAgICAgICAgIGZpbmdlcjEwLAogICAgICAgICAgICBtaXNzaW5nX2ZpbmdlcnMKICAgICAgICAgIEZST00gY2hpbGRfZW5yb2xsCiAgICAgICAgICBXSEVSRSB1c2VyX2lkID0gJHVzZXJfaWQiOwoKLy8gQWRkIFdIRVJFIGNvbmRpdGlvbnMgYmFzZWQgb24gZmlsdGVycwokY29uZGl0aW9ucyA9IFtdOwokcGFyYW1zID0gW107CgppZiAoIWVtcHR5KCRzdGF0dXNGaWx0ZXIpKSB7CiAgJGNvbmRpdGlvbnNbXSA9ICJzdGF0dXMgPSA/IjsKICAkcGFyYW1zW10gPSAkc3RhdHVzRmlsdGVyOwp9CgppZiAoIWVtcHR5KCRkYXRlRnJvbSkpIHsKICAkY29uZGl0aW9uc1tdID0gInN1Ym1pdHRlZF9hdCA+PSA/IjsKICAkcGFyYW1zW10gPSAkZGF0ZUZyb20gLiAnIDAwOjAwOjAwJzsKfQoKaWYgKCFlbXB0eSgkZGF0ZVRvKSkgewogICRjb25kaXRpb25zW10gPSAic3VibWl0dGVkX2F0IDw9ID8iOwogICRwYXJhbXNbXSA9ICRkYXRlVG8gLiAnIDIzOjU5OjU5JzsKfQoKaWYgKCFlbXB0eSgkYXBwSWRTZWFyY2gpKSB7CiAgJGNvbmRpdGlvbnNbXSA9ICJhcHBsaWNhdGlvbl9pZCBMSUtFID8iOwogICRwYXJhbXNbXSA9ICclJyAuICRhcHBJZFNlYXJjaCAuICclJzsKfQoKaWYgKCFlbXB0eSgkY29uZGl0aW9ucykpIHsKICAkcXVlcnkgLj0gIiBBTkQgIiAuIGltcGxvZGUoIiBBTkQgIiwgJGNvbmRpdGlvbnMpOwp9CgokcXVlcnkgLj0gIiBPUkRFUiBCWSBzdWJtaXR0ZWRfYXQgQVNDIjsKCi8vIFByZXBhcmUgYW5kIGV4ZWN1dGUgdGhlIHF1ZXJ5CiRzdG10ID0gJHBkby0+cHJlcGFyZSgkcXVlcnkpOwokc3RtdC0+ZXhlY3V0ZSgkcGFyYW1zKTsKJGNoaWxkRW5yb2xscyA9ICRzdG10LT5mZXRjaEFsbChQRE86OkZFVENIX0FTU09DKTsKCi8vIEdldCBkaXN0aW5jdCBzdGF0dXMgdmFsdWVzIGZvciBmaWx0ZXIgZHJvcGRvd24KJHN0YXR1c2VzID0gJHBkby0+cXVlcnkoIlNFTEVDVCBESVNUSU5DVCBzdGF0dXMgRlJPTSBjaGlsZF9lbnJvbGwiKS0+ZmV0Y2hBbGwoUERPOjpGRVRDSF9DT0xVTU4pOwo/PgoKPCFkb2N0eXBlIGh0bWw+CjxodG1sIGxhbmc9ImVuIiBjbGFzcz0ibGF5b3V0LW5hdmJhci1maXhlZCBsYXlvdXQtbWVudS1maXhlZCBsYXlvdXQtY29tcGFjdCIgZGlyPSJsdHIiIGRhdGEtc2tpbj0iZGVmYXVsdCIgZGF0YS1hc3NldHMtcGF0aD0iLi4vLi4vYXNzZXRzLyIgZGF0YS10ZW1wbGF0ZT0idmVydGljYWwtbWVudS10ZW1wbGF0ZSIgZGF0YS1icy10aGVtZT0ibGlnaHQiPgo8aGVhZD4KICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL2hlYWQucGhwJyk7ID8+CiAgICA8dGl0bGU+Q2hpbGQgQXBwbGljYXRpb25zIC0gPD89IGh0bWxzcGVjaWFsY2hhcnMoJHNpdGVfbmFtZSwgRU5UX1FVT1RFUywgJ1VURi04JykgPz48L3RpdGxlPgo8L2hlYWQ+Cgo8Ym9keT4KICAgIDwhLS0gTGF5b3V0IHdyYXBwZXIgLS0+CiAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtd3JhcHBlciBsYXlvdXQtY29udGVudC1uYXZiYXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImxheW91dC1jb250YWluZXIiPgogICAgICAgICAgICA8IS0tIE1lbnUgLS0+CiAgICAgICAgICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL3NpZGViYXIucGhwJyk7ID8+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LW1vYmlsZS10b2dnbGVyIGQteGwtbm9uZSByb3VuZGVkLTEiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyIgY2xhc3M9ImxheW91dC1tZW51LXRvZ2dsZSBtZW51LWxpbmsgdGV4dC1sYXJnZSB0ZXh0LWJnLXNlY29uZGFyeSBwLTIgcm91bmRlZC0xIj4KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLW1lbnUgaWNvbi1iYXNlIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1jaGV2cm9uLXJpZ2h0IGljb24tYmFzZSI+PC9pPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSAvIE1lbnUgLS0+CgogICAgICAgICAgICA8IS0tIExheW91dCBjb250YWluZXIgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxheW91dC1wYWdlIj4KICAgICAgICAgICAgICAgIDwhLS0gTmF2YmFyIC0tPgogICAgICAgICAgICAgICAgPD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvbmF2YmFyLnBocCcpOyA/PgogICAgICAgICAgICAgICAgPCEtLSAvIE5hdmJhciAtLT4KCiAgICAgICAgICAgICAgICA8IS0tIENvbnRlbnQgd3JhcHBlciAtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgPCEtLSBDb250ZW50IC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci14eGwgZmxleC1ncm93LTEgY29udGFpbmVyLXAteSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjYXJkLWhlYWRlciBwYi0wIHRleHQtbWQtc3RhcnQgdGV4dC1jZW50ZXIiPkNoaWxkIEVucm9sbCBSZWNvcmRzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRmlsdGVyIFNlY3Rpb24gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgYm9yZGVyLWJvdHRvbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJHRVQiIGNsYXNzPSJyb3cgZy0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWxhYmVsIj5BcHBsaWNhdGlvbiBJRDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iYXBwX2lkIiBjbGFzcz0iZm9ybS1jb250cm9sIiBwbGFjZWhvbGRlcj0iU2VhcmNoIGJ5IElEIiB2YWx1ZT0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGFwcElkU2VhcmNoKSA/PiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWxhYmVsIj5TdGF0dXM8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJzdGF0dXMiIGNsYXNzPSJmb3JtLXNlbGVjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iIj5BbGwgU3RhdHVzZXM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoICgkc3RhdHVzZXMgYXMgJHN0YXR1cyk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Ijw/PSAkc3RhdHVzID8+IiA8Pz0gJHN0YXR1cyA9PT0gJHN0YXR1c0ZpbHRlciA/ICdzZWxlY3RlZCcgOiAnJyA/Pj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/PSB1Y2ZpcnN0KCRzdGF0dXMpID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGZvcmVhY2g7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvcm0tbGFiZWwiPkRhdGUgRnJvbTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZGF0ZSIgbmFtZT0iZGF0ZV9mcm9tIiBjbGFzcz0iZm9ybS1jb250cm9sIiB2YWx1ZT0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGRhdGVGcm9tKSA/PiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb3JtLWxhYmVsIj5EYXRlIFRvPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJkYXRlIiBuYW1lPSJkYXRlX3RvIiBjbGFzcz0iZm9ybS1jb250cm9sIiB2YWx1ZT0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGRhdGVUbykgPz4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xIGQtZmxleCBhbGlnbi1pdGVtcy1lbmQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ0aSB0YWJsZXItZmlsdGVyIG1lLTEiPjwvaT4gRmlsdGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1kYXRhdGFibGUgcC01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9ImR0LXJlc3BvbnNpdmUgdGFibGUgdGFibGUtYm9yZGVyZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPlNMIE5vPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QXBwbGljYXRpb24gSUQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5DaGlsZCBOYW1lPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3VibWl0dGVkIEF0PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3RhdHVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWN0aW9uczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoICgkY2hpbGRFbnJvbGxzIGFzICRpbmRleCA9PiAkZW5yb2xsKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89ICRpbmRleCArIDEgPz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydhcHBsaWNhdGlvbl9pZCddKSA/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2NoaWxkX25hbWUnXSkgPz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gZGF0ZSgnZCBNIFksIGg6aSBBJywgc3RydG90aW1lKCRlbnJvbGxbJ3N1Ym1pdHRlZF9hdCddKSkgPz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXR1c0NsYXNzID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RydG9sb3dlcigkZW5yb2xsWydzdGF0dXMnXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BlbmRpbmcnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0dXNDbGFzcyA9ICdiZy1sYWJlbC13YXJuaW5nJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FwcHJvdmVkJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzQ2xhc3MgPSAnYmctbGFiZWwtc3VjY2Vzcyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZWplY3RlZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXR1c0NsYXNzID0gJ2JnLWxhYmVsLWRhbmdlcic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm9jZXNzaW5nJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdHVzQ2xhc3MgPSAnYmctbGFiZWwtaW5mbyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0dXNDbGFzcyA9ICdiZy1sYWJlbC1zZWNvbmRhcnknOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJiYWRnZSA8Pz0gJHN0YXR1c0NsYXNzID8+Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/PSB1Y2ZpcnN0KCRlbnJvbGxbJ3N0YXR1cyddKSA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tc20gYnRuLW91dGxpbmUtcHJpbWFyeSB2aWV3LWJ0biIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYnMtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtYnMtdGFyZ2V0PSIjdmlld01vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1hcHAtaWQ9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2FwcGxpY2F0aW9uX2lkJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jaGlsZC1uYW1lPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydjaGlsZF9uYW1lJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jaGlsZC1kb2I9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2NoaWxkX2RvYiddKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY2hpbGQtZ2VuZGVyPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydjaGlsZF9nZW5kZXInXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNoaWxkLWJpcnRocGxhY2U9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2NoaWxkX2JpcnRocGxhY2UnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNoaWxkLWJpcnRoLWhvc3BpdGFsPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydjaGlsZF9iaXJ0aF9ob3NwaXRhbCddKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY2hpbGQtYmlydGgtd2VpZ2h0PSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydjaGlsZF9iaXJ0aF93ZWlnaHQnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd1YXJkaWFuLW5hbWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2d1YXJkaWFuX25hbWUnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd1YXJkaWFuLXJlbGF0aW9uPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydndWFyZGlhbl9yZWxhdGlvbiddKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZ3VhcmRpYW4tYWFkaGFyPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydndWFyZGlhbl9hYWRoYXInXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWd1YXJkaWFuLW1vYmlsZT0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnZ3VhcmRpYW5fbW9iaWxlJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ndWFyZGlhbi1lbWFpbD0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnZ3VhcmRpYW5fZW1haWwnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFkZHJlc3MtbGluZTE9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2FkZHJlc3NfbGluZTEnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWFkZHJlc3MtbGluZTI9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2FkZHJlc3NfbGluZTInXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWNpdHk9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ2NpdHknXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWRpc3RyaWN0PSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydkaXN0cmljdCddKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc3RhdGU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ3N0YXRlJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1waW5jb2RlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZW5yb2xsWydwaW5jb2RlJ10pID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1sYW5kbWFyaz0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGVucm9sbFsnbGFuZG1hcmsnXSkgPz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXN1Ym1pdHRlZD0iPD89IGRhdGUoJ2QgTSBZLCBoOmkgQScsIHN0cnRvdGltZSgkZW5yb2xsWydzdWJtaXR0ZWRfYXQnXSkpID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zdGF0dXM9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ3N0YXR1cyddKSA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyMT0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXIxJ10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyMj0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXIyJ10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyMz0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXIzJ10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyND0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXI0J10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyNT0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXI1J10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyNj0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXI2J10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyNz0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXI3J10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyOD0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXI4J10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyOT0iPD89ICFlbXB0eSgkZW5yb2xsWydmaW5nZXI5J10pID8gJ3RydWUnIDogJ2ZhbHNlJyA/PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtZmluZ2VyMTA9Ijw/PSAhZW1wdHkoJGVucm9sbFsnZmluZ2VyMTAnXSkgPyAndHJ1ZScgOiAnZmFsc2UnID8+IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1taXNzaW5nLWZpbmdlcnM9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRlbnJvbGxbJ21pc3NpbmdfZmluZ2VycyddKSA/PiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLWV5ZSBtZS0xIj48L2k+IFZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRmb3JlYWNoOyA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPCEtLSAvIENvbnRlbnQgLS0+CgogICAgICAgICAgICAgICAgICAgIDwhLS0gRm9vdGVyIC0tPgogICAgICAgICAgICAgICAgICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL2Zvb3Rlci5waHAnKTsgPz4KICAgICAgICAgICAgICAgICAgICA8IS0tIC8gRm9vdGVyIC0tPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LWJhY2tkcm9wIGZhZGUiPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tIENvbnRlbnQgd3JhcHBlciAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0gLyBMYXlvdXQgcGFnZSAtLT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBPdmVybGF5IC0tPgogICAgICAgIDxkaXYgY2xhc3M9ImxheW91dC1vdmVybGF5IGxheW91dC1tZW51LXRvZ2dsZSI+PC9kaXY+CgogICAgICAgIDwhLS0gRHJhZyBUYXJnZXQgQXJlYSBUbyBTbGlkZUluIE1lbnUgT24gU21hbGwgU2NyZWVucyAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJkcmFnLXRhcmdldCI+PC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gLyBMYXlvdXQgd3JhcHBlciAtLT4KCiAgICA8IS0tIFZpZXcgTW9kYWwgLS0+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0idmlld01vZGFsIiB0YWJpbmRleD0iLTEiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUiPkFwcGxpY2F0aW9uIERldGFpbHM8L2g1PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2PkNoaWxkIERldGFpbHM8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5BcHBsaWNhdGlvbiBJRDo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsQXBwSWQiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPkNoaWxkIE5hbWU6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbENoaWxkTmFtZSI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+Q2hpbGQgRE9COjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxDaGlsZERPQiI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+Q2hpbGQgR2VuZGVyOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxDaGlsZEdlbmRlciI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+Q2hpbGQgQmlydGhwbGFjZTo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsQ2hpbGRCaXJ0aHBsYWNlIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5DaGlsZCBCaXJ0aCBIb3NwaXRhbDo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsQ2hpbGRCaXJ0aEhvc3BpdGFsIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5DaGlsZCBCaXJ0aCBXZWlnaHQ6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbENoaWxkQmlydGhXZWlnaHQiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPlN1Ym1pdHRlZCBBdDo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsU3VibWl0dGVkIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5TdGF0dXM6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbFN0YXR1cyI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2Pkd1YXJkaWFuIERldGFpbHM8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5HdWFyZGlhbiBOYW1lOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxHdWFyZGlhbk5hbWUiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPkd1YXJkaWFuIFJlbGF0aW9uOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxHdWFyZGlhblJlbGF0aW9uIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5HdWFyZGlhbiBBYWRoYXI6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbEd1YXJkaWFuQWFkaGFyIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5HdWFyZGlhbiBNb2JpbGU6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbEd1YXJkaWFuTW9iaWxlIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5HdWFyZGlhbiBFbWFpbDo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsR3VhcmRpYW5FbWFpbCI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gRmluZ2VycHJpbnQgdmlzdWFsaXphdGlvbiB1c2luZyBpbWFnZXMgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj5GaW5nZXJwcmludCBDb2xsZWN0aW9uPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpbmdlcnByaW50LWRpYWdyYW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLXN0YXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBMZWZ0IEhhbmQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImhhbmQtd3JhcHBlciBtZS01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1jZW50ZXIiPkxFRlQgSEFORDwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJoYW5kLWNvbnRhaW5lciBwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uLy4uL2Fzc2V0cy9pbWFnZXMvbGVmdC1oYW5kLnBuZyIgYWx0PSJMZWZ0IEhhbmQiIGNsYXNzPSJoYW5kLWltYWdlIiBpZD0ibGVmdC1oYW5kLWltYWdlIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gSW5kaWNhdG9ycyBmb3IgZmluZ2VycyAxLTUgKExlZnQgSGFuZCkgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZpbmdlci1pbmRpY2F0b3IiIGlkPSJmaW5nZXIxLWluZGljYXRvciI+Pzwvc3Bhbj4gPCEtLSBUaHVtYiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmluZ2VyLWluZGljYXRvciIgaWQ9ImZpbmdlcjItaW5kaWNhdG9yIj4/PC9zcGFuPiA8IS0tIEluZGV4IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmaW5nZXItaW5kaWNhdG9yIiBpZD0iZmluZ2VyMy1pbmRpY2F0b3IiPj88L3NwYW4+IDwhLS0gTWlkZGxlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmaW5nZXItaW5kaWNhdG9yIiBpZD0iZmluZ2VyNC1pbmRpY2F0b3IiPj88L3NwYW4+IDwhLS0gUmluZyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmluZ2VyLWluZGljYXRvciIgaWQ9ImZpbmdlcjUtaW5kaWNhdG9yIj4/PC9zcGFuPiA8IS0tIExpdHRsZSAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUmlnaHQgSGFuZCAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGFuZC13cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC1jZW50ZXIiPlJJR0hUIEhBTkQ8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGFuZC1jb250YWluZXIgcG9zaXRpb24tcmVsYXRpdmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi8uLi9hc3NldHMvaW1hZ2VzL3JpZ2h0LWhhbmQucG5nIiBhbHQ9IlJpZ2h0IEhhbmQiIGNsYXNzPSJoYW5kLWltYWdlIiBpZD0icmlnaHQtaGFuZC1pbWFnZSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEluZGljYXRvcnMgZm9yIGZpbmdlcnMgNi0xMCAoUmlnaHQgSGFuZCkgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZpbmdlci1pbmRpY2F0b3IiIGlkPSJmaW5nZXI2LWluZGljYXRvciI+Pzwvc3Bhbj4gPCEtLSBUaHVtYiAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmluZ2VyLWluZGljYXRvciIgaWQ9ImZpbmdlcjctaW5kaWNhdG9yIj4/PC9zcGFuPiA8IS0tIEluZGV4IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmaW5nZXItaW5kaWNhdG9yIiBpZD0iZmluZ2VyOC1pbmRpY2F0b3IiPj88L3NwYW4+IDwhLS0gTWlkZGxlIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmaW5nZXItaW5kaWNhdG9yIiBpZD0iZmluZ2VyOS1pbmRpY2F0b3IiPj88L3NwYW4+IDwhLS0gUmluZyAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZmluZ2VyLWluZGljYXRvciIgaWQ9ImZpbmdlcjEwLWluZGljYXRvciI+Pzwvc3Bhbj4gPCEtLSBMaXR0bGUgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTMgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3BhbiBjbGFzcz0idGV4dC1zdWNjZXNzIj7inJM8L3NwYW4+ID0gQ29sbGVjdGVkIHwgPHNwYW4gY2xhc3M9InRleHQtZGFuZ2VyIj7inJc8L3NwYW4+ID0gTm90IENvbGxlY3RlZDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5NaXNzaW5nIEZpbmdlcnM6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbE1pc3NpbmdGaW5nZXJzIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj5BZGRyZXNzIERldGFpbHM8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5BZGRyZXNzIExpbmUgMTo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsQWRkcmVzc0xpbmUxIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5BZGRyZXNzIExpbmUgMjo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsQWRkcmVzc0xpbmUyIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5DaXR5Ojwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxDaXR5Ij48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5EaXN0cmljdDo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsRGlzdHJpY3QiPjwvc3Bhbj48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPlN0YXRlOjwvc3Ryb25nPiA8c3BhbiBpZD0ibW9kYWxTdGF0ZSI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+UGluY29kZTo8L3N0cm9uZz4gPHNwYW4gaWQ9Im1vZGFsUGluY29kZSI+PC9zcGFuPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzdHJvbmc+TGFuZG1hcms6PC9zdHJvbmc+IDxzcGFuIGlkPSJtb2RhbExhbmRtYXJrIj48L3NwYW4+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tbGFiZWwtc2Vjb25kYXJ5IiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIj5DbG9zZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBpZD0iZG93bmxvYWRQZGYiPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLWZpbGUtZG93bmxvYWQgbWUtMSI+PC9pPiBEb3dubG9hZCBQREYKICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL3NjcmlwdC5waHAnKTsgPz4KICAgIAogICAgPHNjcmlwdD4KICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAvLyBJbml0aWFsaXplIERhdGFUYWJsZQogICAgICAgIGNvbnN0IGR0X3Jlc3BvbnNpdmVfdGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZHQtcmVzcG9uc2l2ZScpOwogICAgICAgIGlmIChkdF9yZXNwb25zaXZlX3RhYmxlKSB7CiAgICAgICAgICAgIGxldCBkdF9yZXNwb25zaXZlID0gbmV3IERhdGFUYWJsZShkdF9yZXNwb25zaXZlX3RhYmxlLCB7CiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLAogICAgICAgICAgICAgICAgbGF5b3V0OiB7CiAgICAgICAgICAgICAgICAgICAgdG9wU3RhcnQ6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93Q2xhc3M6ICdyb3cgbXktMCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBbJ3BhZ2VMZW5ndGgnXSwKICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUxlbmd0aDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudTogWzEwLCAyNSwgNTAsIDEwMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnU2hvdyBfTUVOVV8gZW50cmllcycKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYm90dG9tU3RhcnQ6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93Q2xhc3M6ICdyb3cgbXgtMyBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBbJ2luZm8nXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYm90dG9tRW5kOiAncGFnaW5nJwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGxhbmd1YWdlOiB7CiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogJzxpIGNsYXNzPSJpY29uLWJhc2UgdGkgdGFibGVyLWNoZXZyb24tcmlnaHQgc2NhbGVYLW4xLXJ0bCBpY29uLTE4cHgiPjwvaT4nLAogICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogJzxpIGNsYXNzPSJpY29uLWJhc2UgdGkgdGFibGVyLWNoZXZyb24tbGVmdCBzY2FsZVgtbjEtcnRsIGljb24tMThweCI+PC9pPicsCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0OiAnPGkgY2xhc3M9Imljb24tYmFzZSB0aSB0YWJsZXItY2hldnJvbnMtbGVmdCBzY2FsZVgtbjEtcnRsIGljb24tMThweCI+PC9pPicsCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3Q6ICc8aSBjbGFzcz0iaWNvbi1iYXNlIHRpIHRhYmxlci1jaGV2cm9ucy1yaWdodCBzY2FsZVgtbjEtcnRsIGljb24tMThweCI+PC9pPicKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHNlYXJjaDogJycsCiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUGxhY2Vob2xkZXI6ICdTZWFyY2ggcmVjb3Jkcy4uLicsCiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoTWVudTogJ1Nob3cgX01FTlVfIGVudHJpZXMnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY29sdW1uRGVmczogW3sKICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogMQogICAgICAgICAgICAgICAgfSwgLy8gQXBwbGljYXRpb24gSUQKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlUHJpb3JpdHk6IDIsCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0czogMgogICAgICAgICAgICAgICAgfSwgLy8gRnVsbCBOYW1lCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2l2ZVByaW9yaXR5OiAzLAogICAgICAgICAgICAgICAgICAgIHRhcmdldHM6IC0xCiAgICAgICAgICAgICAgICB9IC8vIEFjdGlvbnMKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvLyBIYW5kbGUgdmlldyBtb2RhbAogICAgICAgIGNvbnN0IHZpZXdNb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWV3TW9kYWwnKTsKICAgICAgICBpZiAodmlld01vZGFsKSB7CiAgICAgICAgICAgIHZpZXdNb2RhbC5hZGRFdmVudExpc3RlbmVyKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIFNldCBtb2RhbCBjb250ZW50CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxBcHBJZCcpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuYXBwSWQ7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxDaGlsZE5hbWUnKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0LmNoaWxkTmFtZTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbENoaWxkRE9CJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5jaGlsZERvYjsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbENoaWxkR2VuZGVyJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5jaGlsZEdlbmRlcjsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbENoaWxkQmlydGhwbGFjZScpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuY2hpbGRCaXJ0aHBsYWNlOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsQ2hpbGRCaXJ0aEhvc3BpdGFsJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5jaGlsZEJpcnRoSG9zcGl0YWw7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxDaGlsZEJpcnRoV2VpZ2h0JykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5jaGlsZEJpcnRoV2VpZ2h0OwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsR3VhcmRpYW5OYW1lJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5ndWFyZGlhbk5hbWU7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxHdWFyZGlhblJlbGF0aW9uJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5ndWFyZGlhblJlbGF0aW9uOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsR3VhcmRpYW5BYWRoYXInKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0Lmd1YXJkaWFuQWFkaGFyOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsR3VhcmRpYW5Nb2JpbGUnKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0Lmd1YXJkaWFuTW9iaWxlOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsR3VhcmRpYW5FbWFpbCcpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuZ3VhcmRpYW5FbWFpbDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbFN1Ym1pdHRlZCcpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuc3VibWl0dGVkOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsQWRkcmVzc0xpbmUxJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5hZGRyZXNzTGluZTE7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxBZGRyZXNzTGluZTInKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0LmFkZHJlc3NMaW5lMjsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbENpdHknKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0LmNpdHk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxEaXN0cmljdCcpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuZGlzdHJpY3Q7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxTdGF0ZScpLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuc3RhdGU7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW9kYWxQaW5jb2RlJykudGV4dENvbnRlbnQgPSBidXR0b24uZGF0YXNldC5waW5jb2RlOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsTGFuZG1hcmsnKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0LmxhbmRtYXJrOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vZGFsTWlzc2luZ0ZpbmdlcnMnKS50ZXh0Q29udGVudCA9IGJ1dHRvbi5kYXRhc2V0Lm1pc3NpbmdGaW5nZXJzOwoKICAgICAgICAgICAgICAgIC8vIFNldCBzdGF0dXMgd2l0aCBiYWRnZQogICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzU3BhbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RhbFN0YXR1cycpOwogICAgICAgICAgICAgICAgc3RhdHVzU3Bhbi5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgICAgIGNvbnN0IGJhZGdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgYmFkZ2UuY2xhc3NOYW1lID0gYGJhZGdlICR7YnV0dG9uLmRhdGFzZXQuc3RhdHVzID09PSAncGVuZGluZycgPyAnYmctbGFiZWwtd2FybmluZycgOiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmRhdGFzZXQuc3RhdHVzID09PSAnYXBwcm92ZWQnID8gJ2JnLWxhYmVsLXN1Y2Nlc3MnIDogCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5kYXRhc2V0LnN0YXR1cyA9PT0gJ3JlamVjdGVkJyA/ICdiZy1sYWJlbC1kYW5nZXInIDogCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5kYXRhc2V0LnN0YXR1cyA9PT0gJ3Byb2Nlc3NpbmcnID8gJ2JnLWxhYmVsLWluZm8nIDogJ2JnLWxhYmVsLXNlY29uZGFyeSd9YDsKICAgICAgICAgICAgICAgIGJhZGdlLnRleHRDb250ZW50ID0gYnV0dG9uLmRhdGFzZXQuc3RhdHVzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgYnV0dG9uLmRhdGFzZXQuc3RhdHVzLnNsaWNlKDEpOwogICAgICAgICAgICAgICAgc3RhdHVzU3Bhbi5hcHBlbmRDaGlsZChiYWRnZSk7CgogICAgICAgICAgICAgICAgLy8gVXBkYXRlIGZpbmdlcnByaW50IHN0YXR1cyBmb3IgYWxsIGZpbmdlcnMKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDEwOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBmaW5nZXJJbmRpY2F0b3JFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBmaW5nZXIke2l9LWluZGljYXRvcmApOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIChmaW5nZXJJbmRpY2F0b3JFbCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgZmluZ2VyIGRhdGEgZnJvbSBidXR0b24gZGF0YXNldAogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0NvbGxlY3RlZCA9IGJ1dHRvbi5kYXRhc2V0W2BmaW5nZXIke2l9YF0gPT09ICd0cnVlJzsKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBzdGF0dXMgc3ltYm9sIGFuZCBjb2xvcgogICAgICAgICAgICAgICAgICAgICAgICBmaW5nZXJJbmRpY2F0b3JFbC50ZXh0Q29udGVudCA9IGlzQ29sbGVjdGVkID8gJ+KckycgOiAn4pyXJzsKICAgICAgICAgICAgICAgICAgICAgICAgZmluZ2VySW5kaWNhdG9yRWwuY2xhc3NMaXN0LnJlbW92ZSgndGV4dC1zdWNjZXNzJywgJ3RleHQtZGFuZ2VyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmdlckluZGljYXRvckVsLmNsYXNzTGlzdC5hZGQoaXNDb2xsZWN0ZWQgPyAndGV4dC1zdWNjZXNzJyA6ICd0ZXh0LWRhbmdlcicpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBTZXQgUERGIGRvd25sb2FkIGxpbmsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb3dubG9hZFBkZicpLm9uY2xpY2sgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGBnZW5lcmF0ZV9wZGYucGhwP2FwcF9pZD0ke2J1dHRvbi5kYXRhc2V0LmFwcElkfWA7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9KTsKICAgIDwvc2NyaXB0PgogICAgCiAgICA8c3R5bGU+CiAgICAgICAgLyogRmluZ2VycHJpbnQgVmlzdWFsaXphdGlvbiBTdHlsZXMgKi8KICAgICAgICAuZmluZ2VycHJpbnQtZGlhZ3JhbSB7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDFyZW07CiAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyYzNlNTA7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDsKICAgICAgICB9CgogICAgICAgIC5oYW5kLXdyYXBwZXIgewogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgIGZsZXg6IDE7CiAgICAgICAgfQoKICAgICAgICAuaGFuZC1jb250YWluZXIgewogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvOwogICAgICAgICAgICB3aWR0aDogMTUwcHg7CiAgICAgICAgICAgIGhlaWdodDogMTY1cHg7CiAgICAgICAgfQoKICAgICAgICAuaGFuZC1pbWFnZSB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvbnRhaW47CiAgICAgICAgfQoKICAgICAgICAuZmluZ2VyLWluZGljYXRvciB7CiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICAgICAgd2lkdGg6IDI4cHg7CiAgICAgICAgICAgIGhlaWdodDogMjhweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI4cHg7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjNjY2OwogICAgICAgICAgICBib3gtc2hhZG93OiAwIDJweCA0cHggcmdiYSgwLCAwLCAwLCAwLjIpOwogICAgICAgIH0KCiAgICAgICAgLyogTGVmdCBIYW5kIEZpbmdlciBQb3NpdGlvbnMgKi8KICAgICAgICAjZmluZ2VyMS1pbmRpY2F0b3IgewogICAgICAgICAgICBsZWZ0OiAxNXB4OwogICAgICAgICAgICB0b3A6IDcwcHg7CiAgICAgICAgfSAvKiBMZWZ0IFRodW1iICovCiAgICAgICAgI2ZpbmdlcjItaW5kaWNhdG9yIHsKICAgICAgICAgICAgbGVmdDogNDBweDsKICAgICAgICAgICAgdG9wOiAxMHB4OwogICAgICAgIH0gLyogTGVmdCBJbmRleCAqLwogICAgICAgICNmaW5nZXIzLWluZGljYXRvciB7CiAgICAgICAgICAgIGxlZnQ6IDcwcHg7CiAgICAgICAgICAgIHRvcDogMXB4OwogICAgICAgIH0gLyogTGVmdCBNaWRkbGUgKi8KICAgICAgICAjZmluZ2VyNC1pbmRpY2F0b3IgewogICAgICAgICAgICBsZWZ0OiA5N3B4OwogICAgICAgICAgICB0b3A6IDVweDsKICAgICAgICB9IC8qIExlZnQgUmluZyAqLwogICAgICAgICNmaW5nZXI1LWluZGljYXRvciB7CiAgICAgICAgICAgIGxlZnQ6IDEyMHB4OwogICAgICAgICAgICB0b3A6IDMwcHg7CiAgICAgICAgfSAvKiBMZWZ0IExpdHRsZSAqLwoKICAgICAgICAvKiBSaWdodCBIYW5kIEZpbmdlciBQb3NpdGlvbnMgKi8KICAgICAgICAjZmluZ2VyNi1pbmRpY2F0b3IgewogICAgICAgICAgICBsZWZ0OiAxMTVweDsKICAgICAgICAgICAgdG9wOiA3MHB4OwogICAgICAgIH0gLyogUmlnaHQgVGh1bWIgKi8KICAgICAgICAjZmluZ2VyNy1pbmRpY2F0b3IgewogICAgICAgICAgICBsZWZ0OiA4NXB4OwogICAgICAgICAgICB0b3A6IDEwcHg7CiAgICAgICAgfSAvKiBSaWdodCBJbmRleCAqLwogICAgICAgICNmaW5nZXI4LWluZGljYXRvciB7CiAgICAgICAgICAgIGxlZnQ6IDU1cHg7CiAgICAgICAgICAgIHRvcDogMXB4OwogICAgICAgIH0gLyogUmlnaHQgTWlkZGxlICovCiAgICAgICAgI2ZpbmdlcjktaW5kaWNhdG9yIHsKICAgICAgICAgICAgbGVmdDogMjdweDsKICAgICAgICAgICAgdG9wOiA1cHg7CiAgICAgICAgfSAvKiBSaWdodCBSaW5nICovCiAgICAgICAgI2ZpbmdlcjEwLWluZGljYXRvciB7CiAgICAgICAgICAgIGxlZnQ6IDVweDsKICAgICAgICAgICAgdG9wOiAzMHB4OwogICAgICAgIH0gLyogUmlnaHQgTGl0dGxlICovCgogICAgICAgIC5maW5nZXItaW5kaWNhdG9yLnRleHQtc3VjY2VzcyB7CiAgICAgICAgICAgIGNvbG9yOiAjMjhhNzQ1OwogICAgICAgIH0KCiAgICAgICAgLmZpbmdlci1pbmRpY2F0b3IudGV4dC1kYW5nZXIgewogICAgICAgICAgICBjb2xvcjogI2RjMzU0NTsKICAgICAgICB9CgogICAgICAgIC5maW5nZXItaW5kaWNhdG9yOmhvdmVyIHsKICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgICAgICBvcGFjaXR5OiAwLjg7CiAgICAgICAgICAgIGJvcmRlci13aWR0aDogMnB4OwogICAgICAgIH0KCiAgICAgICAgLmZpbmdlcnByaW50LWRpYWdyYW0gaDYgewogICAgICAgICAgICBjb2xvcjogI2ZmZjsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41cmVtOwogICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwogICAgICAgIH0KCiAgICAgICAgLmZpbmdlcnByaW50LWRpYWdyYW0gcCB7CiAgICAgICAgICAgIGNvbG9yOiAjZmZmOwogICAgICAgICAgICBtYXJnaW46IDAuNXJlbSAwOwogICAgICAgIH0KCiAgICAgICAgLmZpbmdlcnByaW50LWRpYWdyYW0gLnRleHQtc3VjY2VzcyB7CiAgICAgICAgICAgIGNvbG9yOiAjMjhhNzQ1OwogICAgICAgIH0KCiAgICAgICAgLmZpbmdlcnByaW50LWRpYWdyYW0gLnRleHQtZGFuZ2VyIHsKICAgICAgICAgICAgY29sb3I6ICNkYzM1NDU7CiAgICAgICAgfQogICAgPC9zdHlsZT4KPC9ib2R5Pgo8L2h0bWw+');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>