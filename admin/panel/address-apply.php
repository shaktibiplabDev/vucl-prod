<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Flash messages
$success_message = $_SESSION['success_message'] ?? '';
$error_message = $_SESSION['error_message'] ?? '';
unset($_SESSION['success_message'], $_SESSION['error_message']);

// Generate CSRF token if not exists
if (empty($_SESSION['csrf_token'])) {
  $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

// Check if address update service is active
$stmt = $pdo->prepare("SELECT is_active, price FROM prices_list WHERE service_key = 'address-update' LIMIT 1");
$stmt->execute();
$service = $stmt->fetch(PDO::FETCH_ASSOC);
$isPanelActive = $service['is_active'] ?? false;
$price = (float)($service['price'] ?? 0);

if (!$isPanelActive) {
  include('includes/head.php');
  echo "<script>
        document.addEventListener('DOMContentLoaded', function() {
            Swal.fire({
                title: '<strong>Service not available</strong>',
                html: '<p>The address update service is temporarily disabled. Please try again later.</p>',
                icon: 'info',
                confirmButtonText: '<i class=\"icon-base ti tabler-check\"></i> OK',
                customClass: {
                    popup: 'swal-wide',
                    confirmButton: 'btn btn-success'
                }
            }).then(() => {
                window.location.href = '/admin/panel/index.php';
            });
        });
    </script>";
  echo '</body></html>';
  exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
$stmt->execute([$user_id]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$user) {
  header("Location: logout.php");
  exit;
}

// Check wallet balance
$wallet_balance = (float)$user['wallet'];
$show_form = ($wallet_balance >= $price);

$application_id = null;

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['submit_update'])) {
  try {
    if (!isset($_POST['csrf_token']) || !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])) {
      throw new Exception("Invalid CSRF token");
    }

    // Refresh wallet balance
    $stmt = $pdo->prepare("SELECT wallet FROM users WHERE id = ?");
    $stmt->execute([$user_id]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);
    $wallet_balance = (float)$user['wallet'];

    if ($wallet_balance < $price) {
      throw new Exception("Insufficient wallet balance. Required: ₹" . number_format($price, 2) . ", Available: ₹" . number_format($wallet_balance, 2));
    }

    $pdo->beginTransaction();

    // Deduct from wallet
    $deduct_stmt = $pdo->prepare("UPDATE users SET wallet = wallet - ? WHERE id = ? AND wallet >= ?");
    $deduct_stmt->execute([$price, $user_id, $price]);
    if ($deduct_stmt->rowCount() === 0) {
      throw new Exception("Wallet deduction failed. Please try again.");
    }

    // Validate required fields
    $required = ['full_name', 'aadhaar_no', 'village', 'district', 'document', 'mobile_no', 'post', 'state', 'pincode', 'purpose'];
    foreach ($required as $field) {
      if (empty($_POST[$field]) && empty($_FILES[$field]['tmp_name'])) {
        throw new Exception("All required fields must be filled");
      }
    }

    // Format validation
    if (!preg_match('/^[0-9]{12}$/', $_POST['aadhaar_no'])) {
      throw new Exception("Aadhaar number must be 12 digits");
    }
    if (!preg_match('/^[0-9]{10}$/', $_POST['mobile_no'])) {
      throw new Exception("Mobile number must be 10 digits");
    }
    if (!preg_match('/^[0-9]{6}$/', $_POST['pincode'])) {
      throw new Exception("Pin code must be 6 digits");
    }

    // Biometric validation
    $capturedFingers = !empty($_POST['fingerprint']) ? count(array_filter($_POST['fingerprint'])) : 0;
    $missingFingersList = array_filter(explode(',', $_POST['missing_fingers'] ?? ''), fn($v) => is_numeric($v));
    $missingFingersCount = count($missingFingersList);

    if (($capturedFingers + $missingFingersCount) < 6) {
      throw new Exception("At least 6 fingerprints must be captured or marked as missing");
    }

    foreach ($_POST['fingerprint'] ?? [] as $fingerId => $bmpData) {
      if (in_array($fingerId, $missingFingersList)) continue;
      if (!base64_decode($bmpData, true)) {
        throw new Exception("Invalid fingerprint data for finger $fingerId");
      }
    }

    $fingerprints = array_fill(1, 10, null);
    foreach ($_POST['fingerprint'] ?? [] as $fingerId => $bmpData) {
      $fingerId = (int)$fingerId;
      if ($fingerId >= 1 && $fingerId <= 10 && !empty($bmpData)) {
        $fingerprints[$fingerId] = 'data:image/bmp;base64,' . $bmpData;
      }
    }

    // File upload
    $upload_dir = '../../uploads/address_updates/' . $user_id . '/';
    if (!file_exists($upload_dir) && !mkdir($upload_dir, 0755, true)) {
      throw new Exception("Failed to create upload directory");
    }

    $file_fields = ['document' => 'supporting_document'];
    $allowed_types = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'];
    $max_file_size = 5 * 1024 * 1024;
    $file_paths = [];

    foreach ($file_fields as $field => $db_field) {
      if (!empty($_FILES[$field]['tmp_name'])) {
        $file_info = finfo_open(FILEINFO_MIME_TYPE);
        $mime_type = finfo_file($file_info, $_FILES[$field]['tmp_name']);
        finfo_close($file_info);

        if (!in_array($mime_type, $allowed_types)) {
          throw new Exception("Invalid file type for $db_field. Only images and PDFs allowed.");
        }
        if ($_FILES[$field]['size'] > $max_file_size) {
          throw new Exception("File too large for $db_field. Max 5MB.");
        }
        if (!is_uploaded_file($_FILES[$field]['tmp_name'])) {
          throw new Exception("Possible file upload attack");
        }

        $file_ext = pathinfo($_FILES[$field]['name'], PATHINFO_EXTENSION);
        $safe_file_name = $db_field . '_' . time() . '.' . $file_ext;
        $file_path = $upload_dir . $safe_file_name;

        if (!move_uploaded_file($_FILES[$field]['tmp_name'], $file_path)) {
          throw new Exception("Failed to upload $db_field file");
        }
        $file_paths[$db_field] = $file_path;
      }
    }

    // Insert record
    $application_id = 'ADDR-UPDATE-' . date('Ymd-His') . '-' . bin2hex(random_bytes(3));
    $stmt = $pdo->prepare("
            INSERT INTO address_update (
                application_id, user_id, full_name, aadhaar_no, village, district, 
                document_path, mobile_no, post, state, landmark, pincode, purpose,
                finger1, finger2, finger3, finger4, finger5,
                finger6, finger7, finger8, finger9, finger10,
                missing_fingers, submitted_at, status
            ) VALUES (
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 'pending'
            )
        ");
    $stmt->execute([
      $application_id,
      $user_id,
      htmlspecialchars($_POST['full_name'], ENT_QUOTES, 'UTF-8'),
      $_POST['aadhaar_no'],
      htmlspecialchars($_POST['village'], ENT_QUOTES, 'UTF-8'),
      htmlspecialchars($_POST['district'], ENT_QUOTES, 'UTF-8'),
      $file_paths['supporting_document'] ?? null,
      $_POST['mobile_no'],
      htmlspecialchars($_POST['post'], ENT_QUOTES, 'UTF-8'),
      htmlspecialchars($_POST['state'], ENT_QUOTES, 'UTF-8'),
      $_POST['landmark'] ?? null,
      $_POST['pincode'],
      $_POST['purpose'],
      $fingerprints[1],
      $fingerprints[2],
      $fingerprints[3],
      $fingerprints[4],
      $fingerprints[5],
      $fingerprints[6],
      $fingerprints[7],
      $fingerprints[8],
      $fingerprints[9],
      $fingerprints[10],
      implode(',', $missingFingersList)
    ]);

    $pdo->commit();
    $_SESSION['success_message'] = "Address update submitted successfully! ₹" . number_format($price, 2) . " deducted. Application ID: $application_id";
    header("Location: " . $_SERVER['PHP_SELF']);
    exit;
  } catch (Exception $e) {
    if ($pdo->inTransaction()) {
      $pdo->rollBack();
    }
    foreach ($file_paths ?? [] as $file_path) {
      if (file_exists($file_path)) @unlink($file_path);
    }
    $_SESSION['error_message'] = "Error: " . $e->getMessage();
    header("Location: " . $_SERVER['PHP_SELF']);
    exit;
  }
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">

<head>
  <?php include('includes/head.php'); ?>
  <title>Address Update - <?= htmlspecialchars($site_name, ENT_QUOTES, 'UTF-8') ?></title>
</head>

<body>
  <!-- Layout wrapper -->
  <div class="layout-wrapper layout-content-navbar">
    <div class="layout-container">
      <!-- Menu -->
      <?php include('includes/sidebar.php'); ?>

      <div class="menu-mobile-toggler d-xl-none rounded-1">
        <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
          <i class="ti tabler-menu icon-base"></i>
          <i class="ti tabler-chevron-right icon-base"></i>
        </a>
      </div>
      <!-- / Menu -->

      <!-- Layout container -->
      <div class="layout-page">
        <!-- Navbar -->
        <?php include('includes/navbar.php'); ?>
        <!-- / Navbar -->

        <!-- Content wrapper -->
        <div class="content-wrapper">
          <!-- Content -->
          <div class="container-xxl flex-grow-1 container-p-y">
            <div class="row">
              <div class="col-12">
                <?php if (!$show_form): ?>
                  <div class="alert alert-danger">
                    <h4 class="alert-heading">Insufficient Wallet Balance</h4>
                    <p>You need at least ₹<?= number_format($price, 2) ?> in your wallet to update address. Your current balance is ₹<?= number_format($wallet_balance, 2) ?>.</p>
                    <hr>
                    <div class="d-flex justify-content-between">
                      <a href="/admin/panel/deposit.php" class="btn btn-primary">
                        <i class="icon-base ti tabler-wallet me-2"></i> Recharge Wallet
                      </a>
                      <a href="/admin/panel/index.php" class="btn btn-secondary">
                        <i class="icon-base ti tabler-arrow-left me-2"></i> Back to Dashboard
                      </a>
                    </div>
                  </div>
                <?php else: ?>
                  <small class="fw-medium">Address Update</small>
                  <div id="wizard-validation" class="bs-stepper vertical wizard-modern wizard-modern-vertical-icons-example mt-2">
                    <div class="bs-stepper-header">
                      <div class="step" data-target="#customer-details">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-user icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Customer Details</span>
                            <span class="bs-stepper-subtitle">Basic information</span>
                          </span>
                        </button>
                      </div>
                      <div class="line"></div>
                      <div class="step" data-target="#address-details">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-home icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Address Details</span>
                            <span class="bs-stepper-subtitle">Address information</span>
                          </span>
                        </button>
                      </div>
                      <div class="line"></div>
                      <div class="step" data-target="#biometric-verification">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-fingerprint icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Biometric</span>
                            <span class="bs-stepper-subtitle">Fingerprint verification</span>
                          </span>
                        </button>
                      </div>
                    </div>
                    <div class="bs-stepper-content">
                      <form id="updateForm" method="post" class="needs-validation" enctype="multipart/form-data" action="" novalidate>
                        <input type="hidden" name="csrf_token" value="<?= htmlspecialchars($_SESSION['csrf_token'], ENT_QUOTES, 'UTF-8') ?>">
                        <!-- Customer Details -->
                        <div id="customer-details" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Customer Information</h6>
                            <small>Enter customer details</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-sm-6">
                              <label class="form-label" for="full-name">Name</label>
                              <input type="text"
                                id="full-name"
                                name="full_name"
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['full_name']) ? htmlspecialchars($_POST['full_name'], ENT_QUOTES, 'UTF-8') : '' ?>">
                              <div class="invalid-feedback">Please provide a valid name.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="village">Village</label>
                              <input type="text"
                                id="village"
                                name="village"
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['village']) ? htmlspecialchars($_POST['village'], ENT_QUOTES, 'UTF-8') : "" ?>">
                              <div class="invalid-feedback">Please provide a valid village name.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="district">District</label>
                              <input type="text"
                                id="district"
                                name="district"
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['district']) ? htmlspecialchars($_POST['district'], ENT_QUOTES, 'UTF-8') : "" ?>">
                              <div class="invalid-feedback">Please provide a valid district name.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="document">DOCUMENT</label>
                              <input type="file"
                                id="document"
                                name="document"
                                class="form-control"
                                accept="application/pdf,image/*"
                                required>
                              <small class="text-muted">Max 5MB, JPG/PNG/PDF</small>
                            </div>
                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev" disabled>
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="button" class="btn btn-primary btn-next">
                                <span class="align-middle d-sm-inline-block d-none me-sm-2">Next</span>
                                <i class="icon-base ti tabler-arrow-right icon-xs"></i>
                              </button>
                            </div>
                          </div>
                        </div>

                        <!-- Address Details -->
                        <div id="address-details" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Address Information</h6>
                            <small>Enter address details</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-sm-6">
                              <label class="form-label" for="mobile-no">Mobile Number</label>
                              <input type="text"
                                id="mobile-no"
                                name="mobile_no"
                                class="form-control"
                                pattern="[0-9]{10}"
                                required
                                value="<?= isset($_POST['mobile_no']) ? htmlspecialchars($_POST['mobile_no'], ENT_QUOTES, 'UTF-8') : '' ?>">
                              <div class="invalid-feedback">Please provide a valid mobile number.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="post">Post</label>
                              <input type="text"
                                id="post"
                                name="post"
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['post']) ? htmlspecialchars($_POST['post'], ENT_QUOTES, 'UTF-8') : '' ?>">
                              <div class="invalid-feedback">Please provide a valid post.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="state">State</label>
                              <select id="state" name="state" class="form-select" required>
                                <option value="">Select a state</option>
                                <option value="Andhra Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Andhra Pradesh' ? 'selected' : '' ?>>Andhra Pradesh</option>
                                <option value="Arunachal Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Arunachal Pradesh' ? 'selected' : '' ?>>Arunachal Pradesh</option>
                                <option value="Assam" <?= isset($_POST['state']) && $_POST['state'] === 'Assam' ? 'selected' : '' ?>>Assam</option>
                                <option value="Bihar" <?= isset($_POST['state']) && $_POST['state'] === 'Bihar' ? 'selected' : '' ?>>Bihar</option>
                                <option value="Chhattisgarh" <?= isset($_POST['state']) && $_POST['state'] === 'Chhattisgarh' ? 'selected' : '' ?>>Chhattisgarh</option>
                                <option value="Goa" <?= isset($_POST['state']) && $_POST['state'] === 'Goa' ? 'selected' : '' ?>>Goa</option>
                                <option value="Gujarat" <?= isset($_POST['state']) && $_POST['state'] === 'Gujarat' ? 'selected' : '' ?>>Gujarat</option>
                                <option value="Haryana" <?= isset($_POST['state']) && $_POST['state'] === 'Haryana' ? 'selected' : '' ?>>Haryana</option>
                                <option value="Himachal Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Himachal Pradesh' ? 'selected' : '' ?>>Himachal Pradesh</option>
                                <option value="Jharkhand" <?= isset($_POST['state']) && $_POST['state'] === 'Jharkhand' ? 'selected' : '' ?>>Jharkhand</option>
                                <option value="Karnataka" <?= isset($_POST['state']) && $_POST['state'] === 'Karnataka' ? 'selected' : '' ?>>Karnataka</option>
                                <option value="Kerala" <?= isset($_POST['state']) && $_POST['state'] === 'Kerala' ? 'selected' : '' ?>>Kerala</option>
                                <option value="Madhya Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Madhya Pradesh' ? 'selected' : '' ?>>Madhya Pradesh</option>
                                <option value="Maharashtra" <?= isset($_POST['state']) && $_POST['state'] === 'Maharashtra' ? 'selected' : '' ?>>Maharashtra</option>
                                <option value="Manipur" <?= isset($_POST['state']) && $_POST['state'] === 'Manipur' ? 'selected' : '' ?>>Manipur</option>
                                <option value="Meghalaya" <?= isset($_POST['state']) && $_POST['state'] === 'Meghalaya' ? 'selected' : '' ?>>Meghalaya</option>
                                <option value="Mizoram" <?= isset($_POST['state']) && $_POST['state'] === 'Mizoram' ? 'selected' : '' ?>>Mizoram</option>
                                <option value="Nagaland" <?= isset($_POST['state']) && $_POST['state'] === 'Nagaland' ? 'selected' : '' ?>>Nagaland</option>
                                <option value="Odisha" <?= isset($_POST['state']) && $_POST['state'] === 'Odisha' ? 'selected' : '' ?>>Odisha</option>
                                <option value="Punjab" <?= isset($_POST['state']) && $_POST['state'] === 'Punjab' ? 'selected' : '' ?>>Punjab</option>
                                <option value="Rajasthan" <?= isset($_POST['state']) && $_POST['state'] === 'Rajasthan' ? 'selected' : '' ?>>Rajasthan</option>
                                <option value="Sikkim" <?= isset($_POST['state']) && $_POST['state'] === 'Sikkim' ? 'selected' : '' ?>>Sikkim</option>
                                <option value="Tamil Nadu" <?= isset($_POST['state']) && $_POST['state'] === 'Tamil Nadu' ? 'selected' : '' ?>>Tamil Nadu</option>
                                <option value="Telangana" <?= isset($_POST['state']) && $_POST['state'] === 'Telangana' ? 'selected' : '' ?>>Telangana</option>
                                <option value="Tripura" <?= isset($_POST['state']) && $_POST['state'] === 'Tripura' ? 'selected' : '' ?>>Tripura</option>
                                <option value="Uttar Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Uttar Pradesh' ? 'selected' : '' ?>>Uttar Pradesh</option>
                                <option value="Uttarakhand" <?= isset($_POST['state']) && $_POST['state'] === 'Uttarakhand' ? 'selected' : '' ?>>Uttarakhand</option>
                                <option value="West Bengal" <?= isset($_POST['state']) && $_POST['state'] === 'West Bengal' ? 'selected' : '' ?>>West Bengal</option>
                                <option value="Andaman and Nicobar Islands" <?= isset($_POST['state']) && $_POST['state'] === 'Andaman and Nicobar Islands' ? 'selected' : '' ?>>Andaman and Nicobar Islands</option>
                                <option value="Chandigarh" <?= isset($_POST['state']) && $_POST['state'] === 'Chandigarh' ? 'selected' : '' ?>>Chandigarh</option>
                                <option value="Dadra and Nagar Haveli and Daman and Diu" <?= isset($_POST['state']) && $_POST['state'] === 'Dadra and Nagar Haveli and Daman and Diu' ? 'selected' : '' ?>>Dadra and Nagar Haveli and Daman and Diu</option>
                                <option value="Delhi" <?= isset($_POST['state']) && $_POST['state'] === 'Delhi' ? 'selected' : '' ?>>Delhi</option>
                                <option value="Jammu and Kashmir" <?= isset($_POST['state']) && $_POST['state'] === 'Jammu and Kashmir' ? 'selected' : '' ?>>Jammu and Kashmir</option>
                                <option value="Ladakh" <?= isset($_POST['state']) && $_POST['state'] === 'Ladakh' ? 'selected' : '' ?>>Ladakh</option>
                                <option value="Lakshadweep" <?= isset($_POST['state']) && $_POST['state'] === 'Lakshadweep' ? 'selected' : '' ?>>Lakshadweep</option>
                                <option value="Puducherry" <?= isset($_POST['state']) && $_POST['state'] === 'Puducherry' ? 'selected' : '' ?>>Puducherry</option>
                              </select>
                              <div class="invalid-feedback">Please select a valid state.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="purpose">Purpose</label>
                              <input type="text"
                                id="purpose"
                                name="purpose"
                                class="form-control"
                                value="ADDRESS UPDATE"
                                readonly>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="aadhaar-no">Aadhaar No</label>
                              <input type="text"
                                id="aadhaar-no"
                                name="aadhaar_no"
                                class="form-control"
                                pattern="[0-9]{12}"
                                required
                                value="<?= isset($_POST['aadhaar_no']) ? htmlspecialchars($_POST['aadhaar_no'], ENT_QUOTES, 'UTF-8') : '' ?>">
                              <div class="invalid-feedback">Please provide a valid Aadhaar number.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="landmark">Landmark (optional)</label>
                              <input type="text"
                                id="landmark"
                                name="landmark"
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                value="<?= isset($_POST['landmark']) ? htmlspecialchars($_POST['landmark'], ENT_QUOTES, 'UTF-8') : '' ?>">
                              <div class="invalid-feedback">Please provide a valid landmark.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="pincode">Pin code</label>
                              <input type="text"
                                id="pincode"
                                name="pincode"
                                class="form-control"
                                pattern="[0-9]{6}"
                                required
                                value="<?= isset($_POST['pincode']) ? htmlspecialchars($_POST['pincode'], ENT_QUOTES, 'UTF-8') : '' ?>">
                              <div class="invalid-feedback">Please provide a valid pin code.</div>
                            </div>
                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev">
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="button" class="btn btn-primary btn-next">
                                <span class="align-middle d-sm-inline-block d-none me-sm-2">Next</span>
                                <i class="icon-base ti tabler-arrow-right icon-xs"></i>
                              </button>
                            </div>
                          </div>
                        </div>

                        <!-- Biometric Verification -->
                        <div id="biometric-verification" class="content">
                          <input type="hidden" name="missing_fingers" id="missing-fingers-input" value="">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Biometric Verification</h6>
                            <small>Capture all 10 fingerprints</small>
                          </div>
                          <div class="row g-3">
                            <!-- Device Status Panel -->
                            <div class="col-12">
                              <div class="status-panel" id="serviceStatus">Checking device services...</div>
                            </div>

                            <!-- Left Hand -->
                            <div class="col-md-6">
                              <div class="card mb-4">
                                <div class="card-header d-flex justify-content-between">
                                  <h5>Left Hand</h5>
                                  <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="left-hand-missing">
                                    <label class="form-check-label" for="left-hand-missing">Entire Hand Missing</label>
                                  </div>
                                </div>
                                <div class="card-body text-center">
                                  <div class="row g-3">
                                    <?php
                                    $leftFingers = [
                                      '1' => 'Left Thumb',
                                      '2' => 'Left Index',
                                      '3' => 'Left Middle',
                                      '4' => 'Left Ring',
                                      '5' => 'Left Little'
                                    ];
                                    foreach ($leftFingers as $num => $finger): ?>
                                      <div class="col-12">
                                        <div class="d-flex align-items-center">
                                          <button type="button" class="btn btn-outline-primary me-3 fingerprint-btn" data-finger="<?= htmlspecialchars($finger, ENT_QUOTES, 'UTF-8') ?>" data-finger-id="<?= $num ?>">
                                            <i class="icon-base ti tabler-fingerprint"></i> Capture
                                          </button>
                                          <span><?= htmlspecialchars($finger, ENT_QUOTES, 'UTF-8') ?></span>
                                          <div class="form-check ms-auto">
                                            <input class="form-check-input finger-missing" type="checkbox" id="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>" data-finger-id="<?= $num ?>">
                                            <label class="form-check-label" for="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>">Missing</label>
                                          </div>
                                          <div class="finger-preview ms-2" data-finger-id="<?= $num ?>">
                                            <canvas class="finger-canvas" width="60" height="80" style="border: 1px solid #ddd; border-radius: 4px;"></canvas>
                                            <div class="finger-quality small text-muted mt-1"></div>
                                          </div>
                                        </div>
                                        <input type="hidden" id="fingerprint-data-<?= $num ?>" name="fingerprint[<?= $num ?>]">
                                      </div>
                                    <?php endforeach; ?>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <!-- Right Hand -->
                            <div class="col-md-6">
                              <div class="card mb-4">
                                <div class="card-header d-flex justify-content-between">
                                  <h5>Right Hand</h5>
                                  <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="right-hand-missing">
                                    <label class="form-check-label" for="right-hand-missing">Entire Hand Missing</label>
                                  </div>
                                </div>
                                <div class="card-body text-center">
                                  <div class="row g-3">
                                    <?php
                                    $rightFingers = [
                                      '6' => 'Right Thumb',
                                      '7' => 'Right Index',
                                      '8' => 'Right Middle',
                                      '9' => 'Right Ring',
                                      '10' => 'Right Little'
                                    ];
                                    foreach ($rightFingers as $num => $finger): ?>
                                      <div class="col-12">
                                        <div class="d-flex align-items-center">
                                          <button type="button" class="btn btn-outline-primary me-3 fingerprint-btn" data-finger="<?= htmlspecialchars($finger, ENT_QUOTES, 'UTF-8') ?>" data-finger-id="<?= $num ?>">
                                            <i class="icon-base ti tabler-fingerprint"></i> Capture
                                          </button>
                                          <span><?= htmlspecialchars($finger, ENT_QUOTES, 'UTF-8') ?></span>
                                          <div class="form-check ms-auto">
                                            <input class="form-check-input finger-missing" type="checkbox" id="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>" data-finger-id="<?= $num ?>">
                                            <label class="form-check-label" for="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>">Missing</label>
                                          </div>
                                          <div class="finger-preview ms-2" data-finger-id="<?= $num ?>">
                                            <canvas class="finger-canvas" width="60" height="80" style="border: 1px solid #ddd; border-radius: 4px;"></canvas>
                                            <div class="finger-quality small text-muted mt-1"></div>
                                          </div>
                                        </div>
                                        <input type="hidden" id="fingerprint-data-<?= $num ?>" name="fingerprint[<?= $num ?>]">
                                      </div>
                                    <?php endforeach; ?>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev">
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="submit" name="submit_update" class="btn btn-success btn-submit">
                                <i class="icon-base ti tabler-check me-2"></i> Submit Update
                              </button>
                            </div>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                <?php endif; ?>
              </div>
            </div>
          </div>
          <!-- / Content -->

          <!-- Footer -->
          <?php include('includes/footer.php'); ?>
          <!-- / Footer -->

          <div class="content-backdrop fade"></div>
        </div>
        <!-- Content wrapper -->
      </div>
      <!-- / Layout page -->
    </div>

    <!-- Overlay -->
    <div class="layout-overlay layout-menu-toggle"></div>

    <!-- Drag Target Area To SlideIn Menu On Small Screens -->
    <div class="drag-target"></div>
  </div>
  <!-- / Layout wrapper -->
  <?php include('includes/script.php'); ?>

  <?php if ($show_form): ?>
    <!-- Only load these scripts if form is shown -->
    <style>
      .status-panel {
        background: #222;
        padding: 15px;
        border-radius: 5px;
        margin: 15px 0;
        border-left: 4px solid #555;
        color: white;
      }

      .status-success {
        border-left-color: #28a745;
      }

      .status-error {
        border-left-color: #dc3545;
      }

      .status-warning {
        border-left-color: #ffc107;
      }

      .finger-preview {
        display: none;
        text-align: center;
      }

      .finger-preview.show {
        display: block;
      }

      .finger-quality.low {
        color: #dc3545;
        font-weight: bold;
      }

      .finger-quality.good {
        color: #28a745;
      }

      .finger-quality.fair {
        color: #ffc107;
      }

      .btn-recapture {
        display: none;
      }

      .btn-recapture.show {
        display: inline-block;
      }

      .btn-prev,
      .btn-next {
        min-width: 120px;
      }

      .btn-submit {
        min-width: 150px;
      }

      .fingerprint-btn {
        min-width: 100px;
      }
    </style>

    <script src="../../assets/js/fingerprint-capture.js"></script>
    <script src="../../assets/js/bs-stepper-init.js"></script>
    <script src="../../assets/js/bs-stepper-form-validator.js"></script>
    <script>
      window.addEventListener('DOMContentLoaded', () => {
        // Handle form submission
        document.getElementById('updateForm').addEventListener('submit', function(e) {
          // Validate at least 6 fingerprints
          const capturedFingers = document.querySelectorAll('input[name^="fingerprint"]').length;
          const missingFingers = document.getElementById('missing-fingers-input').value.split(',').filter(Boolean).length;

          if ((capturedFingers + missingFingers) < 6) {
            e.preventDefault();
            Swal.fire({
              title: '<strong>Error</strong>',
              html: '<p>At least 6 fingerprints must be captured or marked as missing.</p>',
              icon: 'error',
              confirmButtonText: '<i class="icon-base ti tabler-alert-circle"></i> OK',
              customClass: {
                popup: 'swal-wide',
                confirmButton: 'btn btn-danger'
              }
            });
          }
        });

        // Handle missing fingers checkboxes
        document.querySelectorAll('.finger-missing').forEach(checkbox => {
          checkbox.addEventListener('change', function() {
            const fingerId = this.dataset.fingerId;
            const previewElement = document.querySelector(`.finger-preview[data-finger-id="${fingerId}"]`);

            if (this.checked) {
              previewElement.style.display = 'none';
              document.getElementById(`fingerprint-data-${fingerId}`).value = '';
            } else {
              previewElement.style.display = 'block';
            }

            updateMissingFingersInput();
          });
        });

        // Handle entire hand missing checkboxes
        document.getElementById('left-hand-missing').addEventListener('change', function() {
          const checkboxes = document.querySelectorAll('.finger-missing[data-finger-id="1"], .finger-missing[data-finger-id="2"], .finger-missing[data-finger-id="3"], .finger-missing[data-finger-id="4"], .finger-missing[data-finger-id="5"]');

          checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
            const fingerId = checkbox.dataset.fingerId;
            const previewElement = document.querySelector(`.finger-preview[data-finger-id="${fingerId}"]`);

            if (this.checked) {
              previewElement.style.display = 'none';
              document.getElementById(`fingerprint-data-${fingerId}`).value = '';
            } else {
              previewElement.style.display = 'block';
            }
          });

          updateMissingFingersInput();
        });

        document.getElementById('right-hand-missing').addEventListener('change', function() {
          const checkboxes = document.querySelectorAll('.finger-missing[data-finger-id="6"], .finger-missing[data-finger-id="7"], .finger-missing[data-finger-id="8"], .finger-missing[data-finger-id="9"], .finger-missing[data-finger-id="10"]');

          checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
            const fingerId = checkbox.dataset.fingerId;
            const previewElement = document.querySelector(`.finger-preview[data-finger-id="${fingerId}"]`);

            if (this.checked) {
              previewElement.style.display = 'none';
              document.getElementById(`fingerprint-data-${fingerId}`).value = '';
            } else {
              previewElement.style.display = 'block';
            }
          });

          updateMissingFingersInput();
        });

        // Update the hidden input with missing fingers
        function updateMissingFingersInput() {
          const missingFingers = [];
          document.querySelectorAll('.finger-missing:checked').forEach(checkbox => {
            missingFingers.push(checkbox.dataset.fingerId);
          });
          document.getElementById('missing-fingers-input').value = missingFingers.join(',');
        }
      });
    </script>
  <?php endif; ?>
  <?php if (!empty($success_message)): ?>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        Swal.fire({
          title: '<strong>Success</strong>',
          html: <?= json_encode("<p>$success_message</p>") ?>,
          icon: 'success',
          confirmButtonText: '<i class="icon-base ti tabler-check"></i> OK',
          customClass: {
            popup: 'swal-wide',
            confirmButton: 'btn btn-success'
          }
        });
      });
    </script>
  <?php endif; ?>

  <?php if (!empty($error_message)): ?>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        Swal.fire({
          title: '<strong>Error</strong>',
          html: <?= json_encode("<p>$error_message</p>") ?>,
          icon: 'error',
          confirmButtonText: '<i class="icon-base ti tabler-alert-circle"></i> OK',
          customClass: {
            popup: 'swal-wide',
            confirmButton: 'btn btn-danger'
          }
        });
      });
    </script>
  <?php endif; ?>
</body>

</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>