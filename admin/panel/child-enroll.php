<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Check if child enrollment service is active
$stmt = $pdo->query("SELECT is_active, price FROM prices_list WHERE service_key = 'child-enrollment' LIMIT 1");
$service = $stmt->fetch(PDO::FETCH_ASSOC);
$isPanelActive = $service['is_active'] ?? false;
$price = (float)($service['price'] ?? 0);

if (!$isPanelActive) {
    echo "<script>
        document.addEventListener('DOMContentLoaded', function() {
            Swal.fire({
                title: '<strong>Service not available at the moment.</strong>',
                html: '<p>The child enroll service is temporarily disabled. Please try again later.</p>',
                icon: 'info',
                confirmButtonText: '<i class=\"icon-base ti tabler-check\"></i> OK',
                customClass: {
                    popup: 'swal-wide',
                    confirmButton: 'btn btn-success'
                }
            }).then(() => {
                window.location.href = '/admin/panel/index.php';
            });
        });
    </script>";
    // Don't show any form content
    include('includes/head.php');
    echo '</body></html>';
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
$stmt->execute([$user_id]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$user) {
    header("Location: logout.php");
    exit;
}

$wallet_balance = (float)$user['wallet'];
$show_form = ($wallet_balance >= $price);

$success_message = '';
$error_message = '';
$application_id = null;

// Handle form submission if form is shown and submitted
if ($show_form && $_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['submit_update'])) {
    try {
        // Start DB transaction
        $pdo->beginTransaction();

        // FIRST: Deduct from wallet with balance check
        $deduct_stmt = $pdo->prepare("UPDATE users SET wallet = wallet - ? WHERE id = ? AND wallet >= ?");
        $deduct_stmt->execute([$price, $user_id, $price]);
        $rows_affected = $deduct_stmt->rowCount();

        if ($rows_affected === 0) {
            throw new Exception("Insufficient wallet balance. Required: ₹$price, Available: ₹$wallet_balance");
        }

        // Validate required fields
        $required = [
            'child_name', 'child_dob', 'child_gender', 'child_birthplace',
            'guardian_name', 'guardian_relation', 'guardian_aadhar', 'guardian_mobile',
            'address_line1', 'city', 'district', 'state', 'pincode'
        ];
        
        foreach ($required as $field) {
            if (empty($_POST[$field])) {
                throw new Exception("All required fields must be filled");
            }
        }

        // Validate file uploads
        $required_files = ['birth_certificate', 'guardian_id_proof_file', 'child_photo'];
        foreach ($required_files as $file_field) {
            if (empty($_FILES[$file_field]['tmp_name'])) {
                throw new Exception("Please upload all required documents");
            }
        }

        // Validate data formats
        if (!preg_match('/^[0-9]{12}$/', $_POST['guardian_aadhar'])) {
            throw new Exception("Aadhar number must be 12 digits");
        }
        if (!preg_match('/^[0-9]{10}$/', $_POST['guardian_mobile'])) {
            throw new Exception("Mobile number must be 10 digits");
        }
        if (!preg_match('/^[0-9]{6}$/', $_POST['pincode'])) {
            throw new Exception("Pin code must be 6 digits");
        }
        if (strtotime($_POST['child_dob']) > strtotime('today')) {
            throw new Exception("Date of birth cannot be in the future");
        }

        // Validate biometric data
        $capturedFingers = !empty($_POST['fingerprint']) ? count(array_filter($_POST['fingerprint'])) : 0;
        $missingFingers = !empty($_POST['missing_fingers']) ? count(explode(',', $_POST['missing_fingers'])) : 0;
        if (($capturedFingers + $missingFingers) < 6) {
            throw new Exception("At least 6 fingerprints must be captured or marked as missing");
        }

        // Process fingerprints
        $fingerprints = array_fill(1, 10, null);
        if (!empty($_POST['fingerprint'])) {
            foreach ($_POST['fingerprint'] as $fingerId => $bmpData) {
                if ($fingerId >= 1 && $fingerId <= 10 && !empty($bmpData)) {
                    $fingerprints[$fingerId] = 'data:image/bmp;base64,' . $bmpData;
                }
            }
        }
        $missingFingers = !empty($_POST['missing_fingers']) ? explode(',', $_POST['missing_fingers']) : [];

        // Process file uploads
        $upload_dir = '../../uploads/child_enrollment/' . $user_id . '/';
        if (!file_exists($upload_dir)) {
            mkdir($upload_dir, 0777, true);
        }

        $file_fields = [
            'birth_certificate' => 'birth_certificate',
            'guardian_id_proof_file' => 'guardian_id_proof',
            'child_photo' => 'child_photo'
        ];

        $file_paths = [];
        foreach ($file_fields as $field => $db_field) {
            if (!empty($_FILES[$field]['tmp_name'])) {
                $file_ext = pathinfo($_FILES[$field]['name'], PATHINFO_EXTENSION);
                $file_name = $db_field . '_' . time() . '.' . $file_ext;
                $file_path = $upload_dir . $file_name;

                if ($_FILES[$field]['size'] > 2097152) {
                    throw new Exception("File size for $db_field exceeds 2MB limit");
                }

                $allowed_types = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'];
                $file_info = finfo_open(FILEINFO_MIME_TYPE);
                $mime_type = finfo_file($file_info, $_FILES[$field]['tmp_name']);
                finfo_close($file_info);

                if (!in_array($mime_type, $allowed_types)) {
                    throw new Exception("Invalid file type for $db_field. Only JPG, PNG, GIF, or PDF allowed");
                }

                if (move_uploaded_file($_FILES[$field]['tmp_name'], $file_path)) {
                    $file_paths[$db_field] = $file_path;
                } else {
                    throw new Exception("Failed to upload $db_field file");
                }
            }
        }

        // Generate application ID
        $application_id = 'CHILD-' . date('Ymd-His') . '-' . rand(10000, 99999);

        // Insert into database
        $stmt = $pdo->prepare("
            INSERT INTO child_enroll (
                application_id, user_id, 
                child_name, child_dob, child_gender, child_birthplace, child_birth_hospital, child_birth_weight,
                guardian_name, guardian_relation, guardian_aadhar, guardian_mobile, guardian_email,
                address_line1, address_line2, city, district, state, pincode, landmark,
                birth_certificate_path, guardian_id_proof_path, child_photo_path,
                finger1, finger2, finger3, finger4, finger5,
                finger6, finger7, finger8, finger9, finger10,
                missing_fingers, submitted_at, status
            ) VALUES (
                ?, ?, 
                ?, ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?, ?, ?,
                ?, ?, ?,
                ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?,
                ?, NOW(), 'pending'
            )
        ");

        $stmt->execute([
            $application_id,
            $user_id,
            htmlspecialchars($_POST['child_name']),
            $_POST['child_dob'],
            $_POST['child_gender'],
            htmlspecialchars($_POST['child_birthplace']),
            !empty($_POST['child_birth_hospital']) ? htmlspecialchars($_POST['child_birth_hospital']) : null,
            !empty($_POST['child_birth_weight']) ? (float)$_POST['child_birth_weight'] : null,
            htmlspecialchars($_POST['guardian_name']),
            $_POST['guardian_relation'],
            $_POST['guardian_aadhar'],
            $_POST['guardian_mobile'],
            !empty($_POST['guardian_email']) ? $_POST['guardian_email'] : null,
            htmlspecialchars($_POST['address_line1']),
            !empty($_POST['address_line2']) ? htmlspecialchars($_POST['address_line2']) : null,
            htmlspecialchars($_POST['city']),
            htmlspecialchars($_POST['district']),
            $_POST['state'],
            $_POST['pincode'],
            !empty($_POST['landmark']) ? htmlspecialchars($_POST['landmark']) : null,
            $file_paths['birth_certificate'] ?? null,
            $file_paths['guardian_id_proof'] ?? null,
            $file_paths['child_photo'] ?? null,
            $fingerprints[1],
            $fingerprints[2],
            $fingerprints[3],
            $fingerprints[4],
            $fingerprints[5],
            $fingerprints[6],
            $fingerprints[7],
            $fingerprints[8],
            $fingerprints[9],
            $fingerprints[10],
            !empty($missingFingers) ? implode(',', $missingFingers) : null
        ]);

        // Commit transaction
        $pdo->commit();

        $success_message = "Child enrollment submitted successfully! ₹" . number_format($price, 2) . " deducted. Application ID: $application_id";
        
        echo "<script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    title: '<strong>Success</strong>',
                    html: '<p>$success_message</p>',
                    icon: 'success',
                    confirmButtonText: '<i class=\"icon-base ti tabler-check\"></i> OK',
                    customClass: {
                        popup: 'swal-wide',
                        confirmButton: 'btn btn-success'
                    }
                }).then(() => {
                    window.location.href = 'child-applications.php';
                });
            });
        </script>";

        $_POST = [];
        $_FILES = [];
    } catch (Exception $e) {
        $pdo->rollBack();
        $error_message = 'Error: ' . $e->getMessage();
        echo "<script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    title: '<strong>Error</strong>',
                    html: '<p>$error_message</p>',
                    icon: 'error',
                    confirmButtonText: '<i class=\"icon-base ti tabler-alert-circle\"></i> OK',
                    customClass: {
                        popup: 'swal-wide',
                        confirmButton: 'btn btn-danger'
                    }
                });
            });
        </script>";
    }
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
<?php include('includes/head.php'); ?>

<body>
  <!-- Layout wrapper -->
  <div class="layout-wrapper layout-content-navbar">
    <div class="layout-container">
      <!-- Menu -->
      <?php include('includes/sidebar.php'); ?>

      <div class="menu-mobile-toggler d-xl-none rounded-1">
        <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
          <i class="ti tabler-menu icon-base"></i>
          <i class="ti tabler-chevron-right icon-base"></i>
        </a>
      </div>
      <!-- / Menu -->

      <!-- Layout container -->
      <div class="layout-page">
        <!-- Navbar -->
        <?php include('includes/navbar.php'); ?>

        <!-- / Navbar -->

        <!-- Content wrapper -->
        <div class="content-wrapper">
          <!-- Content -->
          <div class="container-xxl flex-grow-1 container-p-y">
            <div class="row">
              <div class="col-12">
                <small class="fw-medium">Aadhar Child Enrollment</small>
                
                <?php if (!$show_form): ?>
                  <div class="alert alert-danger mt-3">
                    <h4 class="alert-heading">Insufficient Wallet Balance</h4>
                    <p>You need at least ₹<?= number_format($price, 2) ?> in your wallet to enroll a child. Your current balance is ₹<?= number_format($wallet_balance, 2) ?>.</p>
                    <hr>
                    <div class="d-flex justify-content-between">
                      <a href="/admin/panel/deposit.php" class="btn btn-primary">
                        <i class="icon-base ti tabler-wallet me-2"></i> Recharge Wallet
                      </a>
                      <a href="/admin/panel/index.php" class="btn btn-secondary">
                        <i class="icon-base ti tabler-arrow-left me-2"></i> Back to Dashboard
                      </a>
                    </div>
                  </div>
                <?php else: ?>
                  <!-- Only show the form if user has sufficient balance -->
                  <div id="wizard-validation" class="bs-stepper vertical wizard-modern wizard-modern-vertical-icons-example mt-2">
                    <div class="bs-stepper-header">
                      <div class="step" data-target="#child-details">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-baby-carriage icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Child Details</span>
                            <span class="bs-stepper-subtitle">Basic information</span>
                          </span>
                        </button>
                      </div>
                      <div class="line"></div>
                      <div class="step" data-target="#guardian-details">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-users icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Guardian Details</span>
                            <span class="bs-stepper-subtitle">Parent/Guardian info</span>
                          </span>
                        </button>
                      </div>
                      <div class="line"></div>
                      <div class="step" data-target="#address-details">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-home icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Address</span>
                            <span class="bs-stepper-subtitle">Residential address</span>
                          </span>
                        </button>
                      </div>
                      <div class="line"></div>
                      <div class="step" data-target="#documents-upload">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-file-upload icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Documents</span>
                            <span class="bs-stepper-subtitle">Required proofs</span>
                          </span>
                        </button>
                      </div>
                      <div class="line"></div>
                      <div class="step" data-target="#biometric-data">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-fingerprint icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Biometric</span>
                            <span class="bs-stepper-subtitle">Fingerprints & photo</span>
                          </span>
                        </button>
                      </div>
                    </div>
                    <div class="bs-stepper-content">
                      <form id="updateForm" class="needs-validation" method="post" enctype="multipart/form-data" action="" novalidate>
                        <!-- Child Details -->
                        <div id="child-details" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Child Information</h6>
                            <small>Enter the child's basic details</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-sm-6">
                              <label class="form-label" for="child-name">Full Name (as per birth certificate)</label>
                              <input type="text" 
                                id="child-name" 
                                name="child_name" 
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$" 
                                required
                                value="<?= isset($_POST['child_name']) ? htmlspecialchars($_POST['child_name']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid child name.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="child-dob">Date of Birth</label>
                              <input type="date" 
                                id="child-dob" 
                                name="child_dob" 
                                class="form-control" 
                                required
                                max="<?= date('Y-m-d') ?>"
                                value="<?= isset($_POST['child_dob']) ? htmlspecialchars($_POST['child_dob']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid date of birth.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="child-gender">Gender</label>
                              <select id="child-gender" name="child_gender" class="form-select" required>
                                <option value="">Select</option>
                                <option value="male" <?= isset($_POST['child_gender']) && $_POST['child_gender'] === 'male' ? 'selected' : '' ?>>Male</option>
                                <option value="female" <?= isset($_POST['child_gender']) && $_POST['child_gender'] === 'female' ? 'selected' : '' ?>>Female</option>
                                <option value="other" <?= isset($_POST['child_gender']) && $_POST['child_gender'] === 'other' ? 'selected' : '' ?>>Other</option>
                              </select>
                              <div class="invalid-feedback">Please select a gender.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="child-birthplace">Place of Birth</label>
                              <input type="text" 
                                id="child-birthplace" 
                                name="child_birthplace" 
                                class="form-control" 
                                pattern="^(?=(?:\s*[^\s]){2}).+$" 
                                required
                                value="<?= isset($_POST['child_birthplace']) ? htmlspecialchars($_POST['child_birthplace']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid birth place.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="child-birth-hospital">Hospital Name (if applicable)</label>
                              <input type="text" 
                                id="child-birth-hospital" 
                                name="child_birth_hospital"
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                value="<?= isset($_POST['child_birth_hospital']) ? htmlspecialchars($_POST['child_birth_hospital']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid hospital name.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="child-birth-weight">Birth Weight (kg)</label>
                              <input type="number" 
                                step="0.01" 
                                min="0.5" 
                                max="10"
                                id="child-birth-weight" 
                                name="child_birth_weight"
                                class="form-control"
                                value="<?= isset($_POST['child_birth_weight']) ? htmlspecialchars($_POST['child_birth_weight']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid birth weight (0.5-10 kg).</div>
                            </div>
                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev" disabled>
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="button" class="btn btn-primary btn-next">
                                <span class="align-middle d-sm-inline-block d-none me-sm-2">Next</span>
                                <i class="icon-base ti tabler-arrow-right icon-xs"></i>
                              </button>
                            </div>
                          </div>
                        </div>

                        <!-- Guardian Details -->
                        <div id="guardian-details" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Guardian Information</h6>
                            <small>Parent or legal guardian details</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-sm-6">
                              <label class="form-label" for="guardian-name">Guardian Full Name</label>
                              <input type="text" 
                                id="guardian-name" 
                                name="guardian_name"
                                class="form-control" 
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['guardian_name']) ? htmlspecialchars($_POST['guardian_name']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid guardian name.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="guardian-relation">Relationship to Child</label>
                              <select id="guardian-relation" name="guardian_relation" class="form-select" required>
                                <option value="">Select</option>
                                <option value="Father" <?= isset($_POST['guardian_relation']) && $_POST['guardian_relation'] === 'Father' ? 'selected' : '' ?>>Father</option>
                                <option value="Mother" <?= isset($_POST['guardian_relation']) && $_POST['guardian_relation'] === 'Mother' ? 'selected' : '' ?>>Mother</option>
                                <option value="Grandfather" <?= isset($_POST['guardian_relation']) && $_POST['guardian_relation'] === 'Grandfather' ? 'selected' : '' ?>>Grandfather</option>
                                <option value="Grandmother" <?= isset($_POST['guardian_relation']) && $_POST['guardian_relation'] === 'Grandmother' ? 'selected' : '' ?>>Grandmother</option>
                                <option value="Legal Guardian" <?= isset($_POST['guardian_relation']) && $_POST['guardian_relation'] === 'Legal Guardian' ? 'selected' : '' ?>>Legal Guardian</option>
                                <option value="Other" <?= isset($_POST['guardian_relation']) && $_POST['guardian_relation'] === 'Other' ? 'selected' : '' ?>>Other</option>
                              </select>
                              <div class="invalid-feedback">Please select a relationship.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="guardian-aadhar">Aadhar Number</label>
                              <input type="text" 
                                id="guardian-aadhar" 
                                name="guardian_aadhar"
                                class="form-control" 
                                pattern="[0-9]{12}" 
                                required
                                value="<?= isset($_POST['guardian_aadhar']) ? htmlspecialchars($_POST['guardian_aadhar']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid 12-digit Aadhar number.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="guardian-mobile">Mobile Number</label>
                              <input type="tel" 
                                id="guardian-mobile" 
                                name="guardian_mobile"
                                class="form-control" 
                                pattern="[0-9]{10}" 
                                required
                                value="<?= isset($_POST['guardian_mobile']) ? htmlspecialchars($_POST['guardian_mobile']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid 10-digit mobile number.</div>
                            </div>
                            <div class="col-sm-6">
                              <label class="form-label" for="guardian-email">Email Address</label>
                              <input type="email" 
                                id="guardian-email" 
                                name="guardian_email"
                                class="form-control"
                                value="<?= isset($_POST['guardian_email']) ? htmlspecialchars($_POST['guardian_email']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid email address.</div>
                            </div>
                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev">
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="button" class="btn btn-primary btn-next">
                                <span class="align-middle d-sm-inline-block d-none me-sm-2">Next</span>
                                <i class="icon-base ti tabler-arrow-right icon-xs"></i>
                              </button>
                            </div>
                          </div>
                        </div>

                        <!-- Address Details -->
                        <div id="address-details" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Address Information</h6>
                            <small>Enter residential address details</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-12">
                              <label class="form-label" for="address-line1">Address Line 1</label>
                              <input type="text" 
                                id="address-line1" 
                                name="address_line1"
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$" 
                                required
                                value="<?= isset($_POST['address_line1']) ? htmlspecialchars($_POST['address_line1']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid address line 1.</div>
                            </div>
                            <div class="col-12">
                              <label class="form-label" for="address-line2">Address Line 2 (Optional)</label>
                              <input type="text" 
                                id="address-line2" 
                                name="address_line2"
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                value="<?= isset($_POST['address_line2']) ? htmlspecialchars($_POST['address_line2']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid address line 2.</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="city">City</label>
                              <input type="text" 
                                id="city" 
                                name="city"
                                class="form-control" 
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['city']) ? htmlspecialchars($_POST['city']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid city name.</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="district">District</label>
                              <input type="text" 
                                id="district" 
                                name="district"
                                class="form-control" 
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['district']) ? htmlspecialchars($_POST['district']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid district name.</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="state">State</label>
                              <select id="state" name="state" class="form-select" required>
                                <option value="">Select a state</option>
                                <option value="Andhra Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Andhra Pradesh' ? 'selected' : '' ?>>Andhra Pradesh</option>
                              <option value="Arunachal Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Arunachal Pradesh' ? 'selected' : '' ?>>Arunachal Pradesh</option>
                                <option value="Assam" <?= isset($_POST['state']) && $_POST['state'] === 'Assam' ? 'selected' : '' ?>>Assam</option>
                                <option value="Bihar" <?= isset($_POST['state']) && $_POST['state'] === 'Bihar' ? 'selected' : '' ?>>Bihar</option>
                                <option value="Chhattisgarh" <?= isset($_POST['state']) && $_POST['state'] === 'Chhattisgarh' ? 'selected' : '' ?>>Chhattisgarh</option>
                                <option value="Goa" <?= isset($_POST['state']) && $_POST['state'] === 'Goa' ? 'selected' : '' ?>>Goa</option>
                                <option value="Gujarat" <?= isset($_POST['state']) && $_POST['state'] === 'Gujarat' ? 'selected' : '' ?>>Gujarat</option>
                                <option value="Haryana" <?= isset($_POST['state']) && $_POST['state'] === 'Haryana' ? 'selected' : '' ?>>Haryana</option>
                                <option value="Himachal Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Himachal Pradesh' ? 'selected' : '' ?>>Himachal Pradesh</option>
                                <option value="Jharkhand" <?= isset($_POST['state']) && $_POST['state'] === 'Jharkhand' ? 'selected' : '' ?>>Jharkhand</option>
                                <option value="Karnataka" <?= isset($_POST['state']) && $_POST['state'] === 'Karnataka' ? 'selected' : '' ?>>Karnataka</option>
                                <option value="Kerala" <?= isset($_POST['state']) && $_POST['state'] === 'Kerala' ? 'selected' : '' ?>>Kerala</option>
                                <option value="Madhya Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Madhya Pradesh' ? 'selected' : '' ?>>Madhya Pradesh</option>
                                <option value="Maharashtra" <?= isset($_POST['state']) && $_POST['state'] === 'Maharashtra' ? 'selected' : '' ?>>Maharashtra</option>
                                <option value="Manipur" <?= isset($_POST['state']) && $_POST['state'] === 'Manipur' ? 'selected' : '' ?>>Manipur</option>
                                <option value="Meghalaya" <?= isset($_POST['state']) && $_POST['state'] === 'Meghalaya' ? 'selected' : '' ?>>Meghalaya</option>
                                <option value="Mizoram" <?= isset($_POST['state']) && $_POST['state'] === 'Mizoram' ? 'selected' : '' ?>>Mizoram</option>
                                <option value="Nagaland" <?= isset($_POST['state']) && $_POST['state'] === 'Nagaland' ? 'selected' : '' ?>>Nagaland</option>
                                <option value="Odisha" <?= isset($_POST['state']) && $_POST['state'] === 'Odisha' ? 'selected' : '' ?>>Odisha</option>
                                <option value="Punjab" <?= isset($_POST['state']) && $_POST['state'] === 'Punjab' ? 'selected' : '' ?>>Punjab</option>
                                <option value="Rajasthan" <?= isset($_POST['state']) && $_POST['state'] === 'Rajasthan' ? 'selected' : '' ?>>Rajasthan</option>
                                <option value="Sikkim" <?= isset($_POST['state']) && $_POST['state'] === 'Sikkim' ? 'selected' : '' ?>>Sikkim</option>
                                <option value="Tamil Nadu" <?= isset($_POST['state']) && $_POST['state'] === 'Tamil Nadu' ? 'selected' : '' ?>>Tamil Nadu</option>
                                <option value="Telangana" <?= isset($_POST['state']) && $_POST['state'] === 'Telangana' ? 'selected' : '' ?>>Telangana</option>
                                <option value="Tripura" <?= isset($_POST['state']) && $_POST['state'] === 'Tripura' ? 'selected' : '' ?>>Tripura</option>
                                <option value="Uttar Pradesh" <?= isset($_POST['state']) && $_POST['state'] === 'Uttar Pradesh' ? 'selected' : '' ?>>Uttar Pradesh</option>
                                <option value="Uttarakhand" <?= isset($_POST['state']) && $_POST['state'] === 'Uttarakhand' ? 'selected' : '' ?>>Uttarakhand</option>
                                <option value="West Bengal" <?= isset($_POST['state']) && $_POST['state'] === 'West Bengal' ? 'selected' : '' ?>>West Bengal</option>
                                <option value="Andaman and Nicobar Islands" <?= isset($_POST['state']) && $_POST['state'] === 'Andaman and Nicobar Islands' ? 'selected' : '' ?>>Andaman and Nicobar Islands</option>
                                <option value="Chandigarh" <?= isset($_POST['state']) && $_POST['state'] === 'Chandigarh' ? 'selected' : '' ?>>Chandigarh</option>
                                <option value="Dadra and Nagar Haveli and Daman and Diu" <?= isset($_POST['state']) && $_POST['state'] === 'Dadra and Nagar Haveli and Daman and Diu' ? 'selected' : '' ?>>Dadra and Nagar Haveli and Daman and Diu</option>
                                <option value="Delhi" <?= isset($_POST['state']) && $_POST['state'] === 'Delhi' ? 'selected' : '' ?>>Delhi</option>
                                <option value="Jammu and Kashmir" <?= isset($_POST['state']) && $_POST['state'] === 'Jammu and Kashmir' ? 'selected' : '' ?>>Jammu and Kashmir</option>
                                <option value="Ladakh" <?= isset($_POST['state']) && $_POST['state'] === 'Ladakh' ? 'selected' : '' ?>>Ladakh</option>
                                <option value="Lakshadweep" <?= isset($_POST['state']) && $_POST['state'] === 'Lakshadweep' ? 'selected' : '' ?>>Lakshadweep</option>
                                <option value="Puducherry" <?= isset($_POST['state']) && $_POST['state'] === 'Puducherry' ? 'selected' : '' ?>>Puducherry</option>
                              </select>
                              <div class="invalid-feedback">Please select a state.</div>
                            </div>
                            <div class="col-md-6">
                              <label class="form-label" for="pincode">Pin Code</label>
                              <input type="text" 
                                id="pincode" 
                                name="pincode"
                                class="form-control" 
                                pattern="[0-9]{6}" 
                                required
                                value="<?= isset($_POST['pincode']) ? htmlspecialchars($_POST['pincode']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid 6-digit pin code.</div>
                            </div>
                            <div class="col-md-6">
                              <label class="form-label" for="landmark">Landmark (Optional)</label>
                              <input type="text" 
                                id="landmark" 
                                name="landmark"
                                class="form-control"
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                value="<?= isset($_POST['landmark']) ? htmlspecialchars($_POST['landmark']) : '' ?>"
                              >
                              <div class="invalid-feedback">Please provide a valid landmark.</div>
                            </div>
                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev">
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="button" class="btn btn-primary btn-next">
                                <span class="align-middle d-sm-inline-block d-none me-sm-2">Next</span>
                                <i class="icon-base ti tabler-arrow-right icon-xs"></i>
                              </button>
                            </div>
                          </div>
                        </div>

                        <!-- Documents Upload -->
                        <div id="documents-upload" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Required Documents</h6>
                            <small>Upload scanned copies of documents</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-12">
                              <div class="card mb-4">
                                <div class="card-header">
                                  <h5 class="mb-0">Proof of Identity</h5>
                                </div>
                                <div class="card-body">
                                  <div class="row g-3">
                                    <div class="col-md-6">
                                      <label class="form-label" for="birth-certificate">Birth Certificate</label>
                                      <input type="file" id="birth-certificate" name="birth_certificate" class="form-control" accept="application/pdf,image/*" required>
                                      <small class="text-muted">Max 2MB (PDF, JPG, PNG)</small>
                                      <div class="invalid-feedback">Please upload birth certificate.</div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <div class="col-12">
                              <div class="card mb-4">
                                <div class="card-header">
                                  <h5 class="mb-0">Proof of Address</h5>
                                </div>
                                <div class="card-body">
                                  <div class="row g-3">
                                    <div class="col-md-6">
                                      <label class="form-label" for="guardian-id-proof">Guardian's ID Proof</label>
                                      <select id="guardian-id-proof" name="guardian_id_proof" class="form-select mb-2">
                                        <option value="">Select ID Proof</option>
                                        <option value="Aadhar Card">Aadhar Card</option>
                                        <option value="Passport">Passport</option>
                                        <option value="Voter ID">Voter ID</option>
                                        <option value="Driving License">Driving License</option>
                                        <option value="PAN Card">PAN Card</option>
                                      </select>
                                      <input type="file" id="guardian-id-proof-file" name="guardian_id_proof_file" class="form-control" accept="application/pdf,image/*" required>
                                      <small class="text-muted">Max 2MB (PDF, JPG, PNG)</small>
                                      <div class="invalid-feedback">Please upload guardian ID proof.</div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev">
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="button" class="btn btn-primary btn-next">
                                <span class="align-middle d-sm-inline-block d-none me-sm-2">Next</span>
                                <i class="icon-base ti tabler-arrow-right icon-xs"></i>
                              </button>
                            </div>
                          </div>
                        </div>

                        <!-- Biometric Verification -->
                        <div id="biometric-data" class="content">
                          <input type="hidden" name="missing_fingers" id="missing-fingers-input" value="">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Biometric Verification</h6>
                            <small>Capture all 10 fingerprints</small>
                          </div>
                          <div class="row g-3">
                            <!-- Device Status Panel -->
                            <div class="col-12">
                              <div class="status-panel" id="serviceStatus">Checking device services...</div>
                            </div>

                            <!-- Left Hand -->
                            <div class="col-md-6">
                              <div class="card mb-4">
                                <div class="card-header d-flex justify-content-between">
                                  <h5>Left Hand</h5>
                                  <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="left-hand-missing">
                                    <label class="form-check-label" for="left-hand-missing">Entire Hand Missing</label>
                                  </div>
                                </div>
                                <div class="card-body text-center">
                                  <div class="row g-3">
                                    <?php
                                    $leftFingers = [
                                      '1' => 'Left Thumb',
                                      '2' => 'Left Index',
                                      '3' => 'Left Middle',
                                      '4' => 'Left Ring',
                                      '5' => 'Left Little'
                                    ];
                                    foreach ($leftFingers as $num => $finger): ?>
                                      <div class="col-12">
                                        <div class="d-flex align-items-center">
                                          <button type="button" class="btn btn-outline-primary me-3 fingerprint-btn" data-finger="<?= $finger ?>" data-finger-id="<?= $num ?>">
                                            <i class="icon-base ti tabler-fingerprint"></i> Capture
                                          </button>
                                          <span><?= $finger ?></span>
                                          <div class="form-check ms-auto">
                                            <input class="form-check-input finger-missing" type="checkbox" id="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>" data-finger-id="<?= $num ?>">
                                            <label class="form-check-label" for="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>">Missing</label>
                                          </div>
                                          <div class="finger-preview ms-2" data-finger-id="<?= $num ?>">
                                            <canvas class="finger-canvas" width="60" height="80" style="border: 1px solid #ddd; border-radius: 4px;"></canvas>
                                            <div class="finger-quality small text-muted mt-1"></div>
                                          </div>
                                        </div>
                                        <input type="hidden" id="fingerprint-data-<?= $num ?>" name="fingerprint[<?= $num ?>]">
                                      </div>
                                    <?php endforeach; ?>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <!-- Right Hand -->
                            <div class="col-md-6">
                              <div class="card mb-4">
                                <div class="card-header d-flex justify-content-between">
                                  <h5>Right Hand</h5>
                                  <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="right-hand-missing">
                                    <label class="form-check-label" for="right-hand-missing">Entire Hand Missing</label>
                                  </div>
                                </div>
                                <div class="card-body text-center">
                                  <div class="row g-3">
                                    <?php
                                    $rightFingers = [
                                      '6' => 'Right Thumb',
                                      '7' => 'Right Index',
                                      '8' => 'Right Middle',
                                      '9' => 'Right Ring',
                                      '10' => 'Right Little'
                                    ];
                                    foreach ($rightFingers as $num => $finger): ?>
                                      <div class="col-12">
                                        <div class="d-flex align-items-center">
                                          <button type="button" class="btn btn-outline-primary me-3 fingerprint-btn" data-finger="<?= $finger ?>" data-finger-id="<?= $num ?>">
                                            <i class="icon-base ti tabler-fingerprint"></i> Capture
                                          </button>
                                          <span><?= $finger ?></span>
                                          <div class="form-check ms-auto">
                                            <input class="form-check-input finger-missing" type="checkbox" id="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>" data-finger-id="<?= $num ?>">
                                            <label class="form-check-label" for="missing-<?= strtolower(str_replace(' ', '-', $finger)) ?>">Missing</label>
                                          </div>
                                          <div class="finger-preview ms-2" data-finger-id="<?= $num ?>">
                                            <canvas class="finger-canvas" width="60" height="80" style="border: 1px solid #ddd; border-radius: 4px;"></canvas>
                                            <div class="finger-quality small text-muted mt-1"></div>
                                          </div>
                                        </div>
                                        <input type="hidden" id="fingerprint-data-<?= $num ?>" name="fingerprint[<?= $num ?>]">
                                      </div>
                                    <?php endforeach; ?>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <!-- Photograph Section -->
                            <div class="col-12">
                              <div class="card mb-4">
                                <div class="card-header">
                                  <h5 class="mb-0">Photograph Capture</h5>
                                  <div id="child-photo-error" class="alert alert-danger mt-3" style="display: none;"></div>
                                </div>
                                <div class="card-body text-center">
                                  <div class="mb-3">
                                    <img id="photo-preview" src="../../assets/img/avatars/child-placeholder.png" class="rounded" width="200" height="200" alt="Child Photo">
                                  </div>
                                  <div class="d-flex justify-content-center gap-3">
                                    <button type="button" class="btn btn-primary" id="capture-photo">
                                      <i class="icon-base ti tabler-camera me-2"></i>Capture Photo
                                    </button>
                                    <button class="btn btn-outline-secondary" id="upload-photo">
                                      <i class="icon-base ti tabler-upload me-2"></i>Upload Photo
                                    </button>
                                    <input type="file" 
                                      id="child-photo" 
                                      name="child_photo"
                                      accept="image/*" 
                                      style="display: none;"
                                      required
                                    >
                                  </div>
                                  <div class="mt-3">
                                    <small class="text-muted">Ensure the photo meets Aadhaar requirements: Plain light background, face clearly visible, no shadows</small>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <!-- Camera Modal -->
                            <div class="modal fade" id="cameraModal" tabindex="-1" aria-labelledby="cameraModalLabel" aria-hidden="true">
                              <div class="modal-dialog modal-dialog-centered modal-lg">
                                <div class="modal-content">
                                  <div class="modal-header">
                                    <h5 class="modal-title" id="cameraModalLabel">Capture Child's Photo</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                  </div>
                                  <div class="modal-body">
                                    <video id="camera" class="w-100" autoplay playsinline></video>
                                    <canvas id="photo-canvas" class="d-none"></canvas>
                                    <img id="capture-preview" class="w-100 d-none" alt="Captured Photo">
                                  </div>
                                  <div class="modal-footer">
                                    <button type="button" class="btn btn-primary" id="capture-btn">Capture</button>
                                    <button type="button" class="btn btn-success d-none" id="save-photo-btn">Accept</button>
                                    <button type="button" class="btn btn-secondary d-none" id="capture-retry">Retry</button>
                                    <button type="button" class="btn btn-secondary" id="capture-close" data-bs-dismiss="modal">Close</button>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <!-- Camera Modal End -->

                            <!-- Declaration -->
                            <div class="col-12">
                              <div class="card">
                                <div class="card-body">
                                  <div class="form-check mb-3">
                                    <input class="form-check-input" 
                                    type="checkbox" 
                                    id="biometric-declaration" 
                                    name="biometric_declaration"
                                    required
                                    >
                                    <label class="form-check-label" for="biometric-declaration">
                                      I hereby declare that all the biometric information provided is correct and belongs to the child being enrolled.
                                      I understand that providing false biometric information is punishable under the Aadhaar Act, 2016.
                                    </label>
                                    <div class="invalid-feedback">You must accept the declaration.</div>
                                  </div>
                                </div>
                              </div>
                            </div>

                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev">
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="submit" name="submit_update" class="btn btn-success btn-submit">
                                <i class="icon-base ti tabler-check me-2"></i> Submit Update
                              </button>
                            </div>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                <?php endif; ?>
              </div>
            </div>
          </div>
          <!-- / Content -->

          <!-- Footer -->
          <?php include('includes/footer.php'); ?>
          <!-- / Footer -->

          <div class="content-backdrop fade"></div>
        </div>
        <!-- Content wrapper -->
      </div>
      <!-- / Layout page -->
    </div>

    <!-- Overlay -->
    <div class="layout-overlay layout-menu-toggle"></div>

    <!-- Drag Target Area To SlideIn Menu On Small Screens -->
    <div class="drag-target"></div>
  </div>
  <!-- / Layout wrapper -->
  <?php include('includes/script.php'); ?>
  
  <?php if ($show_form): ?>
  <!-- Only load these scripts if form is shown -->
  <style>
    .status-panel {
      background: #222;
      padding: 15px;
      border-radius: 5px;
      margin: 15px 0;
      border-left: 4px solid #555;
      color: white;
    }

    .status-success {
      border-left-color: #28a745;
    }

    .status-error {
      border-left-color: #dc3545;
    }

    .status-warning {
      border-left-color: #ffc107;
    }

    .finger-preview {
      display: none;
      text-align: center;
    }

    .finger-preview.show {
      display: block;
    }

    .finger-quality.low {
      color: #dc3545;
      font-weight: bold;
    }

    .finger-quality.good {
      color: #28a745;
    }

    .finger-quality.fair {
      color: #ffc107;
    }

    .btn-recapture {
      display: none;
    }

    .btn-recapture.show {
      display: inline-block;
    }

    .btn-prev,
    .btn-next {
      min-width: 120px;
    }

    .btn-submit {
      min-width: 150px;
    }

    .fingerprint-btn {
      min-width: 100px;
    }
  </style>

  <script src="../../assets/js/webcam.js"></script>
  <script src="../../assets/js/bs-stepper-init.js"></script>
  <script src="../../assets/js/base64-file-handling.js"></script>
  <script src="../../assets/js/fingerprint-capture.js"></script>
  <script src="../../assets/js/camera-capture.js"></script>
  <script src="../../assets/js/bs-stepper-form-validator.js"></script>
  <script>    
      window.addEventListener('DOMContentLoaded', () => {
        // Handle photo upload
        document.getElementById('upload-photo').addEventListener('click', () => {
          document.getElementById('child-photo').click();
        });

        document.getElementById('child-photo').addEventListener('change', function(e) {
          const file = e.target.files[0];
          if (file) {
            // Validate file type
            const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!validTypes.includes(file.type)) {
              showInlineError('Only JPG, PNG or GIF images are allowed', 'child-photo-error');
              return;
            }
            
            // Validate file size (max 2MB)
            if (file.size > 2097152) {
              showInlineError('Image size must be less than 2MB', 'child-photo-error');
              return;
            }
            
            const reader = new FileReader();
            reader.onload = function(event) {
              document.getElementById('photo-preview').src = event.target.result;
              document.getElementById('child-photo-error').style.display = 'none';
            };
            reader.readAsDataURL(file);
          }
        });

        // Handle form submission
        document.getElementById('updateForm').addEventListener('submit', function(e) {
          // Validate child photo
          const childPhoto = document.getElementById('child-photo');
          if (childPhoto.files.length === 0) {
            e.preventDefault();
            showInlineError('Please upload child photo', 'child-photo-error');
            return;
          }

          // Validate consent checkbox
          const consentCheckbox = document.getElementById('biometric-declaration');
          if (!consentCheckbox.checked) {
            e.preventDefault();
            Swal.fire({
              title: '<strong>Error</strong>',
              html: '<p>Please accept the self declaration.</p>',
              icon: 'error',
              confirmButtonText: '<i class="icon-base ti tabler-alert-circle"></i> OK',
              customClass: {
                popup: 'swal-wide',
                confirmButton: 'btn btn-danger'
              }
            });
            return;
          }

          // Validate at least 6 fingerprints
          const capturedFingers = document.querySelectorAll('input[name^="fingerprint"]').length;
          const missingFingers = document.getElementById('missing-fingers-input').value.split(',').filter(Boolean).length;
          
          if ((capturedFingers + missingFingers) < 6) {
            e.preventDefault();
            Swal.fire({
              title: '<strong>Error</strong>',
              html: '<p>At least 6 fingerprints must be captured or marked as missing.</p>',
              icon: 'error',
              confirmButtonText: '<i class="icon-base ti tabler-alert-circle"></i> OK',
              customClass: {
                popup: 'swal-wide',
                confirmButton: 'btn btn-danger'
              }
            });
          }
        });

        // Helper function to show inline errors
        function showInlineError(message, elementId) {
          const errorElement = document.getElementById(elementId);
          errorElement.textContent = message;
          errorElement.style.display = 'block';
        }

        // Handle missing fingers checkboxes
        document.querySelectorAll('.finger-missing').forEach(checkbox => {
          checkbox.addEventListener('change', function() {
            const fingerId = this.dataset.fingerId;
            const previewElement = document.querySelector(`.finger-preview[data-finger-id="${fingerId}"]`);
            
            if (this.checked) {
              previewElement.style.display = 'none';
              document.getElementById(`fingerprint-data-${fingerId}`).value = '';
            } else {
              previewElement.style.display = 'block';
            }
            
            updateMissingFingersInput();
          });
        });

        // Handle entire hand missing checkboxes
        document.getElementById('left-hand-missing').addEventListener('change', function() {
          const checkboxes = document.querySelectorAll('.finger-missing[data-finger-id="1"], .finger-missing[data-finger-id="2"], .finger-missing[data-finger-id="3"], .finger-missing[data-finger-id="4"], .finger-missing[data-finger-id="5"]');
          
          checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
            const fingerId = checkbox.dataset.fingerId;
            const previewElement = document.querySelector(`.finger-preview[data-finger-id="${fingerId}"]`);
            
            if (this.checked) {
              previewElement.style.display = 'none';
              document.getElementById(`fingerprint-data-${fingerId}`).value = '';
            } else {
              previewElement.style.display = 'block';
            }
          });
          
          updateMissingFingersInput();
        });

        document.getElementById('right-hand-missing').addEventListener('change', function() {
          const checkboxes = document.querySelectorAll('.finger-missing[data-finger-id="6"], .finger-missing[data-finger-id="7"], .finger-missing[data-finger-id="8"], .finger-missing[data-finger-id="9"], .finger-missing[data-finger-id="10"]');
          
          checkboxes.forEach(checkbox => {
            checkbox.checked = this.checked;
            const fingerId = checkbox.dataset.fingerId;
            const previewElement = document.querySelector(`.finger-preview[data-finger-id="${fingerId}"]`);
            
            if (this.checked) {
              previewElement.style.display = 'none';
              document.getElementById(`fingerprint-data-${fingerId}`).value = '';
            } else {
              previewElement.style.display = 'block';
            }
          });
          
          updateMissingFingersInput();
        });

        // Update the hidden input with missing fingers
        function updateMissingFingersInput() {
          const missingFingers = [];
          document.querySelectorAll('.finger-missing:checked').forEach(checkbox => {
            missingFingers.push(checkbox.dataset.fingerId);
          });
          document.getElementById('missing-fingers-input').value = missingFingers.join(',');
        }
      });
  </script>
  <?php endif; ?>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>