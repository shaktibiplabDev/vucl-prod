<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';

$stmt = $pdo->prepare('
  SELECT
    submitted_at,
    status
  FROM child_enroll
  WHERE user_id = ?');

$stmt->execute([$user_id]);
$child_enroll_applications = $stmt->fetchAll(PDO::FETCH_ASSOC);

$stmt = $pdo->prepare('
  SELECT
    submitted_at,
    status
  FROM address_update
  WHERE user_id =?');

$stmt->execute([$user_id]);
$address_update_applications = $stmt->fetchAll(PDO::FETCH_ASSOC);

$stmt = $pdo->prepare('
  SELECT
    submitted_at,
    status
  FROM dob_update
  WHERE user_id =?');

$stmt->execute([$user_id]);
$dob_update_applications = $stmt->fetchAll(PDO::FETCH_ASSOC);

$stmt = $pdo->prepare('
  SELECT
    submitted_at,
    status
  FROM name_update
  WHERE user_id =?');

$stmt->execute([$user_id]);
$name_update_applications = $stmt->fetchAll(PDO::FETCH_ASSOC);

$stmt = $pdo->prepare('
  SELECT
    submitted_at,
    status
  FROM mobile_email_updates
  WHERE user_id =?');

$stmt->execute([$user_id]);
$mobile_email_update_applications = $stmt->fetchAll(PDO::FETCH_ASSOC);


// Wallter Analytics
$stmt = $pdo->prepare('
  SELECT
    wallet,
    bonus_wallet,
    currency
  FROM users
  WHERE id =?');

$stmt->execute([$user_id]);
$wallet = $stmt->fetch(PDO::FETCH_ASSOC);
$bonus_wallet = $wallet['bonus_wallet'];
$main_wallet = $wallet['wallet'];
$currency = $wallet['currency'];

$added_wallet = $main_wallet + $bonus_wallet;
$main_wallet_percentage = 'NA';
$bonus_wallet_percentage = 'NA';

if (!empty($added_wallet) && is_numeric($added_wallet) && $added_wallet != 0) {
    $main_wallet_percentage = round(($main_wallet / $added_wallet) * 100, 2);
    $bonus_wallet_percentage = round(($bonus_wallet / $added_wallet) * 100, 2);
} else {
    $main_wallet_percentage = 0;
    $bonus_wallet_percentage = 0;
}

// Applications Analytics

$allApplications = array_merge($child_enroll_applications, $address_update_applications, $dob_update_applications, $name_update_applications, $mobile_email_update_applications);
$totalApplicationCount = count($child_enroll_applications) + count($address_update_applications) + count($dob_update_applications) + count($name_update_applications) + count($mobile_email_update_applications);

$pendingApplicationCount = array_reduce($allApplications, function($count, $application) {
    if ($application['status'] === 'pending') {
        $count++;
    }
    return $count;
}, 0);

$approvedApplicationCount = array_reduce($allApplications, function($count, $application) {
    if ($application['status'] === 'approved') {
        $count++;
    }
    return $count;
}, 0);

$rejectedApplicationCount = array_reduce($allApplications, function($count, $application) {
    if ($application['status'] === 'rejected') {
        $count++;
    }
    return $count;
}, 0);

$processingApplicationCount = array_reduce($allApplications, function($count, $application) {
    if ($application['status'] === 'processing') {
        $count++;
    }
    return $count;
}, 0);

$approvedPercentage = 'NA';
$pendingPercentage = 'NA';
$rejectedPercentage = 'NA';
$processingPercentage = 'NA';
if ($totalApplicationCount!== 0) {
  $approvedPercentage = ($approvedApplicationCount / $totalApplicationCount) * 100;
  $pendingPercentage = ($pendingApplicationCount / $totalApplicationCount) * 100;
  $rejectedPercentage = ($rejectedApplicationCount / $totalApplicationCount) * 100;
  $processingPercentage = ($processingApplicationCount / $totalApplicationCount) * 100;
}

// Daily Applications Analytics

$todaysChildEnrollments = array_reduce($child_enroll_applications, function($count, $application) {
    if (date('Y-m-d', strtotime($application['submitted_at'])) === date('Y-m-d')) {
        $count++;
    }
    return $count;
}, 0);

$todaysNameUpdates = array_reduce($name_update_applications, function($count, $application) {
    if (date('Y-m-d', strtotime($application['submitted_at'])) === date('Y-m-d')) {
        $count++;
    }
    return $count;
}, 0);

$todaysAddressUpdates = array_reduce($address_update_applications, function($count, $application) {
    if (date('Y-m-d', strtotime($application['submitted_at'])) === date('Y-m-d')) {
        $count++;
    }
    return $count;
}, 0);

$todaysDOBUpdates = array_reduce($dob_update_applications, function($count, $application) {
    if (date('Y-m-d', strtotime($application['submitted_at'])) === date('Y-m-d')) {
        $count++;
    }
    return $count;
}, 0);

$todaysMobileEmailUpdates = array_reduce($mobile_email_update_applications, function($count, $application) {
    if (date('Y-m-d', strtotime($application['submitted_at'])) === date('Y-m-d')) {
        $count++;
    }
    return $count;
}, 0);

$totalDailyApplications = $todaysChildEnrollments + $todaysNameUpdates + $todaysAddressUpdates + $todaysDOBUpdates + $todaysMobileEmailUpdates;

// Monthly Applications Analytics

$thisMonthChildEnrollments = array_reduce($child_enroll_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m')) {
        $count++;
    }
    return $count;
}, 0);

$thisMonthNameUpdates = array_reduce($name_update_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m')) {
        $count++;
    }
    return $count;
}, 0);

$thisMonthAddressUpdates = array_reduce($address_update_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m')) {
        $count++;
    }
    return $count;
}, 0);

$thisMonthDOBUpdates = array_reduce($dob_update_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m')) {
        $count++;
    }
    return $count;
}, 0);

$thisMonthMobileEmailUpdates = array_reduce($mobile_email_update_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m')) {
        $count++;
    }
    return $count;
}, 0);

// Last Month Applications Analytics
$lastMonthChildEnrollments = array_reduce($child_enroll_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m', strtotime('-1 month'))) {
        $count++;
    }
    return $count;
}, 0);

$lastMonthNameUpdates = array_reduce($name_update_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m', strtotime('-1 month'))) {
        $count++;
    }
    return $count;
}, 0);

$lastMonthAddressUpdates = array_reduce($address_update_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m', strtotime('-1 month'))) {
        $count++;
    }
    return $count;
}, 0);

$lastMonthDOBUpdates = array_reduce($dob_update_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m', strtotime('-1 month'))) {
        $count++;
    }
    return $count;
}, 0);

$lastMonthMobileEmailUpdates = array_reduce($mobile_email_update_applications, function($count, $application) {
    if (date('Y-m', strtotime($application['submitted_at'])) === date('Y-m', strtotime('-1 month'))) {
        $count++;
    }
    return $count;
}, 0);

$monthlyPercentageChangeChildEnrollments = 0;
if ($lastMonthChildEnrollments !== 0) {
  $monthlyPercentageChangeChildEnrollments = ($thisMonthChildEnrollments - $lastMonthChildEnrollments) / $lastMonthChildEnrollments * 100;
  $monthlyPercentageChangeChildEnrollments = round($monthlyPercentageChangeChildEnrollments, 2);
}

$monthlyPercentageChangeNameUpdates = 0;
if ($lastMonthNameUpdates!== 0) {
  $monthlyPercentageChangeNameUpdates = ($thisMonthNameUpdates - $lastMonthNameUpdates) / $lastMonthNameUpdates * 100;
  $monthlyPercentageChangeNameUpdates = round($monthlyPercentageChangeNameUpdates, 2);
}

$monthlyPercentageChangeAddressUpdates = 0;
if ($lastMonthAddressUpdates!== 0) {
  $monthlyPercentageChangeAddressUpdates = ($thisMonthAddressUpdates - $lastMonthAddressUpdates) / $lastMonthAddressUpdates * 100;
  $monthlyPercentageChangeAddressUpdates = round($monthlyPercentageChangeAddressUpdates, 2);
}

$monthlyPercentageChangeDOBUpdates = 0;
if ($lastMonthDOBUpdates!== 0) {
  $monthlyPercentageChangeDOBUpdates = ($thisMonthDOBUpdates - $lastMonthDOBUpdates) / $lastMonthDOBUpdates * 100;
  $monthlyPercentageChangeDOBUpdates = round($monthlyPercentageChangeDOBUpdates, 2);
}

$monthlyPercentageChangeMobileEmailUpdates = 0;
if ($lastMonthMobileEmailUpdates!== 0) {
  $monthlyPercentageChangeMobileEmailUpdates = ($thisMonthMobileEmailUpdates - $lastMonthMobileEmailUpdates) / $lastMonthMobileEmailUpdates * 100;
  $monthlyPercentageChangeMobileEmailUpdates = round($monthlyPercentageChangeMobileEmailUpdates, 2);
}


$totalMonthlyApplications = $thisMonthChildEnrollments + $thisMonthNameUpdates + $thisMonthAddressUpdates + $thisMonthDOBUpdates + $thisMonthMobileEmailUpdates;

// Yearly Applications Analytics

$thisYearChildEnrollments = array_reduce($child_enroll_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y')) {
        $count++;
    }
    return $count;
}, 0);

$thisYearNameUpdates = array_reduce($name_update_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y')) {
        $count++;
    }
    return $count;
}, 0);

$thisYearAddressUpdates = array_reduce($address_update_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y')) {
        $count++;
    }
    return $count;
}, 0);

$thisYearDOBUpdates = array_reduce($dob_update_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y')) {
        $count++;
    }
    return $count;
}, 0);

$thisYearMobileEmailUpdates = array_reduce($mobile_email_update_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y')) {
        $count++;
    }
    return $count;
}, 0);

$lastYearChildEnrollments = array_reduce($child_enroll_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y', strtotime('-1 year'))) {
        $count++;
    }
    return $count;
}, 0);

$lastYearNameUpdates = array_reduce($name_update_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y', strtotime('-1 year'))) {
        $count++;
    }
    return $count;
}, 0);

$lastYearAddressUpdates = array_reduce($address_update_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y', strtotime('-1 year'))) {
        $count++;
    }
    return $count;
}, 0);

$lastYearDOBUpdates = array_reduce($dob_update_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y', strtotime('-1 year'))) {
        $count++;
    }
    return $count;
}, 0);

$lastYearMobileEmailUpdates = array_reduce($mobile_email_update_applications, function($count, $application) {
    if (date('Y', strtotime($application['submitted_at'])) === date('Y', strtotime('-1 year'))) {
        $count++;
    }
    return $count;
}, 0);

$yearlyPercentageChangeChildEnrollments = 0;
if ($lastYearChildEnrollments!== 0) {
  $yearlyPercentageChangeChildEnrollments = ($thisYearChildEnrollments - $lastYearChildEnrollments) / $lastYearChildEnrollments * 100;
  $yearlyPercentageChangeChildEnrollments = round($yearlyPercentageChangeChildEnrollments, 2);
}

$yearlyPercentageChangeNameUpdates = 0;
if ($lastYearNameUpdates!== 0) {
  $yearlyPercentageChangeNameUpdates = ($thisYearNameUpdates - $lastYearNameUpdates) / $lastYearNameUpdates * 100;
  $yearlyPercentageChangeNameUpdates = round($yearlyPercentageChangeNameUpdates, 2);
}

$yearlyPercentageChangeAddressUpdates = 0;
if ($lastYearAddressUpdates!== 0) {
  $yearlyPercentageChangeAddressUpdates = ($thisYearAddressUpdates - $lastYearAddressUpdates) / $lastYearAddressUpdates * 100;
  $yearlyPercentageChangeAddressUpdates = round($yearlyPercentageChangeAddressUpdates, 2);
}

$yearlyPercentageChangeDOBUpdates = 0;
if ($lastYearDOBUpdates!== 0) {
  $yearlyPercentageChangeDOBUpdates = ($thisYearDOBUpdates - $lastYearDOBUpdates) / $lastYearDOBUpdates * 100;
  $yearlyPercentageChangeDOBUpdates = round($yearlyPercentageChangeDOBUpdates, 2);
}

$yearlyPercentageChangeMobileEmailUpdates = 0;
if ($lastYearMobileEmailUpdates!== 0) {
  $yearlyPercentageChangeMobileEmailUpdates = ($thisYearMobileEmailUpdates - $lastYearMobileEmailUpdates) / $lastYearMobileEmailUpdates * 100;
  $yearlyPercentageChangeMobileEmailUpdates = round($yearlyPercentageChangeMobileEmailUpdates, 2);
}

$totalYearlyApplications = $thisYearChildEnrollments + $thisYearNameUpdates + $thisYearAddressUpdates + $thisYearDOBUpdates + $thisYearMobileEmailUpdates;

?>
<!doctype html>

<html
  lang="en"
  class="layout-navbar-fixed layout-menu-fixed layout-compact"
  dir="ltr"
  data-skin="default"
  data-assets-path="../../assets/"
  data-template="vertical-menu-template"
  data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
         <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
           <?php include('includes/navbar.php'); ?>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="row g-6">
                <!-- Website Analytics -->
                <div class="col-xl-6 col">
                  <div
                    class="swiper-container swiper-container-horizontal swiper swiper-card-advance-bg"
                    id="swiper-with-pagination-cards">
                    <div class="swiper-wrapper">
                      <div class="swiper-slide">
                        <div class="row">
                          <div class="col-12">
                            <h5 class="text-white mb-0">Application Analytics</h5>
                            <small>Total <?= $totalApplicationCount ?> Applications</small>
                          </div>
                          <div class="row">
                            <div class="col-lg-7 col-md-9 col-12 order-2 order-md-1 pt-md-9">
                              <h6 class="text-white mt-0 mt-md-3 mb-4">Data</h6>
                              <div class="row">
                                <div class="col-6">
                                  <ul class="list-unstyled mb-0">
                                    <li class="d-flex mb-4 align-items-center">
                                      <p class="mb-0 fw-medium me-2 website-analytics-text-bg"><?= $processingApplicationCount ?></p>
                                      <p class="mb-0">Processing</p>
                                    </li>
                                    <li class="d-flex align-items-center">
                                      <p class="mb-0 fw-medium me-2 website-analytics-text-bg"><?= $pendingApplicationCount ?></p>
                                      <p class="mb-0">Pending</p>
                                    </li>
                                  </ul>
                                </div>
                              </div>
                            </div>
                            <div class="col-lg-5 col-md-3 col-12 order-1 order-md-2 my-4 my-md-0 text-center">
                              <img
                                src="../../assets/img/illustrations/card-website-analytics-1.png"
                                alt="Website Analytics"
                                height="150"
                                class="card-website-analytics-img" />
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="swiper-pagination"></div>
                  </div>
                </div>
                <!--/ Website Analytics -->

                <!-- Wallet Overview -->
                <div class="col-xl-6 col-sm-6">
                  <div class="card h-100">
                    <div class="card-header">
                      <div class="d-flex justify-content-between">
                        <p class="mb-0 text-body">Wallet Overview</p>
                      </div>
                      <h4 class="card-title mb-1"><?= $currency . $added_wallet ?></h4>
                    </div>
                    <div class="card-body">
                      <div class="row">
                        <div class="col-4">
                          <div class="d-flex gap-2 align-items-center mb-2">
                            <span class="badge bg-label-info p-1 rounded"
                              ><i class="icon-base ti tabler-shopping-cart icon-sm"></i
                            ></span>
                            <p class="mb-0">Main</p>
                          </div>
                          <h5 class="mb-0 pt-1"><?= $currency . $main_wallet ?></h5>
                          <small class="text-body-secondary"><?= $main_wallet_percentage?>%</small>
                        </div>
                        <div class="col-4">
                          <div class="divider divider-vertical">
                            <div class="divider-text">
                              <span class="badge-divider-bg bg-label-secondary">VS</span>
                            </div>
                          </div>
                        </div>
                        <div class="col-4 text-end">
                          <div class="d-flex gap-2 justify-content-end align-items-center mb-2">
                            <p class="mb-0">Bonus</p>
                            <span class="badge bg-label-primary p-1 rounded"
                              ><i class="icon-base ti tabler-link icon-sm"></i
                            ></span>
                          </div>
                          <h5 class="mb-0 pt-1"><?= $currency . $bonus_wallet ?></h5>
                          <small class="text-body-secondary"><?= $bonus_wallet_percentage ?>%</small>
                        </div>
                      </div>
                      <div class="d-flex align-items-center mt-6">
                        <div class="progress w-100" style="height: 10px">
                          <div
                            class="progress-bar bg-info"
                            style="width: <?= $main_wallet_percentage ?>%"
                            role="progressbar"
                            aria-valuenow="70"
                            aria-valuemin="0"
                            aria-valuemax="100"></div>
                          <div
                            class="progress-bar bg-primary"
                            role="progressbar"
                            style="width: <?= $bonus_wallet_percentage ?>%"
                            aria-valuenow="30"
                            aria-valuemin="0"
                            aria-valuemax="100"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <!--/ Wallet Overview -->

                <!-- Daily Applications -->
                <div class="col-xxl-4 col-md-6">
                  <div class="card h-100">
                    <div class="card-header d-flex justify-content-between">
                      <div class="card-title mb-0">
                        <h5 class="mb-1">Daily Applications</h5>
                        <p class="card-subtitle">Total: <?= $totalDailyApplications ?></p>
                      </div>
                      <div class="dropdown">
                        <button
                          class="btn btn-text-secondary rounded-pill text-body-secondary border-0 p-2 me-n1"
                          type="button"
                          id="MonthlyCampaign"
                          data-bs-toggle="dropdown"
                          aria-haspopup="true"
                          aria-expanded="false">
                          <i class="icon-base ti tabler-dots-vertical icon-md text-body-secondary"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="MonthlyCampaign">
                          <a class="dropdown-item" href="/admin/panel/index.php">Refresh</a>
                        </div>
                      </div>
                    </div>
                    <div class="card-body">
                      <ul class="p-0 m-0">
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-success rounded p-1_5">
                            <i class="icon-base ti tabler-baby-carriage"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">Child Enrollments</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $todaysChildEnrollments ?></p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-info rounded p-1_5">
                            <i class="icon-base ti tabler-device-mobile"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">MOB/Email Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $todaysMobileEmailUpdates ?></p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-warning rounded p-1_5">
                            <i class="icon-base ti tabler-calendar-event"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">D.O.B Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $todaysDOBUpdates ?></p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-primary rounded p-1_5">
                            <i class="icon-base ti tabler-user"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">Name Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $todaysNameUpdates ?></p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-secondary rounded p-1_5">
                            <i class="icon-base ti tabler-home"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">Address Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $todaysAddressUpdates ?></p>
                            </div>
                          </div>
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
                <!--/ Daily Applications -->

                <!-- Monthly Applications -->
                <div class="col-xxl-4 col-md-6">
                  <div class="card h-100">
                    <div class="card-header d-flex justify-content-between">
                      <div class="card-title mb-0">
                        <h5 class="mb-1">Monthly Applications</h5>
                        <p class="card-subtitle">Total: <?= $totalMonthlyApplications ?></p>
                      </div>
                      <div class="dropdown">
                        <button
                          class="btn btn-text-secondary rounded-pill text-body-secondary border-0 p-2 me-n1"
                          type="button"
                          id="MonthlyCampaign"
                          data-bs-toggle="dropdown"
                          aria-haspopup="true"
                          aria-expanded="false">
                          <i class="icon-base ti tabler-dots-vertical icon-md text-body-secondary"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="MonthlyCampaign">
                          <a class="dropdown-item" href="/admin/panel/index.php">Refresh</a>
                        </div>
                      </div>
                    </div>
                    <div class="card-body">
                      <ul class="p-0 m-0">
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-success rounded p-1_5">
                            <i class="icon-base ti tabler-baby-carriage"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">Child Enrollments</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisMonthChildEnrollments ?></p>
                              <p class="ms-4 <?= $monthlyPercentageChangeChildEnrollments >= 0 ? 'text-success' : 'text-danger' ?> mb-0"><?= $monthlyPercentageChangeChildEnrollments ?>%</p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-info rounded p-1_5">
                            <i class="icon-base ti tabler-device-mobile"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">MOB/Email Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisMonthMobileEmailUpdates?></p>
                              <p class="ms-4 <?= $monthlyPercentageChangeMobileEmailUpdates >= 0 ? 'text-success' : 'text-danger' ?> mb-0"><?= $monthlyPercentageChangeMobileEmailUpdates ?>%</p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-warning rounded p-1_5">
                            <i class="icon-base ti tabler-calendar-event"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">D.O.B Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisMonthDOBUpdates ?></p>
                              <p class="ms-4 <?= $monthlyPercentageChangeDOBUpdates >= 0 ? 'text-success' : 'text-danger' ?> mb-0"><?= $monthlyPercentageChangeDOBUpdates ?>%</p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-primary rounded p-1_5">
                            <i class="icon-base ti tabler-user"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">Name Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisMonthNameUpdates ?></p>
                              <p class="ms-4 <?= $monthlyPercentageChangeNameUpdates >= 0 ? 'text-success' : 'text-danger' ?> mb-0"><?= $monthlyPercentageChangeNameUpdates ?>%</p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-secondary rounded p-1_5">
                            <i class="icon-base ti tabler-home"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">Address Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisMonthAddressUpdates ?></p>
                              <p class="ms-4 <?= $monthlyPercentageChangeAddressUpdates >= 0 ? 'text-success' : 'text-danger' ?> mb-0"><?= $monthlyPercentageChangeAddressUpdates ?>%</p>
                            </div>
                          </div>
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
                <!--/ Monthly Applications-->

                <!-- Yearly Applications -->
                <div class="col-xxl-4 col-md-6">
                  <div class="card h-100">
                    <div class="card-header d-flex justify-content-between">
                      <div class="card-title mb-0">
                        <h5 class="mb-1">Yearly Applications</h5>
                        <p class="card-subtitle">Total: <?= $totalYearlyApplications ?></p>
                      </div>
                      <div class="dropdown">
                        <button
                          class="btn btn-text-secondary rounded-pill text-body-secondary border-0 p-2 me-n1"
                          type="button"
                          id="MonthlyCampaign"
                          data-bs-toggle="dropdown"
                          aria-haspopup="true"
                          aria-expanded="false">
                          <i class="icon-base ti tabler-dots-vertical icon-md text-body-secondary"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="MonthlyCampaign">
                          <a class="dropdown-item" href="/admin/panel/index.php">Refresh</a>
                        </div>
                      </div>
                    </div>
                    <div class="card-body">
                      <ul class="p-0 m-0">
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-success rounded p-1_5">
                            <i class="icon-base ti tabler-baby-carriage"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">Child Enrollments</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisYearChildEnrollments ?></p>
                              <p class="ms-4 <?= $yearlyPercentageChangeChildEnrollments >= 0 ? 'text-success' : 'text-danger' ?> mb-0"><?= $yearlyPercentageChangeChildEnrollments ?>%</p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-info rounded p-1_5">
                            <i class="icon-base ti tabler-device-mobile"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">MOB/Email Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisYearMobileEmailUpdates ?></p>
                              <p class="ms-4 <?= $yearlyPercentageChangeMobileEmailUpdates >= 0 ? 'text-success' : 'text-danger' ?> mb-0"><?= $yearlyPercentageChangeMobileEmailUpdates ?>%</p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-warning rounded p-1_5">
                            <i class="icon-base ti tabler-calendar-event"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">D.O.B Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisYearDOBUpdates ?></p>
                              <p class="ms-4 <?= $yearlyPercentageChangeAddressUpdates >= 0 ? 'text-success' : 'text-danger' ?> mb-0"><?= $yearlyPercentageChangeAddressUpdates ?>%</p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-primary rounded p-1_5">
                            <i class="icon-base ti tabler-user"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">Name Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisYearNameUpdates ?></p>
                              <p class="ms-4 <?= $yearlyPercentageChangeNameUpdates >= 0 ? 'text-success' : 'text-danger' ?> mb-0"><?= $yearlyPercentageChangeNameUpdates ?>%</p>
                            </div>
                          </div>
                        </li>
                        <li class="mb-6 d-flex justify-content-between align-items-center">
                          <div class="badge bg-label-secondary rounded p-1_5">
                            <i class="icon-base ti tabler-home"></i>
                          </div>
                          <div class="d-flex justify-content-between w-100 flex-wrap">
                            <h6 class="mb-0 ms-4">Address Updates</h6>
                            <div class="d-flex">
                              <p class="mb-0"><?= $thisYearAddressUpdates ?></p>
                              <p class="ms-4 <?= $yearlyPercentageChangeAddressUpdates >= 0 ? 'text-success' : 'text-danger'?> mb-0"><?= $yearlyPercentageChangeAddressUpdates?>%</p>
                            </div>
                          </div>
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
                <!--/ Yearly Applications-->
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
             <?php include('includes/footer.php'); ?>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>

      <!-- Drag Target Area To SlideIn Menu On Small Screens -->
      <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->
     <?php include('includes/script.php'); ?>
  </body>
</html>
');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>