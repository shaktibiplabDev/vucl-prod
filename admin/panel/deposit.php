<?php
$code = base64_decode('PD9waHAKc2Vzc2lvbl9zdGFydCgpOwpyZXF1aXJlIF9fRElSX18gLiAnL3NlY3VyaXR5L2F1dGgucGhwJzsKcmVxdWlyZV9vbmNlKF9fRElSX18gLiAnLy4uLy4uL2NvbmZpZy9kYXRhYmFzZS5waHAnKTsKCi8vIEluaXRpYWxpemUgdmFyaWFibGVzCiRwYXltZW50VXJsID0gbnVsbDsKJGVycm9yID0gbnVsbDsKJHNob3dPZmZsaW5lUGF5bWVudCA9IGZhbHNlOwokdHJhbnNhY3Rpb25JZCA9IG51bGw7CiRvbmxpbmVHYXRld2F5cyA9IFtdOwokb2ZmbGluZUdhdGV3YXlzID0gW107CiRkZWZhdWx0T25saW5lR2F0ZXdheSA9IG51bGw7CiRkZWZhdWx0T2ZmbGluZUdhdGV3YXkgPSBudWxsOwokcGVuZGluZ1RyYW5zYWN0aW9ucyA9IFtdOwoKaWYgKGlzc2V0KCRfR0VUWydyZXNldF9kZXBvc2l0J10pKSB7CiAgdW5zZXQoJF9TRVNTSU9OWydkZXBvc2l0X2RhdGEnXSk7CiAgZXhpdDsgLy8gSnVzdCBleGl0IGFmdGVyIGNsZWFyaW5nIHNlc3Npb24sIHRoZSBKUyB3aWxsIHJlbG9hZAp9Cgp0cnkgewogIC8vIEdldCBhY3RpdmUgcGF5bWVudCBnYXRld2F5cwogICRzdG10ID0gJHBkby0+cHJlcGFyZSgiU0VMRUNUICogRlJPTSBwYXltZW50X3NldHRpbmdzIFdIRVJFIGFjdGl2ZSA9IDEiKTsKICAkc3RtdC0+ZXhlY3V0ZSgpOwogICRvbmxpbmVHYXRld2F5cyA9ICRzdG10LT5mZXRjaEFsbChQRE86OkZFVENIX0FTU09DKTsKCiAgLy8gR2V0IGFjdGl2ZSBVUEkgcGF5bWVudCBtZXRob2RzCiAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJTRUxFQ1QgKiBGUk9NIHVwaV9wYXltZW50cyBXSEVSRSBhY3RpdmUgPSAxIik7CiAgJHN0bXQtPmV4ZWN1dGUoKTsKICAkb2ZmbGluZUdhdGV3YXlzID0gJHN0bXQtPmZldGNoQWxsKFBETzo6RkVUQ0hfQVNTT0MpOwoKICAvLyBGaW5kIGRlZmF1bHQgZ2F0ZXdheXMKICBmb3JlYWNoICgkb25saW5lR2F0ZXdheXMgYXMgJGdhdGV3YXkpIHsKICAgIGlmICgkZ2F0ZXdheVsnaXNfcHJpbWFyeSddKSB7CiAgICAgICRkZWZhdWx0T25saW5lR2F0ZXdheSA9ICRnYXRld2F5OwogICAgICBicmVhazsKICAgIH0KICB9CiAgaWYgKCEkZGVmYXVsdE9ubGluZUdhdGV3YXkgJiYgY291bnQoJG9ubGluZUdhdGV3YXlzKSkgewogICAgJGRlZmF1bHRPbmxpbmVHYXRld2F5ID0gJG9ubGluZUdhdGV3YXlzWzBdOwogIH0KCiAgZm9yZWFjaCAoJG9mZmxpbmVHYXRld2F5cyBhcyAkZ2F0ZXdheSkgewogICAgaWYgKCRnYXRld2F5Wydpc19kZWZhdWx0J10pIHsKICAgICAgJGRlZmF1bHRPZmZsaW5lR2F0ZXdheSA9ICRnYXRld2F5OwogICAgICBicmVhazsKICAgIH0KICB9CiAgaWYgKCEkZGVmYXVsdE9mZmxpbmVHYXRld2F5ICYmIGNvdW50KCRvZmZsaW5lR2F0ZXdheXMpKSB7CiAgICAkZGVmYXVsdE9mZmxpbmVHYXRld2F5ID0gJG9mZmxpbmVHYXRld2F5c1swXTsKICB9CgogIC8vIEdldCBwZW5kaW5nIHRyYW5zYWN0aW9ucyBmb3IgdGhpcyB1c2VyCiAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJTRUxFQ1QgZC4qLCBvdC51cGlfaWQsIG90LnRyYW5zYWN0aW9uX2lkIEFTIHVwaV90cmFuc2FjdGlvbl9pZCAKICAgICAgICAgICAgICAgICAgICAgICAgICBGUk9NIGRlcG9zaXRzIGQgCiAgICAgICAgICAgICAgICAgICAgICAgICAgTEVGVCBKT0lOIG9mZmxpbmVfdHJhbnNhY3Rpb25zIG90IE9OIGQuaWQgPSBvdC5kZXBvc2l0X2lkCiAgICAgICAgICAgICAgICAgICAgICAgICAgV0hFUkUgZC51c2VyX2lkID0gPyBBTkQgZC5zdGF0dXMgPSAncGVuZGluZycKICAgICAgICAgICAgICAgICAgICAgICAgICBPUkRFUiBCWSBkLmNyZWF0ZWRfYXQgREVTQyIpOwogICRzdG10LT5leGVjdXRlKFskdXNlclsnaWQnXV0pOwogICRwZW5kaW5nVHJhbnNhY3Rpb25zID0gJHN0bXQtPmZldGNoQWxsKFBETzo6RkVUQ0hfQVNTT0MpOwoKICAvLyBIYW5kbGUgZm9ybSBzdWJtaXNzaW9uCiAgaWYgKCRfU0VSVkVSWydSRVFVRVNUX01FVEhPRCddID09PSAnUE9TVCcpIHsKICAgIGlmIChpc3NldCgkX1BPU1RbJ3N1Ym1pdF9kZXBvc2l0J10pKSB7CiAgICAgIC8vIEZpcnN0IHN0ZXAgLSB2YWxpZGF0ZSBhbmQgc2hvdyBwYXltZW50IG9wdGlvbnMKICAgICAgdHJ5IHsKICAgICAgICAvLyBWYWxpZGF0ZSByZXF1aXJlZCBmaWVsZHMKICAgICAgICAkcmVxdWlyZWQgPSBbJ2N1c3RvbWVyX21vYmlsZScsICdhbW91bnQnXTsKICAgICAgICBmb3JlYWNoICgkcmVxdWlyZWQgYXMgJGZpZWxkKSB7CiAgICAgICAgICBpZiAoZW1wdHkoJF9QT1NUWyRmaWVsZF0pKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oIk1pc3NpbmcgcmVxdWlyZWQgZmllbGQ6ICRmaWVsZCIpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgJGFtb3VudCA9IChmbG9hdCkgJF9QT1NUWydhbW91bnQnXTsKICAgICAgICAkbWluQW1vdW50ID0gJGRlZmF1bHRPbmxpbmVHYXRld2F5ID8gKGZsb2F0KSAkZGVmYXVsdE9ubGluZUdhdGV3YXlbJ21pbl9hbXQnXSA6IDEuMDA7CgogICAgICAgIGlmICgkYW1vdW50IDwgJG1pbkFtb3VudCkgewogICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigiTWluaW11bSBkZXBvc2l0IGFtb3VudCBpcyBSUyAiIC4gbnVtYmVyX2Zvcm1hdCgkbWluQW1vdW50LCAyKSk7CiAgICAgICAgfQoKICAgICAgICAvLyBWYWxpZGF0ZSBtb2JpbGUgbnVtYmVyCiAgICAgICAgaWYgKCFwcmVnX21hdGNoKCcvXlxkezEwLDE1fSQvJywgJF9QT1NUWydjdXN0b21lcl9tb2JpbGUnXSkpIHsKICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oIlBsZWFzZSBlbnRlciBhIHZhbGlkIDEwLTE1IGRpZ2l0IG1vYmlsZSBudW1iZXIiKTsKICAgICAgICB9CgogICAgICAgIC8vIFN0b3JlIGluIHNlc3Npb24gZm9yIG5leHQgc3RlcAogICAgICAgICRfU0VTU0lPTlsnZGVwb3NpdF9kYXRhJ10gPSBbCiAgICAgICAgICAnY3VzdG9tZXJfbW9iaWxlJyA9PiAkX1BPU1RbJ2N1c3RvbWVyX21vYmlsZSddLAogICAgICAgICAgJ2Ftb3VudCcgPT4gJGFtb3VudCwKICAgICAgICAgICdyZW1hcmsxJyA9PiAkX1BPU1RbJ3JlbWFyazEnXSA/PyAnJywKICAgICAgICAgICdyZW1hcmsyJyA9PiAnRnJvbSAnIC4gJF9TRVNTSU9OWyd1c2VybmFtZSddCiAgICAgICAgXTsKCiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHdlIHNob3VsZCBzaG93IHBheW1lbnQgb3B0aW9ucwogICAgICAgICRzaG93T2ZmbGluZVBheW1lbnQgPSAoY291bnQoJG9mZmxpbmVHYXRld2F5cykgPiAwKTsKICAgICAgICAkc2hvd09ubGluZVBheW1lbnQgPSAoY291bnQoJG9ubGluZUdhdGV3YXlzKSA+IDApOwoKICAgICAgICBpZiAoISRzaG93T2ZmbGluZVBheW1lbnQgJiYgISRzaG93T25saW5lUGF5bWVudCkgewogICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigiTm8gcGF5bWVudCBtZXRob2RzIGF2YWlsYWJsZSIpOwogICAgICAgIH0KCiAgICAgICAgLy8gUmVkaXJlY3QgdG8gcHJldmVudCBmb3JtIHJlc3VibWlzc2lvbgogICAgICAgIGhlYWRlcigiTG9jYXRpb246ICIgLiAkX1NFUlZFUlsnUkVRVUVTVF9VUkknXSk7CiAgICAgICAgZXhpdCgpOwogICAgICB9IGNhdGNoIChFeGNlcHRpb24gJGUpIHsKICAgICAgICAkZXJyb3IgPSAkZS0+Z2V0TWVzc2FnZSgpOwogICAgICAgIGVycm9yX2xvZygiRGVwb3NpdCBFcnJvcjogIiAuICRlLT5nZXRNZXNzYWdlKCkpOwogICAgICB9CiAgICB9IGVsc2VpZiAoaXNzZXQoJF9QT1NUWydwcm9jZXNzX29ubGluZV9wYXltZW50J10pKSB7CiAgICAgIC8vIFByb2Nlc3Mgb25saW5lIHBheW1lbnQKICAgICAgdHJ5IHsKICAgICAgICBpZiAoIWlzc2V0KCRfU0VTU0lPTlsnZGVwb3NpdF9kYXRhJ10pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCJTZXNzaW9uIGV4cGlyZWQuIFBsZWFzZSB0cnkgYWdhaW4uIik7CiAgICAgICAgfQoKICAgICAgICAkZGVwb3NpdERhdGEgPSAkX1NFU1NJT05bJ2RlcG9zaXRfZGF0YSddOwoKICAgICAgICAvLyBHZW5lcmF0ZSBvcmRlciBJRAogICAgICAgICRvcmRlcklkID0gJ0RFUC0nIC4gdGltZSgpIC4gJy0nIC4gYmluMmhleChyYW5kb21fYnl0ZXMoNCkpOwoKICAgICAgICAvLyBJbnNlcnQgZGVwb3NpdCByZWNvcmQgaW50byBkYXRhYmFzZQogICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiSU5TRVJUIElOVE8gZGVwb3NpdHMgKHVzZXJfaWQsIG9yZGVyX2lkLCBhbW91bnQsIHN0YXR1cywgcGF5bWVudF9tZXRob2QsIGNyZWF0ZWRfYXQsIHVwZGF0ZWRfYXQpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZBTFVFUyAoPywgPywgPywgJ3BlbmRpbmcnLCAnb25saW5lJywgTk9XKCksIE5PVygpKSIpOwogICAgICAgICRzdG10LT5leGVjdXRlKFskdXNlclsnaWQnXSwgJG9yZGVySWQsICRkZXBvc2l0RGF0YVsnYW1vdW50J11dKTsKCiAgICAgICAgJHBheW1lbnREYXRhID0gWwogICAgICAgICAgJ2N1c3RvbWVyX21vYmlsZScgPT4gJGRlcG9zaXREYXRhWydjdXN0b21lcl9tb2JpbGUnXSwKICAgICAgICAgICd1c2VyX3Rva2VuJyA9PiAkZGVmYXVsdE9ubGluZUdhdGV3YXlbJ3VzZXJfdG9rZW4nXSwKICAgICAgICAgICdhbW91bnQnID0+ICRkZXBvc2l0RGF0YVsnYW1vdW50J10sCiAgICAgICAgICAnb3JkZXJfaWQnID0+ICRvcmRlcklkLAogICAgICAgICAgJ3JlZGlyZWN0X3VybCcgPT4gKGlzc2V0KCRfU0VSVkVSWydIVFRQUyddKSAmJiAkX1NFUlZFUlsnSFRUUFMnXSA9PT0gJ29uJyA/ICJodHRwcyIgOiAiaHR0cCIpCiAgICAgICAgICAgIC4gIjovL3skX1NFUlZFUlsnSFRUUF9IT1NUJ119L2FkbWluL3BhbmVsL3BheW1lbnRzL2NvbXBsZXRlLnBocD9vcmRlcl9pZD0iIC4gdXJsZW5jb2RlKCRvcmRlcklkKQogICAgICAgICAgICAuICImdXNlcl9pZD0iIC4gdXJsZW5jb2RlKCR1c2VyWydpZCddKSwKICAgICAgICAgICdyZW1hcmsxJyA9PiAkZGVwb3NpdERhdGFbJ3JlbWFyazEnXSA/PyAndGVzdHJlbWFyaycsCiAgICAgICAgICAncmVtYXJrMicgPT4gJGRlcG9zaXREYXRhWydyZW1hcmsyJ10gPz8gJ0Zyb20gJyAuICRfU0VTU0lPTlsndXNlcm5hbWUnXQogICAgICAgIF07CgogICAgICAgIC8vIFNlbmQgdG8gcGF5bWVudCBnYXRld2F5CiAgICAgICAgJGNoID0gY3VybF9pbml0KCRkZWZhdWx0T25saW5lR2F0ZXdheVsnYXBpX3VybCddIC4gJy9hcGkvY3JlYXRlLW9yZGVyJyk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSLCB0cnVlKTsKICAgICAgICBjdXJsX3NldG9wdCgkY2gsIENVUkxPUFRfUE9TVCwgdHJ1ZSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX1BPU1RGSUVMRFMsIGh0dHBfYnVpbGRfcXVlcnkoJHBheW1lbnREYXRhKSk7CiAgICAgICAgY3VybF9zZXRvcHQoJGNoLCBDVVJMT1BUX0hUVFBIRUFERVIsIFsnQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uJ10pOwogICAgICAgIGN1cmxfc2V0b3B0KCRjaCwgQ1VSTE9QVF9USU1FT1VULCAzMCk7CgogICAgICAgICRyZXNwb25zZSA9IGN1cmxfZXhlYygkY2gpOwogICAgICAgICRodHRwQ29kZSA9IGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hUVFBfQ09ERSk7CiAgICAgICAgJGN1cmxFcnJvciA9IGN1cmxfZXJyb3IoJGNoKTsKICAgICAgICBjdXJsX2Nsb3NlKCRjaCk7CgogICAgICAgIGlmICgkY3VybEVycm9yKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCJQYXltZW50IGdhdGV3YXkgY29ubmVjdGlvbiBmYWlsZWQ6ICIgLiAkY3VybEVycm9yKTsKICAgICAgICB9CgogICAgICAgIGlmICgkaHR0cENvZGUgPT09IDIwMCB8fCAkaHR0cENvZGUgPT09IDIwMSkgewogICAgICAgICAgJHJlc3VsdCA9IGpzb25fZGVjb2RlKCRyZXNwb25zZSwgdHJ1ZSk7CgogICAgICAgICAgaWYgKCEkcmVzdWx0IHx8ICFpc3NldCgkcmVzdWx0WydzdGF0dXMnXSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigiSW52YWxpZCByZXNwb25zZSBmcm9tIHBheW1lbnQgZ2F0ZXdheSIpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICgkcmVzdWx0WydzdGF0dXMnXSAhPT0gdHJ1ZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCRyZXN1bHRbJ21lc3NhZ2UnXSA/PyAiUGF5bWVudCBwcm9jZXNzaW5nIGZhaWxlZCIpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICghaXNzZXQoJHJlc3VsdFsncmVzdWx0J11bJ3BheW1lbnRfdXJsJ10pKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oIlBheW1lbnQgVVJMIG1pc3NpbmcgZnJvbSByZXNwb25zZSIpOwogICAgICAgICAgfQoKICAgICAgICAgICRwYXltZW50VXJsID0gJHJlc3VsdFsncmVzdWx0J11bJ3BheW1lbnRfdXJsJ107CiAgICAgICAgICB1bnNldCgkX1NFU1NJT05bJ2RlcG9zaXRfZGF0YSddKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigiUGF5bWVudCBnYXRld2F5IHJldHVybmVkIEhUVFAgJGh0dHBDb2RlIik7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChFeGNlcHRpb24gJGUpIHsKICAgICAgICAkZXJyb3IgPSAkZS0+Z2V0TWVzc2FnZSgpOwogICAgICAgIGVycm9yX2xvZygiUGF5bWVudCBFcnJvcjogIiAuICRlLT5nZXRNZXNzYWdlKCkpOwogICAgICB9CiAgICB9IGVsc2VpZiAoaXNzZXQoJF9QT1NUWydwcm9jZXNzX29mZmxpbmVfcGF5bWVudCddKSkgewogICAgICAvLyBQcm9jZXNzIG9mZmxpbmUgcGF5bWVudAogICAgICB0cnkgewogICAgICAgIGlmICghaXNzZXQoJF9TRVNTSU9OWydkZXBvc2l0X2RhdGEnXSkpIHsKICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oIlNlc3Npb24gZXhwaXJlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4iKTsKICAgICAgICB9CgogICAgICAgIGlmIChlbXB0eSgkX1BPU1RbJ3RyYW5zYWN0aW9uX2lkJ10pKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCJUcmFuc2FjdGlvbiBJRCBpcyByZXF1aXJlZCIpOwogICAgICAgIH0KCiAgICAgICAgJGRlcG9zaXREYXRhID0gJF9TRVNTSU9OWydkZXBvc2l0X2RhdGEnXTsKCiAgICAgICAgLy8gR2VuZXJhdGUgb3JkZXIgSUQKICAgICAgICAkb3JkZXJJZCA9ICdERVAtJyAuIHRpbWUoKSAuICctJyAuIGJpbjJoZXgocmFuZG9tX2J5dGVzKDQpKTsKCiAgICAgICAgLy8gSW5zZXJ0IGRlcG9zaXQgcmVjb3JkIGludG8gZGF0YWJhc2UKICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIklOU0VSVCBJTlRPIGRlcG9zaXRzICh1c2VyX2lkLCBvcmRlcl9pZCwgYW1vdW50LCBzdGF0dXMsIHBheW1lbnRfbWV0aG9kLCB0cmFuc2FjdGlvbl9pZCwgY3JlYXRlZF9hdCwgdXBkYXRlZF9hdCkgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVkFMVUVTICg/LCA/LCA/LCAncGVuZGluZycsICdvZmZsaW5lJywgPywgTk9XKCksIE5PVygpKSIpOwogICAgICAgICRzdG10LT5leGVjdXRlKFsKICAgICAgICAgICR1c2VyWydpZCddLAogICAgICAgICAgJG9yZGVySWQsCiAgICAgICAgICAkZGVwb3NpdERhdGFbJ2Ftb3VudCddLAogICAgICAgICAgJF9QT1NUWyd0cmFuc2FjdGlvbl9pZCddCiAgICAgICAgXSk7CgogICAgICAgIC8vIEluc2VydCBpbnRvIG9mZmxpbmUgdHJhbnNhY3Rpb25zIHRhYmxlCiAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJJTlNFUlQgSU5UTyBvZmZsaW5lX3RyYW5zYWN0aW9ucyAoZGVwb3NpdF9pZCwgdXBpX2lkLCBhbW91bnQsIHRyYW5zYWN0aW9uX2lkLCBzdGF0dXMsIGNyZWF0ZWRfYXQpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZBTFVFUyAoPywgPywgPywgPywgJ3BlbmRpbmcnLCBOT1coKSkiKTsKICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbCiAgICAgICAgICAkcGRvLT5sYXN0SW5zZXJ0SWQoKSwKICAgICAgICAgICRkZWZhdWx0T2ZmbGluZUdhdGV3YXlbJ3VwaV9pZCddLAogICAgICAgICAgJGRlcG9zaXREYXRhWydhbW91bnQnXSwKICAgICAgICAgICRfUE9TVFsndHJhbnNhY3Rpb25faWQnXQogICAgICAgIF0pOwoKICAgICAgICAvLyBDbGVhciBzZXNzaW9uIGRhdGEKICAgICAgICB1bnNldCgkX1NFU1NJT05bJ2RlcG9zaXRfZGF0YSddKTsKCiAgICAgICAgLy8gUmVkaXJlY3QgdG8gcHJldmVudCBmb3JtIHJlc3VibWlzc2lvbgogICAgICAgIGhlYWRlcigiTG9jYXRpb246ICIgLiAkX1NFUlZFUlsnUkVRVUVTVF9VUkknXSk7CiAgICAgICAgZXhpdCgpOwogICAgICB9IGNhdGNoIChFeGNlcHRpb24gJGUpIHsKICAgICAgICAkZXJyb3IgPSAkZS0+Z2V0TWVzc2FnZSgpOwogICAgICAgIGVycm9yX2xvZygiT2ZmbGluZSBQYXltZW50IEVycm9yOiAiIC4gJGUtPmdldE1lc3NhZ2UoKSk7CiAgICAgIH0KICAgIH0KICB9Cn0gY2F0Y2ggKEV4Y2VwdGlvbiAkZSkgewogICRlcnJvciA9ICJTeXN0ZW0gZXJyb3I6ICIgLiAkZS0+Z2V0TWVzc2FnZSgpOwogIGVycm9yX2xvZygiU3lzdGVtIEVycm9yOiAiIC4gJGUtPmdldE1lc3NhZ2UoKSk7Cn0KPz4KCjwhZG9jdHlwZSBodG1sPgo8aHRtbAogIGxhbmc9ImVuIgogIGNsYXNzPSJsYXlvdXQtbmF2YmFyLWZpeGVkIGxheW91dC1tZW51LWZpeGVkIGxheW91dC1jb21wYWN0IgogIGRpcj0ibHRyIgogIGRhdGEtc2tpbj0iZGVmYXVsdCIKICBkYXRhLWFzc2V0cy1wYXRoPSIuLi8uLi9hc3NldHMvIgogIGRhdGEtdGVtcGxhdGU9InZlcnRpY2FsLW1lbnUtdGVtcGxhdGUiCiAgZGF0YS1icy10aGVtZT0ibGlnaHQiPgoKPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgPHRpdGxlPkRlcG9zaXQgRnVuZHM8L3RpdGxlPgogIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL2hlYWQucGhwJyk7ID8+CiAgPHN0eWxlPgogICAgLyogTW9kZXJuIFBheW1lbnQgTW9kYWwgU3R5bGVzICovCiAgICAucGF5bWVudC1tb2RhbC1vdmVybGF5IHsKICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICB0b3A6IDA7CiAgICAgIGxlZnQ6IDA7CiAgICAgIHJpZ2h0OiAwOwogICAgICBib3R0b206IDA7CiAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC42KTsKICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDRweCk7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICB6LWluZGV4OiA5OTk5OwogICAgICBvcGFjaXR5OiAwOwogICAgICB2aXNpYmlsaXR5OiBoaWRkZW47CiAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7CiAgICB9CgogICAgLnBheW1lbnQtbW9kYWwtb3ZlcmxheS5hY3RpdmUgewogICAgICBvcGFjaXR5OiAxOwogICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlOwogICAgfQoKICAgIC5wYXltZW50LW1vZGFsLWNvbnRhaW5lciB7CiAgICAgIGJhY2tncm91bmQ6IHdoaXRlOwogICAgICBib3JkZXItcmFkaXVzOiAxMnB4OwogICAgICB3aWR0aDogOTAlOwogICAgICBtYXgtd2lkdGg6IDQyMHB4OwogICAgICBib3gtc2hhZG93OiAwIDEwcHggMjVweCByZ2JhKDAsIDAsIDAsIDAuMik7CiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgyMHB4KTsKICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgZWFzZTsKICAgICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgIH0KCiAgICAucGF5bWVudC1tb2RhbC1vdmVybGF5LmFjdGl2ZSAucGF5bWVudC1tb2RhbC1jb250YWluZXIgewogICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7CiAgICB9CgogICAgLnBheW1lbnQtbW9kYWwtaGVhZGVyIHsKICAgICAgcGFkZGluZzogMTZweCAyMHB4OwogICAgICBiYWNrZ3JvdW5kOiAjNzM2N0YwOwogICAgICBjb2xvcjogd2hpdGU7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIH0KCiAgICAucGF5bWVudC1tb2RhbC10aXRsZSB7CiAgICAgIG1hcmdpbjogMDsKICAgICAgZm9udC1zaXplOiAxLjFyZW07CiAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7CiAgICB9CgogICAgLnBheW1lbnQtbW9kYWwtY2xvc2UgewogICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICBib3JkZXI6IG5vbmU7CiAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgZm9udC1zaXplOiAxLjVyZW07CiAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgbGluZS1oZWlnaHQ6IDE7CiAgICAgIHBhZGRpbmc6IDA7CiAgICB9CgogICAgLnBheW1lbnQtbW9kYWwtYm9keSB7CiAgICAgIHBhZGRpbmc6IDA7CiAgICB9CgogICAgLnBheW1lbnQtbW9kYWwtZnJhbWUgewogICAgICB3aWR0aDogMTAwJTsKICAgICAgaGVpZ2h0OiA1MDBweDsKICAgICAgYm9yZGVyOiBub25lOwogICAgfQoKICAgIC5wYXltZW50LW1vZGFsLWZvb3RlciB7CiAgICAgIHBhZGRpbmc6IDEycHggMTZweDsKICAgICAgYmFja2dyb3VuZDogI2Y4ZjhmODsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgfQoKICAgIC5wYXltZW50LW1vZGFsLWJ0biB7CiAgICAgIGJhY2tncm91bmQ6ICM2Yzc1N2Q7CiAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgYm9yZGVyOiBub25lOwogICAgICBwYWRkaW5nOiA4cHggMTZweDsKICAgICAgYm9yZGVyLXJhZGl1czogNnB4OwogICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgIGZvbnQtc2l6ZTogMC45cmVtOwogICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMnM7CiAgICB9CgogICAgLnBheW1lbnQtbW9kYWwtYnRuOmhvdmVyIHsKICAgICAgYmFja2dyb3VuZDogIzVhNjI2ODsKICAgIH0KCiAgICAucGF5bWVudC1hbGVydCB7CiAgICAgIHBhZGRpbmc6IDIwcHg7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIH0KCiAgICAvKiBQYXltZW50IG1ldGhvZCBzZWxlY3Rpb24gKi8KICAgIC5wYXltZW50LW1ldGhvZC1jb250YWluZXIgewogICAgICBkaXNwbGF5OiBmbGV4OwogICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICBnYXA6IDFyZW07CiAgICAgIHBhZGRpbmc6IDEuNXJlbTsKICAgIH0KCiAgICAucGF5bWVudC1tZXRob2QgewogICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogICAgICBib3JkZXItcmFkaXVzOiA4cHg7CiAgICAgIHBhZGRpbmc6IDFyZW07CiAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMnM7CiAgICB9CgogICAgLnBheW1lbnQtbWV0aG9kOmhvdmVyIHsKICAgICAgYm9yZGVyLWNvbG9yOiAjNzM2N0YwOwogICAgfQoKICAgIC5wYXltZW50LW1ldGhvZC5zZWxlY3RlZCB7CiAgICAgIGJvcmRlci1jb2xvcjogIzczNjdGMDsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTUsIDEwMywgMjQwLCAwLjA1KTsKICAgIH0KCiAgICAucGF5bWVudC1tZXRob2QgaW5wdXRbdHlwZT0icmFkaW8iXSB7CiAgICAgIG1hcmdpbi1yaWdodDogMC41cmVtOwogICAgfQoKICAgIC5wYXltZW50LW1ldGhvZC1kZXRhaWxzIHsKICAgICAgbWFyZ2luLXRvcDogMC41cmVtOwogICAgICBwYWRkaW5nLWxlZnQ6IDEuNXJlbTsKICAgICAgZGlzcGxheTogbm9uZTsKICAgIH0KCiAgICAucGF5bWVudC1tZXRob2Quc2VsZWN0ZWQgLnBheW1lbnQtbWV0aG9kLWRldGFpbHMgewogICAgICBkaXNwbGF5OiBibG9jazsKICAgIH0KCiAgICAudXBpLWRldGFpbHMtY29udGFpbmVyIHsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICBtYXJnaW46IDIwcHggMDsKICAgICAgcGFkZGluZzogMjBweDsKICAgICAgYmFja2dyb3VuZDogI2Y5ZjlmOTsKICAgICAgYm9yZGVyLXJhZGl1czogOHB4OwogICAgfQoKICAgIC51cGktcXItY29kZSB7CiAgICAgIG1heC13aWR0aDogMjAwcHg7CiAgICAgIG1hcmdpbjogMC41cmVtIGF1dG87CiAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogICAgICBwYWRkaW5nOiAxMHB4OwogICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICAgIH0KCiAgICAudXBpLWluZm8gewogICAgICBtYXJnaW46IDE1cHggMDsKICAgIH0KCiAgICAudXBpLWluZm8gaDQgewogICAgICBjb2xvcjogIzczNjdGMDsKICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDsKICAgIH0KCiAgICAvKiBBbmltYXRpb24gZm9yIGxvYWRpbmcgKi8KICAgIEBrZXlmcmFtZXMgc3BpbiB7CiAgICAgIDAlIHsKICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsKICAgICAgfQoKICAgICAgMTAwJSB7CiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsKICAgICAgfQogICAgfQoKICAgIC5wYXltZW50LWxvYWRpbmcgewogICAgICBkaXNwbGF5OiBmbGV4OwogICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgcGFkZGluZzogNDBweCAyMHB4OwogICAgfQoKICAgIC5wYXltZW50LXNwaW5uZXIgewogICAgICB3aWR0aDogNDBweDsKICAgICAgaGVpZ2h0OiA0MHB4OwogICAgICBib3JkZXI6IDRweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7CiAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgICAgYm9yZGVyLXRvcDogNHB4IHNvbGlkICM3MzY3RjA7CiAgICAgIGFuaW1hdGlvbjogc3BpbiAxcyBsaW5lYXIgaW5maW5pdGU7CiAgICAgIG1hcmdpbi1ib3R0b206IDE2cHg7CiAgICB9CgogICAgLyogRm9ybSBlbmhhbmNlbWVudHMgKi8KICAgIC5mb3JtLWNvbnRyb2w6Zm9jdXMgewogICAgICBib3JkZXItY29sb3I6ICM3MzY3RjA7CiAgICAgIGJveC1zaGFkb3c6IDAgMCAwIDAuMnJlbSByZ2JhKDExNSwgMTAzLCAyNDAsIDAuMjUpOwogICAgfQoKICAgIC8qIFRyYW5zYWN0aW9uIGhpc3Rvcnkgc3R5bGVzICovCiAgICAudHJhbnNhY3Rpb24tY2FyZCB7CiAgICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgIzczNjdGMDsKICAgICAgdHJhbnNpdGlvbjogYWxsIDAuM3M7CiAgICB9CgogICAgLnRyYW5zYWN0aW9uLWNhcmQ6aG92ZXIgewogICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTJweCk7CiAgICAgIGJveC1zaGFkb3c6IDAgNHB4IDE1cHggcmdiYSgwLCAwLCAwLCAwLjEpOwogICAgfQoKICAgIC50cmFuc2FjdGlvbi1zdGF0dXMtcGVuZGluZyB7CiAgICAgIGNvbG9yOiAjRkY5RjQzOwogICAgfQoKICAgIC50cmFuc2FjdGlvbi1zdGF0dXMtY29tcGxldGVkIHsKICAgICAgY29sb3I6ICMyOEM3NkY7CiAgICB9CgogICAgLnRyYW5zYWN0aW9uLXN0YXR1cy1mYWlsZWQgewogICAgICBjb2xvcjogI0VBNTQ1NTsKICAgIH0KICA8L3N0eWxlPgo8L2hlYWQ+Cgo8Ym9keT4KICA8IS0tIExheW91dCB3cmFwcGVyIC0tPgogIDxkaXYgY2xhc3M9ImxheW91dC13cmFwcGVyIGxheW91dC1jb250ZW50LW5hdmJhciI+CiAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtY29udGFpbmVyIj4KICAgICAgPCEtLSBNZW51IC0tPgogICAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9zaWRlYmFyLnBocCcpOyA/PgoKICAgICAgPGRpdiBjbGFzcz0ibWVudS1tb2JpbGUtdG9nZ2xlciBkLXhsLW5vbmUgcm91bmRlZC0xIj4KICAgICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0ibGF5b3V0LW1lbnUtdG9nZ2xlIG1lbnUtbGluayB0ZXh0LWxhcmdlIHRleHQtYmctc2Vjb25kYXJ5IHAtMiByb3VuZGVkLTEiPgogICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1tZW51IGljb24tYmFzZSI+PC9pPgogICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1jaGV2cm9uLXJpZ2h0IGljb24tYmFzZSI+PC9pPgogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CgogICAgICA8IS0tIExheW91dCBjb250YWluZXIgLS0+CiAgICAgIDxkaXYgY2xhc3M9ImxheW91dC1wYWdlIj4KICAgICAgICA8IS0tIE5hdmJhciAtLT4KICAgICAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9uYXZiYXIucGhwJyk7ID8+CgogICAgICAgIDwhLS0gQ29udGVudCB3cmFwcGVyIC0tPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtd3JhcHBlciI+CiAgICAgICAgICA8IS0tIENvbnRlbnQgLS0+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIteHhsIGZsZXgtZ3Jvdy0xIGNvbnRhaW5lci1wLXkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICAgICAgICA8IS0tIFdhbGxldCBCYWxhbmNlIENhcmRzIC0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG1iLTQiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBtYi0zIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIGJnLXByaW1hcnkgdGV4dC13aGl0ZSBoLTEwMCI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgZC1mbGV4IGZsZXgtY29sdW1uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjYXJkLXRpdGxlIj5NYWluIEJhbGFuY2U8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImNhcmQtdGV4dCBtYi1hdXRvIj48Pz0gaHRtbHNwZWNpYWxjaGFycygkdXNlclsnY3VycmVuY3knXSkgPz4gPD89IG51bWJlcl9mb3JtYXQoJHVzZXJbJ3dhbGxldCddLCAyKSA/PjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC13aGl0ZS01MCI+QXZhaWxhYmxlIGZvciB3aXRoZHJhd2FsPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBiZy1zdWNjZXNzIHRleHQtd2hpdGUgaC0xMDAiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IGQtZmxleCBmbGV4LWNvbHVtbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY2FyZC10aXRsZSI+Qm9udXMgQmFsYW5jZTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iY2FyZC10ZXh0IG1iLWF1dG8iPjw/PSBodG1sc3BlY2lhbGNoYXJzKCR1c2VyWydjdXJyZW5jeSddKSA/PiA8Pz0gbnVtYmVyX2Zvcm1hdCgkdXNlclsnYm9udXNfd2FsbGV0J10sIDIpID8+PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXdoaXRlLTUwIj5Gb3IgdHJhZGluZyBvbmx5PC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgbWItMyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBiZy1pbmZvIHRleHQtd2hpdGUgaC0xMDAiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5IGQtZmxleCBmbGV4LWNvbHVtbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iY2FyZC10aXRsZSI+VG90YWwgQmFsYW5jZTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iY2FyZC10ZXh0IG1iLWF1dG8iPjw/PSBodG1sc3BlY2lhbGNoYXJzKCR1c2VyWydjdXJyZW5jeSddKSA/PiA8Pz0gbnVtYmVyX2Zvcm1hdCgkdXNlclsnd2FsbGV0J10gKyAkdXNlclsnYm9udXNfd2FsbGV0J10sIDIpID8+PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXdoaXRlLTUwIj5Db21iaW5lZCBmdW5kczwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8P3BocCBpZiAoIWlzc2V0KCRfU0VTU0lPTlsnZGVwb3NpdF9kYXRhJ10pKTogPz4KICAgICAgICAgICAgICAgICAgPCEtLSBJbml0aWFsIERlcG9zaXQgRm9ybSAtLT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBtYi00Ij4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNhcmQtaGVhZGVyIGJnLXRyYW5zcGFyZW50Ij5NYWtlIGEgRGVwb3NpdDwvaDU+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGlkPSJkZXBvc2l0Rm9ybSIgbWV0aG9kPSJQT1NUIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3VibWl0X2RlcG9zaXQiIHZhbHVlPSIxIj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gTW9iaWxlIE51bWJlciAtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY3VzdG9tZXJfbW9iaWxlIiBjbGFzcz0iZm9ybS1sYWJlbCI+TW9iaWxlIE51bWJlcjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9ImN1c3RvbWVyX21vYmlsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9ImN1c3RvbWVyX21vYmlsZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbnRlciB5b3VyIG1vYmlsZSBudW1iZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybj0iWzAtOV17MTAsMTV9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IlBsZWFzZSBlbnRlciBhIHZhbGlkIDEwLTE1IGRpZ2l0IG1vYmlsZSBudW1iZXIiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBBbW91bnQgSW5wdXQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImFtb3VudCIgY2xhc3M9ImZvcm0tbGFiZWwiPkFtb3VudDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImlucHV0LWdyb3VwLXRleHQiPjw/PSBodG1sc3BlY2lhbGNoYXJzKCR1c2VyWydjdXJyZW5jeSddKSA/Pjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJudW1iZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSJhbW91bnQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9ImFtb3VudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIGFtb3VudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluPSIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwPSIwLjAxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZCAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tdGV4dCB0ZXh0LW11dGVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1pbmltdW0gZGVwb3NpdDogPD89IGh0bWxzcGVjaWFsY2hhcnMoJHVzZXJbJ2N1cnJlbmN5J10pIC4gbnVtYmVyX2Zvcm1hdCgkZGVmYXVsdE9ubGluZUdhdGV3YXkgPyAkZGVmYXVsdE9ubGluZUdhdGV3YXlbJ21pbl9hbXQnXSA6IDEuMDAsIDIpID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBSZW1hcmtzIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJyZW1hcmsxIiBjbGFzcz0iZm9ybS1sYWJlbCI+Tm90ZSAoT3B0aW9uYWwpPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZm9ybS1jb250cm9sIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9InJlbWFyazEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJyZW1hcmsxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9IkVudGVyIGEgbm90ZSBmb3IgdGhpcyBkZXBvc2l0IiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InJlbWFyazIiIHZhbHVlPSJGcm9tIDw/PSBodG1sc3BlY2lhbGNoYXJzKCR1c2VyWyd1c2VybmFtZSddKSA/PiI+CgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFN1Ym1pdCBCdXR0b24gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IHctMTAwIHB5LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvY2VlZCB0byBQYXltZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDw/cGhwIGVsc2U6ID8+CiAgICAgICAgICAgICAgICAgIDwhLS0gUGF5bWVudCBNZXRob2QgU2VsZWN0aW9uIC0tPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1zdGFydCBweS01Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIiBzdHlsZT0ibWF4LXdpZHRoOiA1MDBweDsgd2lkdGg6IDEwMCU7IG1hcmdpbjogNDBweCAwOyI+CiAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNhcmQtaGVhZGVyIGJnLXRyYW5zcGFyZW50IHRleHQtY2VudGVyIj5TZWxlY3QgUGF5bWVudCBNZXRob2Q8L2g1PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGF5bWVudC1tZXRob2QtY29udGFpbmVyIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKGNvdW50KCRvbmxpbmVHYXRld2F5cykgPiAwKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCIgaWQ9Im9ubGluZVBheW1lbnRGb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGF5bWVudC1tZXRob2QgPD89IGNvdW50KCRvZmZsaW5lR2F0ZXdheXMpID09IDAgPyAnc2VsZWN0ZWQnIDogJycgPz4iIG9uY2xpY2s9InNlbGVjdFBheW1lbnQodGhpcykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0icmFkaW8iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJwYXltZW50X21ldGhvZCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPSJvbmxpbmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Pz0gY291bnQoJG9mZmxpbmVHYXRld2F5cykgPT0gMCA/ICdjaGVja2VkJyA6ICcnID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZC1ub25lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPk9ubGluZSBQYXltZW50PC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGF5bWVudC1tZXRob2QtZGV0YWlscyBtdC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlBheSBpbnN0YW50bHkgdXNpbmcgb3VyIHNlY3VyZSBwYXltZW50IGdhdGV3YXk8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgbmFtZT0icHJvY2Vzc19vbmxpbmVfcGF5bWVudCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSB3LTEwMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBheSBOb3cgKDw/PSBodG1sc3BlY2lhbGNoYXJzKCR1c2VyWydjdXJyZW5jeSddKSA/PiA8Pz0gbnVtYmVyX2Zvcm1hdCgkX1NFU1NJT05bJ2RlcG9zaXRfZGF0YSddWydhbW91bnQnXSwgMikgPz4pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CgogICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGlmIChjb3VudCgkb2ZmbGluZUdhdGV3YXlzKSA+IDApOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJQT1NUIiBpZD0ib2ZmbGluZVBheW1lbnRGb3JtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGF5bWVudC1tZXRob2QgPD89IGNvdW50KCRvbmxpbmVHYXRld2F5cykgPT0gMCA/ICdzZWxlY3RlZCcgOiAnJyA/PiIgb25jbGljaz0ic2VsZWN0UGF5bWVudCh0aGlzKSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSJyYWRpbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9InBheW1lbnRfbWV0aG9kIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9Im9mZmxpbmUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Pz0gY291bnQoJG9ubGluZUdhdGV3YXlzKSA9PSAwID8gJ2NoZWNrZWQnIDogJycgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJkLW5vbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+VVBJIC8gQmFuayBUcmFuc2Zlcjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBheW1lbnQtbWV0aG9kLWRldGFpbHMgbXQtMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ1cGktaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5TZW5kIDw/PSBodG1sc3BlY2lhbGNoYXJzKCR1c2VyWydjdXJyZW5jeSddKSA/PiA8Pz0gbnVtYmVyX2Zvcm1hdCgkX1NFU1NJT05bJ2RlcG9zaXRfZGF0YSddWydhbW91bnQnXSwgMikgPz48L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD50byB0aGUgZm9sbG93aW5nIFVQSSBJRDo8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0idGV4dC1wcmltYXJ5Ij48Pz0gaHRtbHNwZWNpYWxjaGFycygkZGVmYXVsdE9mZmxpbmVHYXRld2F5Wyd1cGlfaWQnXSkgPz48L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCFlbXB0eSgkZGVmYXVsdE9mZmxpbmVHYXRld2F5Wydxcl9jb2RlX2ltYWdlJ10pKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgbXktMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+T3Igc2NhbiB0aGlzIFFSIGNvZGU6PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZGVmYXVsdE9mZmxpbmVHYXRld2F5Wydxcl9jb2RlX2ltYWdlJ10pID8+IiBhbHQ9IlVQSSBRUiBDb2RlIiBjbGFzcz0idXBpLXFyLWNvZGUiIHN0eWxlPSJtYXgtd2lkdGg6MjAwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idHJhbnNhY3Rpb25faWQiIGNsYXNzPSJmb3JtLWxhYmVsIj5UcmFuc2FjdGlvbiBJRCAvIFVUUiBOdW1iZXI8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InRyYW5zYWN0aW9uX2lkIiBuYW1lPSJ0cmFuc2FjdGlvbl9pZCIgcGxhY2Vob2xkZXI9IkVudGVyIHJlZmVyZW5jZSBudW1iZXIiIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIG5hbWU9InByb2Nlc3Nfb2ZmbGluZV9wYXltZW50IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IHctMTAwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VibWl0IFBheW1lbnQgRGV0YWlscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgoKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC00IHRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IiBvbmNsaWNrPSJyZXNldERlcG9zaXRGb3JtKCkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FuY2VsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CgogICAgICAgICAgICAgICAgPCEtLSBQZW5kaW5nIFRyYW5zYWN0aW9ucyAtLT4KICAgICAgICAgICAgICAgIDw/cGhwIGlmICghZW1wdHkoJHBlbmRpbmdUcmFuc2FjdGlvbnMpKTogPz4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBtYi00Ij4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNhcmQtaGVhZGVyIGJnLXRyYW5zcGFyZW50Ij5QZW5kaW5nIFRyYW5zYWN0aW9uczwvaDU+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLXJlc3BvbnNpdmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWhvdmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5PcmRlciBJRDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5BbW91bnQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UGF5bWVudCBNZXRob2Q8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VHJhbnNhY3Rpb24gSUQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+U3RhdHVzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkRhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGZvcmVhY2ggKCRwZW5kaW5nVHJhbnNhY3Rpb25zIGFzICR0cmFuc2FjdGlvbik6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0idHJhbnNhY3Rpb24tY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSBodG1sc3BlY2lhbGNoYXJzKCR0cmFuc2FjdGlvblsnb3JkZXJfaWQnXSkgPz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gaHRtbHNwZWNpYWxjaGFycygkdXNlclsnY3VycmVuY3knXSkgPz4gPD89IG51bWJlcl9mb3JtYXQoJHRyYW5zYWN0aW9uWydhbW91bnQnXSwgMikgPz48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gdWNmaXJzdChodG1sc3BlY2lhbGNoYXJzKCR0cmFuc2FjdGlvblsncGF5bWVudF9tZXRob2QnXSkpID8+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Pz0gIWVtcHR5KCR0cmFuc2FjdGlvblsndHJhbnNhY3Rpb25faWQnXSkgPyBodG1sc3BlY2lhbGNoYXJzKCR0cmFuc2FjdGlvblsndHJhbnNhY3Rpb25faWQnXSkgOiAoIWVtcHR5KCR0cmFuc2FjdGlvblsndXBpX3RyYW5zYWN0aW9uX2lkJ10pID8gaHRtbHNwZWNpYWxjaGFycygkdHJhbnNhY3Rpb25bJ3VwaV90cmFuc2FjdGlvbl9pZCddKSA6ICdOL0EnKSA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ0cmFuc2FjdGlvbi1zdGF0dXMtcGVuZGluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iYmFkZ2UgYmctbGFiZWwtd2FybmluZyI+UGVuZGluZzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gZGF0ZSgnZCBNIFkgaDppIEEnLCBzdHJ0b3RpbWUoJHRyYW5zYWN0aW9uWydjcmVhdGVkX2F0J10pKSA/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRmb3JlYWNoOyA/PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8IS0tIEZvb3RlciAtLT4KICAgICAgICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL2Zvb3Rlci5waHAnKTsgPz4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8IS0tIE92ZXJsYXkgLS0+CiAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtb3ZlcmxheSBsYXlvdXQtbWVudS10b2dnbGUiPjwvZGl2PgogIDwvZGl2PgoKICA8IS0tIFBheW1lbnQgTW9kYWwgLS0+CiAgPGRpdiBpZD0icGF5bWVudE1vZGFsIiBjbGFzcz0icGF5bWVudC1tb2RhbC1vdmVybGF5Ij4KICAgIDxkaXYgY2xhc3M9InBheW1lbnQtbW9kYWwtY29udGFpbmVyIj4KICAgICAgPGRpdiBjbGFzcz0icGF5bWVudC1tb2RhbC1oZWFkZXIiPgogICAgICAgIDxoMyBjbGFzcz0icGF5bWVudC1tb2RhbC10aXRsZSI+Q29tcGxldGUgUGF5bWVudDwvaDM+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0icGF5bWVudC1tb2RhbC1jbG9zZSI+JnRpbWVzOzwvYnV0dG9uPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0icGF5bWVudC1tb2RhbC1ib2R5Ij4KICAgICAgICA8P3BocCBpZiAoJHBheW1lbnRVcmwpOiA/PgogICAgICAgICAgPGlmcmFtZSBjbGFzcz0icGF5bWVudC1tb2RhbC1mcmFtZSIgc3JjPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkcGF5bWVudFVybCkgPz4iCiAgICAgICAgICAgIHNhbmRib3g9ImFsbG93LWZvcm1zIGFsbG93LXNjcmlwdHMgYWxsb3ctc2FtZS1vcmlnaW4iPjwvaWZyYW1lPgogICAgICAgIDw/cGhwIGVsc2U6ID8+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJwYXltZW50LWFsZXJ0IGFsZXJ0IGFsZXJ0LWRhbmdlciI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJ0aSB0aS1hbGVydC1jaXJjbGUgbWUtMiI+PC9pPiBQYXltZW50IFVSTCBub3QgYXZhaWxhYmxlCiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9InBheW1lbnQtbW9kYWwtZm9vdGVyIj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJwYXltZW50LW1vZGFsLWJ0biBjYW5jZWwtcGF5bWVudCI+CiAgICAgICAgICBDbG9zZQogICAgICAgIDwvYnV0dG9uPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgoKICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9zY3JpcHQucGhwJyk7ID8+CiAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vc3dlZXRhbGVydDJAMTEiPjwvc2NyaXB0PgoKICA8c2NyaXB0PgogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCkgewogICAgICAvLyBQYXltZW50IG1vZGFsIGVsZW1lbnRzCiAgICAgIGNvbnN0IHBheW1lbnRNb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYXltZW50TW9kYWwnKTsKICAgICAgY29uc3QgcGF5bWVudEZyYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBheW1lbnQtbW9kYWwtZnJhbWUnKTsKCiAgICAgIC8vIFNob3cvaGlkZSBtb2RhbCBmdW5jdGlvbnMgd2l0aCBhbmltYXRpb25zCiAgICAgIGZ1bmN0aW9uIHNob3dQYXltZW50TW9kYWwoKSB7CiAgICAgICAgcGF5bWVudE1vZGFsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpOwogICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJzsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gY2xvc2VQYXltZW50TW9kYWwoKSB7CiAgICAgICAgcGF5bWVudE1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpOwogICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnJzsKICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVsb2FkcyBwYWdlIHdpdGhvdXQgZm9ybSBkYXRhCiAgICAgIH0KCiAgICAgIC8vIFNldCB1cCBtb2RhbCBldmVudCBsaXN0ZW5lcnMKICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBheW1lbnQtbW9kYWwtY2xvc2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlUGF5bWVudE1vZGFsKTsKICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbmNlbC1wYXltZW50JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZVBheW1lbnRNb2RhbCk7CiAgICAgIHBheW1lbnRNb2RhbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICBpZiAoZS50YXJnZXQgPT09IHBheW1lbnRNb2RhbCkgY2xvc2VQYXltZW50TW9kYWwoKTsKICAgICAgfSk7CgogICAgICAvLyBTaG93IG1vZGFsIGlmIHBheW1lbnQgVVJMIGV4aXN0cwogICAgICA8P3BocCBpZiAoJHBheW1lbnRVcmwpOiA/PgogICAgICAgIHNob3dQYXltZW50TW9kYWwoKTsKICAgICAgPD9waHAgZW5kaWY7ID8+CgogICAgICAvLyBTaG93IHN1Y2Nlc3MgbWVzc2FnZSBpZiBvZmZsaW5lIHBheW1lbnQgd2FzIGp1c3Qgc3VibWl0dGVkCiAgICAgIDw/cGhwIGlmIChpc3NldCgkX0dFVFsnb2ZmbGluZV9zdWNjZXNzJ10pICYmICRfR0VUWydvZmZsaW5lX3N1Y2Nlc3MnXSA9PSAnMScpOiA/PgogICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICB0aXRsZTogJ1BheW1lbnQgU3VibWl0dGVkJywKICAgICAgICAgIHRleHQ6ICdZb3VyIHBheW1lbnQgZGV0YWlscyBoYXZlIGJlZW4gc3VibWl0dGVkLiBXZSB3aWxsIHZlcmlmeSBhbmQgdXBkYXRlIHlvdXIgYmFsYW5jZSBzaG9ydGx5LicsCiAgICAgICAgICBpY29uOiAnc3VjY2VzcycsCiAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICcjNzM2N0YwJwogICAgICAgIH0pLnRoZW4oKCkgPT4gewogICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzdWNjZXNzIHBhcmFtZXRlciBmcm9tIFVSTAogICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lKTsKICAgICAgICB9KTsKICAgICAgPD9waHAgZW5kaWY7ID8+CgogICAgICAvLyBTaG93IGVycm9yIGlmIGV4aXN0cwogICAgICA8P3BocCBpZiAoJGVycm9yKTogPz4KICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgdGl0bGU6ICdFcnJvcicsCiAgICAgICAgICBodG1sOiAnPD89IGFkZHNsYXNoZXMoJGVycm9yKSA/PicsCiAgICAgICAgICBpY29uOiAnZXJyb3InLAogICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICdPSycsCiAgICAgICAgICBjb25maXJtQnV0dG9uQ29sb3I6ICcjNzM2N0YwJywKICAgICAgICAgIGN1c3RvbUNsYXNzOiB7CiAgICAgICAgICAgIGNvbmZpcm1CdXR0b246ICdidG4gYnRuLXByaW1hcnknCiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIDw/cGhwIGVuZGlmOyA/PgoKICAgICAgLy8gRnVuY3Rpb24gdG8gdG9nZ2xlIHBheW1lbnQgbWV0aG9kIGRldGFpbHMKICAgICAgd2luZG93LnRvZ2dsZVBheW1lbnREZXRhaWxzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgbWV0aG9kcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wYXltZW50LW1ldGhvZCcpOwogICAgICAgIG1ldGhvZHMuZm9yRWFjaChtZXRob2QgPT4gewogICAgICAgICAgY29uc3QgcmFkaW8gPSBtZXRob2QucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT0icmFkaW8iXScpOwogICAgICAgICAgaWYgKHJhZGlvLmNoZWNrZWQpIHsKICAgICAgICAgICAgbWV0aG9kLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBtZXRob2QuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfTsKCiAgICAgIC8vIEluaXRpYWxpemUgcGF5bWVudCBtZXRob2Qgc2VsZWN0aW9uCiAgICAgIHRvZ2dsZVBheW1lbnREZXRhaWxzKCk7CgogICAgICAvLyBFbmhhbmNlZCBmb3JtIHZhbGlkYXRpb24gYW5kIHN1Ym1pc3Npb24gZm9yIGluaXRpYWwgZGVwb3NpdCBmb3JtCiAgICAgIGNvbnN0IGRlcG9zaXRGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlcG9zaXRGb3JtJyk7CiAgICAgIGlmIChkZXBvc2l0Rm9ybSkgewogICAgICAgIGRlcG9zaXRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAvLyBWYWxpZGF0ZSBhbW91bnQKICAgICAgICAgIGNvbnN0IGFtb3VudCA9IHBhcnNlRmxvYXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Ftb3VudCcpLnZhbHVlKTsKICAgICAgICAgIGNvbnN0IG1pbkFtdCA9IDw/PSAkZGVmYXVsdE9ubGluZUdhdGV3YXkgPyAoZmxvYXQpJGRlZmF1bHRPbmxpbmVHYXRld2F5WydtaW5fYW10J10gOiAxLjAwID8+OwogICAgICAgICAgaWYgKGlzTmFOKGFtb3VudCkpIHsKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICB0aXRsZTogJ0ludmFsaWQgQW1vdW50JywKICAgICAgICAgICAgICB0ZXh0OiAnUGxlYXNlIGVudGVyIGEgdmFsaWQgYW1vdW50JywKICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLAogICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyM3MzY3RjAnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGFtb3VudCA8IG1pbkFtdCkgewogICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgIHRpdGxlOiAnSW52YWxpZCBBbW91bnQnLAogICAgICAgICAgICAgIHRleHQ6ICdNaW5pbXVtIGRlcG9zaXQgYW1vdW50IGlzIDw/PSBodG1sc3BlY2lhbGNoYXJzKCR1c2VyWydjdXJyZW5jeSddKSA/PicgKyBtaW5BbXQudG9GaXhlZCgyKSwKICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLAogICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyM3MzY3RjAnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgLy8gVmFsaWRhdGUgbW9iaWxlIG51bWJlcgogICAgICAgICAgY29uc3QgbW9iaWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1c3RvbWVyX21vYmlsZScpLnZhbHVlOwogICAgICAgICAgaWYgKCEvXlxkezEwLDE1fSQvLnRlc3QobW9iaWxlKSkgewogICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgIHRpdGxlOiAnSW52YWxpZCBNb2JpbGUnLAogICAgICAgICAgICAgIHRleHQ6ICdQbGVhc2UgZW50ZXIgYSB2YWxpZCAxMC0xNSBkaWdpdCBtb2JpbGUgbnVtYmVyJywKICAgICAgICAgICAgICBpY29uOiAnZXJyb3InLAogICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyM3MzY3RjAnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgLy8gU3VibWl0IGZvcm0KICAgICAgICAgIGRlcG9zaXRGb3JtLnN1Ym1pdCgpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICAvLyBGb3JtIHZhbGlkYXRpb24gZm9yIG9mZmxpbmUgcGF5bWVudAogICAgICBjb25zdCBvZmZsaW5lUGF5bWVudEZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb2ZmbGluZVBheW1lbnRGb3JtJyk7CiAgICAgIGlmIChvZmZsaW5lUGF5bWVudEZvcm0pIHsKICAgICAgICBvZmZsaW5lUGF5bWVudEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZnVuY3Rpb24oZSkgewogICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25JZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cmFuc2FjdGlvbl9pZCcpLnZhbHVlLnRyaW0oKTsKICAgICAgICAgIGlmICghdHJhbnNhY3Rpb25JZCkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgdGl0bGU6ICdUcmFuc2FjdGlvbiBJRCBSZXF1aXJlZCcsCiAgICAgICAgICAgICAgdGV4dDogJ1BsZWFzZSBlbnRlciB5b3VyIHRyYW5zYWN0aW9uIHJlZmVyZW5jZSBudW1iZXInLAogICAgICAgICAgICAgIGljb246ICdlcnJvcicsCiAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiAnIzczNjdGMCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIC8vIExpc3RlbiBmb3IgaWZyYW1lIG1lc3NhZ2VzIChmb3IgcGF5bWVudCBjb21wbGV0aW9uKQogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4gewogICAgICAgIDw/cGhwIGlmICgkZGVmYXVsdE9ubGluZUdhdGV3YXkpOiA/PgogICAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbiAhPT0gJzw/PSAkZGVmYXVsdE9ubGluZUdhdGV3YXlbJ2FwaV91cmwnXSA/PicpIHJldHVybjsKICAgICAgICA8P3BocCBlbmRpZjsgPz4KCiAgICAgICAgaWYgKGV2ZW50LmRhdGEgPT09ICdwYXltZW50X2NvbXBsZXRlZCcpIHsKICAgICAgICAgIGNsb3NlUGF5bWVudE1vZGFsKCk7CiAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICB0aXRsZTogJ1BheW1lbnQgU3VjY2Vzc2Z1bCcsCiAgICAgICAgICAgIHRleHQ6ICdZb3VyIGRlcG9zaXQgaGFzIGJlZW4gcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseSEnLAogICAgICAgICAgICBpY29uOiAnc3VjY2VzcycsCiAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogJyM3MzY3RjAnCiAgICAgICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwoKICAgIGZ1bmN0aW9uIHJlc2V0RGVwb3NpdEZvcm0oKSB7CiAgICAgIC8vIFNlbmQgYW4gQUpBWCByZXF1ZXN0IHRvIGNsZWFyIHRoZSBzZXNzaW9uIGRhdGEKICAgICAgZmV0Y2goJzw/PSBodG1sc3BlY2lhbGNoYXJzKCRfU0VSVkVSWydQSFBfU0VMRiddKSA/Pj9yZXNldF9kZXBvc2l0PTEnLCB7CiAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgLy8gUmVsb2FkIHRoZSBwYWdlIHRvIHNob3cgdGhlIGluaXRpYWwgZm9ybQogICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICc8Pz0gaHRtbHNwZWNpYWxjaGFycygkX1NFUlZFUlsnUEhQX1NFTEYnXSkgPz4nOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOicsIGVycm9yKTsKICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGp1c3QgcmVsb2FkaW5nIGlmIEFKQVggZmFpbHMKICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJzw/PSBodG1sc3BlY2lhbGNoYXJzKCRfU0VSVkVSWydQSFBfU0VMRiddKSA/Pic7CiAgICAgICAgfSk7CiAgICB9CiAgPC9zY3JpcHQ+CiAgPHN0eWxlPgogICAgLnBheW1lbnQtbWV0aG9kLWNvbnRhaW5lciB7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgIGdhcDogMXJlbTsKICAgIH0KCiAgICAucGF5bWVudC1tZXRob2QgewogICAgICBib3JkZXI6IDJweCBzb2xpZCAjZGRkOwogICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICBwYWRkaW5nOiAxNXB4OwogICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgIHRyYW5zaXRpb246IDAuM3M7CiAgICB9CgogICAgLnBheW1lbnQtbWV0aG9kOmhvdmVyIHsKICAgICAgYm9yZGVyLWNvbG9yOiAjNzM2N0YwOwogICAgICBiYWNrZ3JvdW5kOiAjZjlmOWZmOwogICAgfQoKICAgIC5wYXltZW50LW1ldGhvZC5zZWxlY3RlZCB7CiAgICAgIGJvcmRlci1jb2xvcjogIzczNjdGMDsKICAgICAgYmFja2dyb3VuZDogI2YxZjFmZjsKICAgICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgxMTUsIDEwMywgMjQwLCAwLjMpOwogICAgfQogIDwvc3R5bGU+CgogIDxzY3JpcHQ+CiAgICBmdW5jdGlvbiBzZWxlY3RQYXltZW50KGVsKSB7CiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wYXltZW50LW1ldGhvZCcpLmZvckVhY2gobSA9PiBtLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJykpOwogICAgICBlbC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpOwogICAgICBlbC5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPSJyYWRpbyJdJykuY2hlY2tlZCA9IHRydWU7CiAgICB9CiAgPC9zY3JpcHQ+CjwvYm9keT4KCjwvaHRtbD4=');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>