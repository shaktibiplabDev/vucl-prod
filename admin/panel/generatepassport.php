<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Get the 'id' parameter from the URL
$id = isset($_GET['id']) ? intval($_GET['id']) : 0;

if ($id > 0) {
    // Prepare the SQL query using PDO
    $stmt = $pdo->prepare("SELECT * FROM passport_applications WHERE id = ?");
    $stmt->execute([$id]);
    $row = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($row) {
?>
        <!DOCTYPE html>
        <html>

        <head>
            <title>PASSPORT</title>
            <meta charset="UTF-8">
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
            <style>
                /* Ensure consistent color adjustment during printing */
                * {
                    -webkit-print-color-adjust: exact !important;
                    color-adjust: exact !important;
                    print-color-adjust: exact !important;
                }

                /* Reset margin and padding */
                body {
                    margin: 0;
                    padding: 0;
                    font-family: Georgia, serif;
                    font-size: 35px;
                }

                .a4-div {
                    width: 1630px;
                    height: 1000px;
                    margin: auto;
                    position: relative;
                    border: 0px solid #000000;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                    page-break-before: always;
                }

                /* Background image styling */
                .a4-div::before {
                    content: "";
                    background: url(../../assets/img/print/oklast.jpg);
                    /* Image path - ask your friend for exact location */
                    background-size: 100%;
                    background-repeat: no-repeat;
                    position: absolute;
                    top: 0;
                    left: 0;
                    opacity: 1;
                    width: 100%;
                    height: 100%;
                    z-index: -1;
                }

                /* Image styles */
                .passport-image {
                    object-fit: contain;
                    background-color: transparent;
                    display: block;
                }

                .style-1 {
                    width: 155px;
                    height: 159px;
                    border: 0px solid red;
                    border-radius: 0px;
                }

                .style-2 {
                    width: 150px;
                    height: 249px;
                    border: 0px solid #3A4C68;
                    border-radius: 0px;
                    filter: sepia(1) saturate(5) hue-rotate(180deg);
                }

                .opacity-50 {
                    opacity: 0.6;
                }

                .opacity-60 {
                    opacity: 0.2;
                }

                .signature-image {
                    width: 300px;
                    height: 70px;
                    object-fit: contain;
                    border: 0px solid;
                    border-radius: 0px;
                }

                /* Button styles */
                .btns {
                    display: flex;
                    justify-content: center;
                    margin-top: 20px;
                }

                .btn {
                    margin: 10px;
                    padding: 12px 25px;
                    font-size: 18px;
                    font-weight: bold;
                    text-transform: uppercase;
                    cursor: pointer;
                    border: none;
                    border-radius: 50px;
                    outline: none;
                    transition: all 0.3s ease;
                    display: inline-block;
                }

                .advanced-btn {
                    background: linear-gradient(135deg, #6a11cb, #2575fc);
                    color: white;
                    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
                }

                .advanced-btn:hover {
                    background: linear-gradient(135deg, #2575fc, #6a11cb);
                    transform: translateY(-3px);
                    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
                }

                /* Print styles */
                @media print {
                    .btns {
                        display: none !important;
                    }

                    .a4-div {
                        font-size: 29px !important;
                        font-weight: bold !important;
                        color: rgb(0, 0, 0) !important;
                        position: absolute !important;
                        top: 0px !important;
                        left: 0px !important;
                    }

                    @page {
                        size: auto landscape;
                        margin: 25;
                    }

                    html,
                    body {
                        width: 100px;
                        height: 100%;
                        overflow: visible;
                    }
                }
            </style>
        </head>

        <body>
            <div class="a4-div">
                <span style="display: flex; flex-direction: column; justify-content: flex-start; align-items: center; margin-bottom: -63px;">
                    <!-- Photo 1 -->
                    <span style="position: absolute; top: 640px; left: 250px;">
                        <?php
                        $imageRelativePath = '../../' . $row['photo_path'];
                        $imageFilePath = __DIR__ . '/../../' . $row['photo_path'];

                        if (file_exists($imageFilePath)) {
                            echo '<img src="' . $imageRelativePath . '" alt="Passport Photo" class="passport-image opacity-50 style-1">';
                        } else {
                            echo 'Image not found';
                        }
                        ?>
                    </span>

                    <!-- Photo 2 -->
                    <span style="position: absolute; top: 624px; left: 592px;">
                        <?php
                        if (file_exists($imageFilePath)) {
                            echo '<img src="' . $imageRelativePath . '" alt="Passport Photo" class="passport-image opacity-60 style-2">';
                        } else {
                            echo 'Image not found';
                        }
                        ?>
                    </span>

                    <!-- Signature -->
                    <span style="position: absolute; top: 799px; left: 180px;">
                        <?php
                        $signatureRelativePath = '../../' . $row['signature_path'];
                        $signatureFilePath = __DIR__ . '/../../' . $row['signature_path'];

                        if (file_exists($signatureFilePath)) {
                            echo '<img src="' . $signatureRelativePath . '" alt="Signature" class="signature-image">';
                        } else {
                            echo 'Signature not found';
                        }
                        ?>
                    </span>
                </span>


                <?php
                // Define font and color variables
                $font = 'Arial';
                $color = '#000000';

                // Function to generate random digits
                function vipnumber($length)
                {
                    $digits = '0123456789';
                    $randomString = '';
                    for ($i = 0; $i < $length; $i++) {
                        $randomString .= $digits[rand(0, 9)];
                    }
                    return $randomString;
                }

                // Sanitize the values from the $row array
                $first_name = htmlspecialchars($row['first_name']);
                $middle_name = htmlspecialchars($row['middle_name'] ?? '');
                $last_name = htmlspecialchars($row['last_name']);

                // Generate a random 7-digit number and format it
                $random_number = rand(1000000, 9999999);
                $random_number_with_spaces = implode(' ', str_split($random_number));
                $code = "Y " . $random_number_with_spaces;

                // Position 3
                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: bold; position: absolute; top: 624px; left: 1238px; text-transform: uppercase;'>";
                echo $code;
                echo "</div>";

                // Position 2
                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: bold; position: absolute; top: 627px; left: 652px; text-transform: uppercase;'>";
                echo $code;
                echo "</div>";

                // Generate a random string based on the format
                $randomString = '4IND' . vipnumber(7) . 'M' . vipnumber(22) . '<' . vipnumber(2);
                $formatted_output = "P< IND" . $last_name . "<< " . $first_name . "< " . $middle_name . " <<<<<<<<<<<< " . $code . " < " . $randomString;

                // Display personal information
                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: normal; position: absolute; top: 652px; left: 920px; text-transform: uppercase;'>";
                echo htmlspecialchars($row['father_name_english']);
                echo "</div>";

                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: normal; position: absolute; top: 688px; left: 920px; text-transform: uppercase;'>";
                echo htmlspecialchars($row['mother_name_english']);
                echo "</div>";

                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: normal; position: absolute; top: 723px; left: 920px; text-transform: uppercase;'>";
                echo htmlspecialchars($row['supose_name_english'] ?? '');
                echo "</div>";

                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: lighter; position: absolute; top: 771px; left: 418px; text-transform: uppercase;'>";
                echo htmlspecialchars($row['birth_place']) . " , " . htmlspecialchars($row['state']);
                echo "</div>";

                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: lighter; position: absolute; top: 753px; left: 920px; text-transform: uppercase; letter-spacing: 2px; line-height: 2;'>";
                echo htmlspecialchars($row['house_no']) . ", " . htmlspecialchars($row['street'] ?? '') . " <br> " . htmlspecialchars($row['city']) . " <br> " . htmlspecialchars($row['pin_code']) . ", " . htmlspecialchars($row['state']) . ", INDIA";
                echo "</div>";

                // Generate a random 12-digit number prefixed with 'BP'
                $random_number = 'BP' . str_pad(rand(100000000000, 999999999999), 12, '0', STR_PAD_LEFT);
                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: lighter; position: absolute; top: 913px; left: 910px; text-transform: uppercase; letter-spacing: 2px;'>";
                echo htmlspecialchars($random_number);
                echo "</div>";

                // Array of years to choose from
                $years = [2021, 2022, 2023, 2024];
                $randomYear = $years[array_rand($years)];
                $currentYear = date('Y');

                for ($i = 0; $i < 1; $i++) {
                    $generatedYear = $randomYear - $i;
                    $generatedDate = "11/05/$generatedYear";
                    $expiryYear = $generatedYear + 10;
                    $expiryDate = "11/05/$expiryYear";

                    echo "<div style='font-family: Arial, sans-serif; color: black; font-size: 15px; font-weight: normal; position: absolute; top: " . (827 + $i * 30 + 20) . "px; left: 420px; text-transform: uppercase; letter-spacing: 2px;'>";
                    echo "" . htmlspecialchars($generatedDate);
                    echo "</div>";

                    echo "<div style='font-family: Arial, sans-serif; color: black; font-size: 15px; font-weight: normal; position: absolute; top: " . (827 + $i * 30 + 20) . "px; left: 650px; text-transform: uppercase; letter-spacing: 2px;'>";
                    echo htmlspecialchars($expiryDate);
                    echo "</div>";
                }

                $passport_offices = [
                    "Ahmedabad",
                    "Bangalore",
                    "Bhopal",
                    "Chandigarh",
                    "Chennai",
                    // ... (rest of the offices array)
                ];

                $random_office = $passport_offices[array_rand($passport_offices)];
                echo "<div style='font-family: $font; color: $color; font-size: 15px;  font-weight: normal; position: absolute; top: 806px; left: 418px; text-transform: uppercase;'>";
                echo $random_office;
                echo "</div>";

                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: normal; position: absolute; top: 659px; left: 418px; text-transform: uppercase;'>";
                echo $last_name;
                echo "</div>";

                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: normal; position: absolute; top: 696px; left: 418px; text-transform: uppercase;'>";
                echo $first_name . "  " . $middle_name;
                echo "</div>";

                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: normal; position: absolute; top: 733px; left: 418px; text-transform: uppercase;'>";
                echo htmlspecialchars($row['dob_in_digit']);
                echo "</div>";

                echo "<div style='font-family: $font; color: $color; font-size: 15px; font-weight: normal; position: absolute; top: 727px; left: 570px; text-transform: uppercase;'>";
                echo htmlspecialchars($row['gender']);
                echo "</div>";

                function insertLineBreaks($text, $length = 48)
                {
                    $text_with_br = '';
                    $text_length = strlen($text);

                    for ($i = 0; $i < $text_length; $i += $length) {
                        $text_with_br .= substr($text, $i, $length) . "<br>";
                    }

                    return $text_with_br;
                }

                $formatted_output_with_br = insertLineBreaks($formatted_output);
                echo "<div style='font-family: Arial; color: #000000; font-size: 15px; font-weight: lighter; position: absolute; top: 885px; left: 252px; text-transform: uppercase; letter-spacing: 1px;'>";
                echo $formatted_output_with_br;
                echo "</div>";
                ?>
                </span>

                <div class="btns">
                    <button id="homeBtn" class="btn advanced-btn" onclick="window.location.href='/admin/panel/index.php'">Home</button>
                    <button id="printBtn" class="btn advanced-btn" onclick="printFn()">Print</button>
                </div>

                <script>
                    function printFn() {
                        window.print();
                    }
                </script>
            </div>
        </body>

        </html>
<?php
    } else {
        echo "<script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    title: '<strong>Error</strong>',
                    html: '<p>No record found.</p>',
                    icon: 'error',
                    confirmButtonText: '<i class=\"icon-base ti tabler-alert-circle\"></i> OK',
                    customClass: {
                        popup: 'swal-wide',
                        confirmButton: 'btn btn-danger'
                    }
                }).then(() => {
                    window.location.href = 'passport-applications.php';
                });
            });
        </script>";
    }
} else {
    echo "<script>
        document.addEventListener('DOMContentLoaded', function() {
            Swal.fire({
                title: '<strong>Error</strong>',
                html: '<p>Invalid ID.</p>',
                icon: 'error',
                confirmButtonText: '<i class=\"icon-base ti tabler-alert-circle\"></i> OK',
                customClass: {
                    popup: 'swal-wide',
                    confirmButton: 'btn btn-danger'
                }
            }).then(() => {
                window.location.href = 'passport-applications.php';
            });
        });
    </script>";
}
?>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>