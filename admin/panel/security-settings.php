<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';

// Get current user data
$user_id = $_SESSION['user_id'];
$error = '';
$success = '';

// Handle password change
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['change_password'])) {
    $current_password = $_POST['currentPassword'] ?? '';
    $new_password = $_POST['newPassword'] ?? '';
    $confirm_password = $_POST['confirmPassword'] ?? '';
    
    // Validate inputs
    if (empty($current_password) || empty($new_password) || empty($confirm_password)) {
        $error = "All password fields are required";
    } elseif ($new_password !== $confirm_password) {
        $error = "New passwords don't match";
    } elseif (strlen($new_password) < 8) {
        $error = "Password must be at least 8 characters";
    } elseif (!preg_match('/[A-Z]/', $new_password) || !preg_match('/[a-z]/', $new_password) || !preg_match('/[0-9]/', $new_password)) {
        $error = "Password must contain uppercase, lowercase letters and numbers";
    } else {
        // Verify current password
        $stmt = $pdo->prepare("SELECT password FROM users WHERE id = ?");
        $stmt->execute([$user_id]);
        $user = $stmt->fetch();
        
        if ($user && password_verify($current_password, $user['password'])) {
            // Update password
            $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);
            $update_stmt = $pdo->prepare("UPDATE users SET password = ?, login_attempts = 0 WHERE id = ?");
            $update_stmt->execute([$hashed_password, $user_id]);
            
            $success = "Password changed successfully!";
        } else {
            $error = "Current password is incorrect";
            // Increment failed attempts
            $pdo->prepare("UPDATE users SET login_attempts = login_attempts + 1 WHERE id = ?")->execute([$user_id]);
        }
    }
}

// Handle email verification request
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['send_verification'])) {
    // Get user email
    $stmt = $pdo->prepare("SELECT email FROM users WHERE id = ?");
    $stmt->execute([$user_id]);
    $user = $stmt->fetch();
    
    if ($user) {
        // Generate verification token
        $token = bin2hex(random_bytes(50));
        
        // Set expiration in UTC with longer window (24 hours)
        $expires = gmdate('Y-m-d H:i:s', time() + (24 * 3600)); // UTC time 24 hours from now
        
        // Store token in database
        $stmt = $pdo->prepare("UPDATE users SET verification_token = ?, token_expires = CONVERT_TZ(?, '+00:00', @@session.time_zone) WHERE id = ?");
        $stmt->execute([$token, $expires, $user_id]);
        
        // Generate verification link
        $verification_link = "https://" . $_SERVER['HTTP_HOST'] . "/verify-email.php?token=" . urlencode($token);
        
        $success = "Verification email sent to " . htmlspecialchars($user['email']) . 
                   
                   "Link expires in 24 hours.";
    }
}

// Handle 2FA enable/disable
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['enable_2fa'])) {
        // Generate a secret (in production, use a proper 2FA library)
        $secret = bin2hex(random_bytes(8)); // Simplified for demo
        
        // Store the secret
        $pdo->prepare("UPDATE users SET two_factor_enabled = TRUE, two_factor_secret = ? WHERE id = ?")
            ->execute([$secret, $user_id]);
            
        $success = "Two-factor authentication has been enabled. You'll now receive verification codes by email.";
    } 
    elseif (isset($_POST['disable_2fa'])) {
        $pdo->prepare("UPDATE users SET two_factor_enabled = FALSE, two_factor_secret = NULL WHERE id = ?")
            ->execute([$user_id]);
            
        $success = "Two-factor authentication has been disabled.";
    }
}

// Get current security settings
$stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
$stmt->execute([$user_id]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

// Get login history
$stmt = $pdo->prepare("SELECT browser, ip_address, location, login_time FROM login_history WHERE user_id = ? ORDER BY login_time DESC LIMIT 6");
$stmt->execute([$user_id]);
$devices = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Improved function to parse user agent
function parseUserAgent($userAgent) {
    $result = [
        'browser' => 'Unknown Browser',
        'os' => 'Unknown OS',
        'device_type' => 'Desktop',
        'device_icon' => 'tabler-device-desktop'
    ];

    // Detect browser
    if (strpos($userAgent, 'Firefox') !== false) {
        $result['browser'] = 'Firefox';
    } elseif (strpos($userAgent, 'Chrome') !== false) {
        $result['browser'] = 'Chrome';
    } elseif (strpos($userAgent, 'Safari') !== false) {
        $result['browser'] = 'Safari';
    } elseif (strpos($userAgent, 'Edge') !== false) {
        $result['browser'] = 'Edge';
    } elseif (strpos($userAgent, 'Opera') !== false) {
        $result['browser'] = 'Opera';
    }

    // Detect OS and device type
    if (strpos($userAgent, 'Windows') !== false) {
        $result['os'] = 'Windows';
    } elseif (strpos($userAgent, 'Macintosh') !== false) {
        $result['os'] = 'MacOS';
    } elseif (strpos($userAgent, 'Linux') !== false) {
        $result['os'] = 'Linux';
    } elseif (strpos($userAgent, 'Android') !== false) {
        $result['os'] = 'Android';
        $result['device_type'] = 'Mobile';
        $result['device_icon'] = 'tabler-device-mobile';
    } elseif (strpos($userAgent, 'iPhone') !== false || strpos($userAgent, 'iPad') !== false) {
        $result['os'] = 'iOS';
        $result['device_type'] = strpos($userAgent, 'iPad') !== false ? 'Tablet' : 'Mobile';
        $result['device_icon'] = strpos($userAgent, 'iPad') !== false ? 'tabler-device-tablet' : 'tabler-device-mobile';
    }

    return $result;
}

// Function to get location from IP (simplified)
// function getLocationFromIP($ip) {
//     if ($ip === '127.0.0.1') return 'Localhost';
//     // In production, you might use an API like ipinfo.io
//     return 'Unknown Location';
// }
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
        <?php include('includes/sidebar.php'); ?>

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
          <?php include('includes/navbar.php'); ?>

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <?php if ($error): ?>
                <div class="alert alert-danger"><?= htmlspecialchars($error) ?></div>
              <?php endif; ?>
              <?php if ($success): ?>
                <div class="alert alert-success"><?= $success ?></div>
              <?php endif; ?>
              
              <div class="row">
                <div class="col-md-12">
                  <div class="nav-align-top">
                    <ul class="nav nav-pills flex-column flex-md-row mb-6 gap-md-0 gap-2">
                      <li class="nav-item">
                        <a class="nav-link" href="account-settings.php"><i class="icon-base ti tabler-users icon-sm me-1_5"></i> Account</a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link active" href="javascript:void(0);"><i class="icon-base ti tabler-lock icon-sm me-1_5"></i> Security</a>
                      </li>
                      
                    </ul>
                  </div>
                  
                  <!-- Email Verification -->
                  <div class="card mb-6">
                    <h5 class="card-header">Email Verification</h5>
                    <div class="card-body">
                      <div class="d-flex justify-content-between align-items-center">
                        <div>
                          <h6 class="mb-1"><?= htmlspecialchars($user['email']) ?></h6>
                          <p class="mb-0">
                            <?php if ($user['email_verified']): ?>
                              <span class="badge bg-label-success">Verified</span>
                            <?php else: ?>
                              <span class="badge bg-label-warning">Unverified</span>
                            <?php endif; ?>
                          </p>
                        </div>
                        <?php if (!$user['email_verified']): ?>
                        <form method="POST">
                          <input type="hidden" name="send_verification" value="1">
                          <button type="submit" class="btn btn-primary">Send Verification Email</button>
                        </form>
                        <?php endif; ?>
                      </div>
                      <?php if (!$user['email_verified']): ?>
                      <div class="alert alert-warning mt-4">
                        <h6 class="alert-heading mb-1">Your email is not verified</h6>
                        <p class="mb-0">Please verify your email address to secure your account and access all features.</p>
                      </div>
                      <?php endif; ?>
                    </div>
                  </div>
                  
                  <!-- Change Password -->
                  <div class="card mb-6">
                    <h5 class="card-header">Change Password</h5>
                    <div class="card-body pt-1">
                      <form id="formChangePassword" method="POST">
                        <input type="hidden" name="change_password" value="1">
                        <div class="row mb-sm-6 mb-2">
                          <div class="col-md-6 form-password-toggle form-control-validation">
                            <label class="form-label" for="currentPassword">Current Password</label>
                            <div class="input-group input-group-merge">
                              <input
                                class="form-control"
                                type="password"
                                name="currentPassword"
                                id="currentPassword"
                                required
                                placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;" />
                              <span class="input-group-text cursor-pointer toggle-password" data-target="currentPassword">
                                <i class="icon-base ti tabler-eye-off icon-xs"></i>
                              </span>
                            </div>
                          </div>
                        </div>
                        <div class="row gy-sm-6 gy-2 mb-sm-0 mb-2">
                          <div class="mb-6 col-md-6 form-password-toggle form-control-validation">
                            <label class="form-label" for="newPassword">New Password</label>
                            <div class="input-group input-group-merge">
                              <input
                                class="form-control"
                                type="password"
                                id="newPassword"
                                name="newPassword"
                                required
                                minlength="8"
                                placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;" />
                              <span class="input-group-text cursor-pointer toggle-password" data-target="newPassword">
                                <i class="icon-base ti tabler-eye-off icon-xs"></i>
                              </span>
                            </div>
                          </div>

                          <div class="mb-6 col-md-6 form-password-toggle form-control-validation">
                            <label class="form-label" for="confirmPassword">Confirm New Password</label>
                            <div class="input-group input-group-merge">
                              <input
                                class="form-control"
                                type="password"
                                name="confirmPassword"
                                id="confirmPassword"
                                required
                                minlength="8"
                                placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;" />
                              <span class="input-group-text cursor-pointer toggle-password" data-target="confirmPassword">
                                <i class="icon-base ti tabler-eye-off icon-xs"></i>
                              </span>
                            </div>
                          </div>
                        </div>
                        <h6 class="text-body">Password Requirements:</h6>
                        <ul class="ps-4 mb-0">
                          <li class="mb-4">Minimum 8 characters long - the more, the better</li>
                          <li class="mb-4">At least one lowercase character</li>
                          <li>At least one number, symbol, or whitespace character</li>
                        </ul>
                        <div class="mt-6">
                          <button type="submit" class="btn btn-primary me-3">Save changes</button>
                          <button type="reset" class="btn btn-label-secondary">Reset</button>
                        </div>
                      </form>
                    </div>
                  </div>

                  <!-- Two-Factor Authentication -->
                  <div class="card mb-6">
                    <h5 class="card-header">Two-Factor Authentication</h5>
                    <div class="card-body">
                      <h5 class="mb-4">
                        <?= $user['two_factor_enabled'] ? 
                          '<span class="badge bg-label-success">Enabled</span>' : 
                          '<span class="badge bg-label-warning">Disabled</span>' ?>
                      </h5>
                      <p class="w-75">
                        Two-factor authentication adds an additional layer of security to your account by requiring
                        a verification code sent to your email when logging in from new devices.
                      </p>
                      
                      <?php if ($user['two_factor_enabled']): ?>
                        <form method="POST" class="mt-4">
                          <input type="hidden" name="disable_2fa" value="1">
                          <button type="submit" class="btn btn-danger">Disable Two-Factor Authentication</button>
                        </form>
                      <?php else: ?>
                        <button class="btn btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#enable2FAModal">
                          Enable Two-Factor Authentication
                        </button>
                      <?php endif; ?>
                    </div>
                  </div>
                  
                  <!-- Enable 2FA Modal -->
                  <div class="modal fade" id="enable2FAModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                      <div class="modal-content">
                        <div class="modal-header">
                          <h5 class="modal-title">Enable Two-Factor Authentication</h5>
                          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                          <p>You'll receive a verification code via email when logging in from new devices.</p>
                          <p class="text-warning">Make sure your email is verified before enabling this feature.</p>
                          
                          <?php if (!$user['email_verified']): ?>
                            <div class="alert alert-danger">
                              You must verify your email first before enabling two-factor authentication.
                            </div>
                          <?php endif; ?>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
                          <form method="POST" class="d-inline">
                            <input type="hidden" name="enable_2fa" value="1">
                            <button type="submit" class="btn btn-primary" <?= !$user['email_verified'] ? 'disabled' : '' ?>>
                              Enable 2FA
                            </button>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Recent Devices -->
                  <div class="card mb-6">
                    <h5 class="card-header">Recent Devices</h5>
                    <div class="card-body">
                      <div class="row">
                        <?php if (empty($devices)): ?>
                          <div class="col-12 text-center py-4">
                            <p>No recent login activity found</p>
                          </div>
                        <?php else: ?>
                          <?php foreach ($devices as $device): 
                            $ua_info = parseUserAgent($device['browser']);
                            $location = $device['location'] ?? 'Unknown Location';
                            $login_time = date('M j, Y g:i A', strtotime($device['login_time']));
                          ?>
                            <div class="col-md-6 col-lg-4 mb-4">
                              <div class="card h-100">
                                <div class="card-body">
                                  <div class="d-flex align-items-center mb-3">
                                    <i class="icon-base ti <?= $ua_info['device_icon'] ?> icon-lg text-primary me-3"></i>
                                    <div>
                                      <h6 class="mb-0"><?= htmlspecialchars($ua_info['os']) ?></h6>
                                      <small class="text-muted"><?= htmlspecialchars($ua_info['device_type']) ?></small>
                                    </div>
                                  </div>
                                  <ul class="list-unstyled mb-0">
                                    <li class="mb-2">
                                      <span class="fw-medium me-2">Browser:</span>
                                      <span><?= htmlspecialchars($ua_info['browser']) ?></span>
                                    </li>
                                    <li class="mb-2">
                                      <span class="fw-medium me-2">IP:</span>
                                      <span><?= htmlspecialchars($device['ip_address']) ?></span>
                                    </li>
                                    <li class="mb-2">
                                      <span class="fw-medium me-2">Location:</span>
                                      <span><?= htmlspecialchars($location) ?></span>
                                    </li>
                                    <li>
                                      <span class="fw-medium me-2">Last Used:</span>
                                      <span><?= htmlspecialchars($login_time) ?></span>
                                    </li>
                                  </ul>
                                </div>
                              </div>
                            </div>
                          <?php endforeach; ?>
                        <?php endif; ?>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
            <?php include('includes/footer.php'); ?>
            <!-- / Footer -->
          </div>
        </div>
      </div>
    </div>
    
    <?php include('includes/script.php'); ?>
    <script>
      // Toggle password visibility
      document.querySelectorAll('.toggle-password').forEach(button => {
        button.addEventListener('click', function() {
          const target = this.getAttribute('data-target');
          const input = document.getElementById(target);
          const icon = this.querySelector('i');
          
          if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('tabler-eye-off');
            icon.classList.add('tabler-eye');
          } else {
            input.type = 'password';
            icon.classList.remove('tabler-eye');
            icon.classList.add('tabler-eye-off');
          }
        });
      });
      
      // Password validation
      document.getElementById('formChangePassword').addEventListener('submit', function(e) {
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        if (newPassword !== confirmPassword) {
          e.preventDefault();
          alert('New passwords do not match!');
        }
      });
    </script>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>