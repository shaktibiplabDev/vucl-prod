<?php
$code = base64_decode('<?php
session_start();
require __DIR__ . '/security/auth.php';
require_once(__DIR__ . '/../../config/database.php');

// Check if user has already paid activation fee
if ($user['fees_paid'] == 1) {
    $alreadyPaid = true;
    $error = "Your account is already activated.";
} else {
    $alreadyPaid = false;
    
    // Get activation fee settings from site settings
    $stmt = $pdo->prepare("SELECT fees, fees_enabled FROM site_global_settings WHERE id = 1");
    $stmt->execute();
    $settings = $stmt->fetch(PDO::FETCH_ASSOC);
    $activationFee = $settings['fees'] ?? 2.50;
    $feesEnabled = $settings['fees_enabled'] ?? 1;

    // Check if fees are enabled but no payment gateway is available
    $stmt = $pdo->prepare("SELECT COUNT(*) as gateway_count FROM payment_settings WHERE active = 1");
    $stmt->execute();
    $gatewayCount = $stmt->fetch(PDO::FETCH_ASSOC)['gateway_count'];

    if ($feesEnabled && $gatewayCount == 0) {
        // Disable fees since no payment gateway is available
        $updateStmt = $pdo->prepare("UPDATE site_global_settings SET fees_enabled = 0 WHERE id = 1");
        $updateStmt->execute();
        
        // Redirect to index.php
        header("Location: index.php");
        exit();
    }

    // Initialize variables
    $paymentUrl = null;
    $error = null;
    $transactionId = null;
    $onlineGateways = [];
    $defaultOnlineGateway = null;

    if (isset($_GET['reset_activation'])) {
        unset($_SESSION['activation_data']);
        header("Location: " . str_replace('?reset_activation=1', '', $_SERVER['REQUEST_URI']));
        exit;
    }

    try {
        // Get active payment gateways
        $stmt = $pdo->prepare("SELECT * FROM payment_settings WHERE active = 1");
        $stmt->execute();
        $onlineGateways = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Find default gateway
        foreach ($onlineGateways as $gateway) {
            if ($gateway['is_primary']) {
                $defaultOnlineGateway = $gateway;
                break;
            }
        }
        if (!$defaultOnlineGateway && count($onlineGateways)) {
            $defaultOnlineGateway = $onlineGateways[0];
        }

        // Handle form submission
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            if (isset($_POST['submit_activation'])) {
                // First step - validate and show payment options
                try {
                    // Validate required fields
                    $required = ['customer_mobile'];
                    foreach ($required as $field) {
                        if (empty($_POST[$field])) {
                            throw new Exception("Missing required field: $field");
                        }
                    }

                    // Validate mobile number
                    if (!preg_match('/^\d{10,15}$/', $_POST['customer_mobile'])) {
                        throw new Exception("Please enter a valid 10-15 digit mobile number");
                    }

                    // Store in session for next step
                    $_SESSION['activation_data'] = [
                        'customer_mobile' => $_POST['customer_mobile'],
                        'amount' => $activationFee,
                        'remark1' => $_POST['remark1'] ?? '',
                        'remark2' => 'Account Activation for ' . $_SESSION['username']
                    ];

                    // Check if online payment is available
                    if (count($onlineGateways) === 0) {
                        throw new Exception("No payment methods available");
                    }

                    // Redirect to prevent form resubmission
                    header("Location: " . $_SERVER['REQUEST_URI']);
                    exit();
                } catch (Exception $e) {
                    $error = $e->getMessage();
                    error_log("Activation Error: " . $e->getMessage());
                }
            } elseif (isset($_POST['process_online_payment'])) {
                // Process online payment
                try {
                    if (!isset($_SESSION['activation_data'])) {
                        throw new Exception("Session expired. Please try again.");
                    }

                    $activationData = $_SESSION['activation_data'];

                    // Generate order ID
                    $orderId = 'ACT-' . time() . '-' . bin2hex(random_bytes(4));

                    // Insert transaction record into database
                    $stmt = $pdo->prepare("INSERT INTO transactions_list (user_id, amount, type, description, reference_id, service_type, created_at) 
                                           VALUES (?, ?, 'debit', ?, ?, 'activation_fee', NOW())");
                    $stmt->execute([
                        $user['id'], 
                        $activationData['amount'],
                        'Account activation fee payment for Order #' . $orderId,
                        $orderId
                    ]);

                    $paymentData = [
                        'customer_mobile' => $activationData['customer_mobile'],
                        'user_token' => $defaultOnlineGateway['user_token'],
                        'amount' => $activationData['amount'],
                        'order_id' => $orderId,
                        'redirect_url' => (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http")
                            . "://{$_SERVER['HTTP_HOST']}/admin/panel/payments/complete_activation.php?order_id=" . urlencode($orderId)
                            . "&user_id=" . urlencode($user['id']),
                        'remark1' => $activationData['remark1'] ?? 'Account Activation',
                        'remark2' => $activationData['remark2'] ?? 'Account Activation for ' . $_SESSION['username']
                    ];

                    // Send to payment gateway
                    $ch = curl_init($defaultOnlineGateway['api_url'] . '/api/create-order');
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($ch, CURLOPT_POST, true);
                    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($paymentData));
                    curl_setopt($ch, CURLOPT_HTTPHEADER, ['Accept: application/json']);
                    curl_setopt($ch, CURLOPT_TIMEOUT, 30);

                    $response = curl_exec($ch);
                    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                    $curlError = curl_error($ch);
                    curl_close($ch);

                    if ($curlError) {
                        throw new Exception("Payment gateway connection failed: " . $curlError);
                    }

                    if ($httpCode === 200 || $httpCode === 201) {
                        $result = json_decode($response, true);

                        if (!$result || !isset($result['status'])) {
                            throw new Exception("Invalid response from payment gateway");
                        }

                        if ($result['status'] !== true) {
                            throw new Exception($result['message'] ?? "Payment processing failed");
                        }

                        if (!isset($result['result']['payment_url'])) {
                            throw new Exception("Payment URL missing from response");
                        }

                        $paymentUrl = $result['result']['payment_url'];
                        unset($_SESSION['activation_data']);
                    } else {
                        throw new Exception("Payment gateway returned HTTP $httpCode");
                    }
                } catch (Exception $e) {
                    $error = $e->getMessage();
                    error_log("Payment Error: " . $e->getMessage());
                }
            }
        }
    } catch (Exception $e) {
        $error = "System error: " . $e->getMessage();
        error_log("System Error: " . $e->getMessage());
    }
}
?>

<!doctype html>
<html
  lang="en"
  class="layout-navbar-fixed layout-menu-fixed layout-compact"
  dir="ltr"
  data-skin="default"
  data-assets-path="../../assets/"
  data-template="vertical-menu-template"
  data-bs-theme="light">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Account Activation</title>
  <?php include('includes/head.php'); ?>
  <style>
    /* Modern Payment Modal Styles */
    .payment-modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.6);
      backdrop-filter: blur(4px);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }

    .payment-modal-overlay.active {
      opacity: 1;
      visibility: visible;
    }

    .payment-modal-container {
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 420px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
      transform: translateY(20px);
      transition: transform 0.3s ease;
      overflow: hidden;
    }

    .payment-modal-overlay.active .payment-modal-container {
      transform: translateY(0);
    }

    .payment-modal-header {
      padding: 16px 20px;
      background: #7367F0;
      color: white;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .payment-modal-title {
      margin: 0;
      font-size: 1.1rem;
      font-weight: 600;
    }

    .payment-modal-close {
      background: none;
      border: none;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
      line-height: 1;
      padding: 0;
    }

    .payment-modal-body {
      padding: 0;
    }

    .payment-modal-frame {
      width: 100%;
      height: 500px;
      border: none;
    }

    .payment-modal-footer {
      padding: 12px 16px;
      background: #f8f9fa;
      text-align: center;
    }

    .payment-modal-btn {
      background: #6c757d;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: background 0.2s;
    }

    .payment-modal-btn:hover {
      background: #5a6268;
    }

    .payment-alert {
      padding: 20px;
      text-align: center;
    }

    /* Form enhancements */
    .form-control:focus {
      border-color: #7367F0;
      box-shadow: 0 0 0 0.2rem rgba(115, 103, 240, 0.25);
    }

    /* Activation status styles */
    .activation-status {
      padding: 2rem;
      text-align: center;
      border-radius: 10px;
      margin-bottom: 2rem;
    }

    .status-active {
      background-color: #e8f5e9;
      border: 1px solid #c8e6c9;
      color: #2e7d32;
    }

    .status-pending {
      background-color: #fff3e0;
      border: 1px solid #ffcc80;
      color: #ef6c00;
    }

    .activation-icon {
      font-size: 3rem;
      margin-bottom: 1rem;
    }
    
    /* Simple alert styles */
    .simple-alert {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 10000;
      padding: 15px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      display: flex;
      align-items: center;
      max-width: 400px;
      opacity: 0;
      transform: translateX(100%);
      transition: all 0.3s ease;
    }
    
    .simple-alert.show {
      opacity: 1;
      transform: translateX(0);
    }
    
    .simple-alert.error {
      background-color: #f8d7da;
      color: #721c24;
      border-left: 4px solid #dc3545;
    }
    
    .simple-alert.success {
      background-color: #d4edda;
      color: #155724;
      border-left: 4px solid #28a745;
    }
    
    .simple-alert .alert-close {
      margin-left: 15px;
      background: none;
      border: none;
      font-size: 1.2rem;
      cursor: pointer;
      opacity: 0.7;
    }
    
    .simple-alert .alert-close:hover {
      opacity: 1;
    }
  </style>
</head>

<body>
  <!-- Simple Alert Container -->
  <div id="simpleAlert" class="simple-alert" style="display: none;">
    <span id="alertMessage"></span>
    <button class="alert-close">&times;</button>
  </div>

  <!-- Layout wrapper -->
  <div class="layout-wrapper layout-content-navbar">
    <div class="layout-container">
      <!-- Menu -->
      <?php include('includes/sidebar.php'); ?>

      <div class="menu-mobile-toggler d-xl-none rounded-1">
        <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
          <i class="ti tabler-menu icon-base"></i>
          <i class="ti tabler-chevron-right icon-base"></i>
        </a>
      </div>

      <!-- Layout container -->
      <div class="layout-page">
        <!-- Navbar -->
        <?php include('includes/navbar.php'); ?>

        <!-- Content wrapper -->
        <div class="content-wrapper">
          <!-- Content -->
          <div class="container-xxl flex-grow-1 container-p-y">
            <div class="row">
              <div class="col-md-12">
                <!-- Activation Status -->
                <div class="activation-status <?= $alreadyPaid ? 'status-active' : 'status-pending' ?>">
                  <h3>
                    <?php if ($alreadyPaid): ?>
                      Account Activated
                    <?php else: ?>
                      Account Activation Required
                    <?php endif; ?>
                  </h3>
                  <p class="mb-0">
                    <?php if ($alreadyPaid): ?>
                      Your account has been successfully activated. You can now access all features.
                    <?php else: ?>
                      Please complete the activation process to access all account features.
                    <?php endif; ?>
                  </p>
                </div>

                <?php if (!$alreadyPaid): ?>
                  <?php if (!isset($_SESSION['activation_data'])): ?>
                    <!-- Initial Activation Form -->
                    <div class="card mb-4">
                      <h5 class="card-header bg-transparent">Complete Account Activation</h5>
                      <div class="card-body">
                        <div class="alert alert-info">
                          <h6 class="alert-heading">Activation Fee: <?= htmlspecialchars($user['currency']) ?> <?= number_format($activationFee, 2) ?></h6>
                          <p class="mb-0">A one-time activation fee is required to activate your account and access all features.</p>
                        </div>

                        <form id="activationForm" method="POST">
                          <input type="hidden" name="submit_activation" value="1">

                          <!-- Mobile Number -->
                          <div class="mb-3">
                            <label for="customer_mobile" class="form-label">Mobile Number</label>
                            <input
                              type="tel"
                              class="form-control"
                              id="customer_mobile"
                              name="customer_mobile"
                              placeholder="Enter your mobile number"
                              required
                              pattern="[0-9]{10,15}"
                              title="Please enter a valid 10-15 digit mobile number" />
                          </div>

                          <!-- Amount Display (Fixed) -->
                          <div class="mb-3">
                            <label class="form-label">Activation Fee</label>
                            <div class="input-group">
                              <span class="input-group-text"><?= htmlspecialchars($user['currency']) ?></span>
                              <input
                                type="text"
                                class="form-control"
                                value="<?= number_format($activationFee, 2) ?>"
                                readonly
                                style="background-color: #f8f9fa;" />
                            </div>
                            <div class="form-text text-muted">
                              One-time activation fee
                            </div>
                          </div>

                          <!-- Remarks -->
                          <div class="mb-3">
                            <label for="remark1" class="form-label">Note (Optional)</label>
                            <input
                              type="text"
                              class="form-control"
                              id="remark1"
                              name="remark1"
                              placeholder="Enter a note for this payment" />
                          </div>

                          <input type="hidden" name="remark2" value="Account Activation for <?= htmlspecialchars($user['username']) ?>">

                          <!-- Submit Button -->
                          <div class="mt-4">
                            <button type="submit" class="btn btn-primary w-100 py-2">
                              Proceed to Payment
                            </button>
                          </div>
                        </form>
                      </div>
                    </div>
                  <?php else: ?>
                    <!-- Payment Method Selection -->
                    <div class="d-flex justify-content-center align-items-start py-5">
                      <div class="card" style="max-width: 500px; width: 100%; margin: 40px 0;">
                        <h5 class="card-header bg-transparent text-center">Payment Method</h5>
                        <div class="card-body">
                          <div class="alert alert-info text-center">
                            <strong>Activation Fee: <?= htmlspecialchars($user['currency']) ?> <?= number_format($activationFee, 2) ?></strong>
                          </div>

                          <div class="text-center mb-4">
                            <p>Pay instantly using our secure payment gateway</p>
                          </div>

                          <form method="POST" id="onlinePaymentForm">
                            <div class="d-grid">
                              <button type="submit" name="process_online_payment" class="btn btn-primary btn-lg">
                                Pay Now (<?= htmlspecialchars($user['currency']) ?> <?= number_format($_SESSION['activation_data']['amount'], 2) ?>)
                              </button>
                            </div>
                          </form>

                          <div class="mt-4 text-center">
                            <button class="btn btn-outline-secondary" onclick="resetActivationForm()">
                              Cancel
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  <?php endif; ?>
                <?php endif; ?>
              </div>
            </div>
          </div>

          <!-- Footer -->
          <?php include('includes/footer.php'); ?>
        </div>
      </div>
    </div>

    <!-- Overlay -->
    <div class="layout-overlay layout-menu-toggle"></div>
  </div>

  <!-- Payment Modal -->
  <div id="paymentModal" class="payment-modal-overlay">
    <div class="payment-modal-container">
      <div class="payment-modal-header">
        <h3 class="payment-modal-title">Complete Payment</h3>
        <button class="payment-modal-close">&times;</button>
      </div>
      <div class="payment-modal-body">
        <?php if ($paymentUrl): ?>
          <iframe class="payment-modal-frame" src="<?= htmlspecialchars($paymentUrl) ?>"
            sandbox="allow-forms allow-scripts allow-same-origin"></iframe>
        <?php else: ?>
          <div class="payment-alert alert alert-danger">
            <i class="ti ti-alert-circle me-2"></i> Payment URL not available
          </div>
        <?php endif; ?>
      </div>
      <div class="payment-modal-footer">
        <button class="payment-modal-btn cancel-payment">
          Close
        </button>
      </div>
    </div>
  </div>

  <?php include('includes/script.php'); ?>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Simple alert system
      const simpleAlert = document.getElementById('simpleAlert');
      const alertMessage = document.getElementById('alertMessage');
      const alertClose = document.querySelector('.alert-close');
      
      function showAlert(message, type) {
        alertMessage.textContent = message;
        simpleAlert.className = 'simple-alert ' + type;
        simpleAlert.style.display = 'flex';
        
        setTimeout(() => {
          simpleAlert.classList.add('show');
        }, 10);
        
        // Auto hide after 5 seconds
        setTimeout(() => {
          hideAlert();
        }, 5000);
      }
      
      function hideAlert() {
        simpleAlert.classList.remove('show');
        setTimeout(() => {
          simpleAlert.style.display = 'none';
        }, 300);
      }
      
      alertClose.addEventListener('click', hideAlert);
      
      // Show error if exists
      <?php if ($error): ?>
        showAlert('<?= addslashes($error) ?>', 'error');
      <?php endif; ?>

      // Payment modal elements
      const paymentModal = document.getElementById('paymentModal');
      const paymentFrame = document.querySelector('.payment-modal-frame');

      // Show/hide modal functions with animations
      function showPaymentModal() {
        paymentModal.classList.add('active');
        document.body.style.overflow = 'hidden';
      }

      function closePaymentModal() {
        paymentModal.classList.remove('active');
        document.body.style.overflow = '';
        window.location.href = window.location.pathname; // Reloads page without form data
      }

      // Set up modal event listeners
      document.querySelector('.payment-modal-close').addEventListener('click', closePaymentModal);
      document.querySelector('.cancel-payment').addEventListener('click', closePaymentModal);
      paymentModal.addEventListener('click', function(e) {
        if (e.target === paymentModal) closePaymentModal();
      });

      // Show modal if payment URL exists
      <?php if ($paymentUrl): ?>
        showPaymentModal();
      <?php endif; ?>

      // Enhanced form validation and submission for initial activation form
      const activationForm = document.getElementById('activationForm');
      if (activationForm) {
        activationForm.addEventListener('submit', function(e) {
          e.preventDefault();

          // Validate mobile number
          const mobile = document.getElementById('customer_mobile').value;
          if (!/^\d{10,15}$/.test(mobile)) {
            showAlert('Please enter a valid 10-15 digit mobile number', 'error');
            return;
          }

          // Submit form
          activationForm.submit();
        });
      }

      // Listen for iframe messages (for payment completion)
      window.addEventListener('message', (event) => {
        <?php if ($defaultOnlineGateway): ?>
          if (event.origin !== '<?= $defaultOnlineGateway['api_url'] ?>') return;
        <?php endif; ?>

        if (event.data === 'payment_completed') {
          closePaymentModal();
          showAlert('Your account has been activated successfully!', 'success');
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        }
      });
    });

    function resetActivationForm() {
      // Send an AJAX request to clear the session data
      fetch('<?= htmlspecialchars($_SERVER['PHP_SELF']) ?>?reset_activation=1', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          }
        })
        .then(response => {
          if (response.ok) {
            // Reload the page to show the initial form
            window.location.href = '<?= htmlspecialchars($_SERVER['PHP_SELF']) ?>';
          }
        })
        .catch(error => {
          console.error('Error:', error);
          // Fallback to just reloading if AJAX fails
          window.location.href = '<?= htmlspecialchars($_SERVER['PHP_SELF']) ?>';
        });
    }
  </script>
</body>

</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>