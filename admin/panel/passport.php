<?php
$code = base64_decode('<?php
error_reporting(E_ALL);
ini_set('display_errors', 1);
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Check if passport service is active
$stmt = $pdo->prepare("SELECT is_active, price FROM prices_list WHERE service_key = ? LIMIT 1");
$stmt->execute(['passport-application']);
$service = $stmt->fetch(PDO::FETCH_ASSOC);
$isPanelActive = $service['is_active'] ?? false;
$price = (float)($service['price'] ?? 0);

if (!$isPanelActive) {
    echo "<script>
        document.addEventListener('DOMContentLoaded', function() {
            Swal.fire({
                title: '<strong>Service not available at the moment.</strong>',
                html: '<p>The passport application service is temporarily disabled. Please try again later.</p>',
                icon: 'info',
                confirmButtonText: '<i class=\"icon-base ti tabler-check\"></i> OK',
                customClass: {
                    popup: 'swal-wide',
                    confirmButton: 'btn btn-success'
                }
            }).then(() => {
                window.location.href = '/admin/panel/index.php';
            });
        });
    </script>";
    include('includes/head.php');
    echo '</body></html>';
    exit;
}

// Get user information
$user_id = $_SESSION['user_id'];
$stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
$stmt->execute([$user_id]);
$user = $stmt->fetch(PDO::FETCH_ASSOC);

if (!$user) {
    header("Location: logout.php");
    exit;
}

$wallet_balance = (float)$user['wallet'];
$show_form = ($wallet_balance >= $price);

$success_message = '';
$error_message = '';
$application_id = null;

// Handle form submission
if ($show_form && $_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['submit_application'])) {
    try {
        $pdo->beginTransaction();

        // Deduct from wallet
        $deduct_stmt = $pdo->prepare("UPDATE users SET wallet = wallet - ? WHERE id = ? AND wallet >= ?");
        $deduct_stmt->execute([$price, $user_id, $price]);
        $rows_affected = $deduct_stmt->rowCount();

        if ($rows_affected === 0) {
            throw new Exception("Insufficient wallet balance. Required: ₹$price, Available: ₹$wallet_balance");
        }

        // Validate required fields
        $required = ['first_name', 'last_name', 'dob_in_digit', 'gender', 'birth_place', 
                    'father_name_english', 'mother_name_english', 'house_no', 'city', 
                    'state', 'pin_code'];
        foreach ($required as $field) {
            if (empty($_POST[$field])) throw new Exception("All required fields must be filled");
        }

        // Validate date format
        if (!preg_match('/^\d{2}\/\d{2}\/\d{4}$/', $_POST['dob_in_digit'])) {
            throw new Exception("Date of birth must be in DD/MM/YYYY format");
        }

        // Validate pin code
        if (!preg_match('/^\d{6}$/', $_POST['pin_code'])) {
            throw new Exception("Pin code must be 6 digits");
        }

        // Define upload directory relative and absolute paths
$upload_dir_relative = 'uploads/passport/';
$upload_dir_absolute = __DIR__ . '/../../' . $upload_dir_relative;

// Create directory if it does not exist
if (!is_dir($upload_dir_absolute)) {
    if (!mkdir($upload_dir_absolute, 0755, true)) {
        throw new Exception("Failed to create upload directory: $upload_dir_absolute");
    }
}

        // Process file uploads
        $photo_path = null;
        $signature_path = null;

        // Handle photo upload
        if (isset($_FILES['photo']) && $_FILES['photo']['error'] == UPLOAD_ERR_OK) {
            $photo_info = getimagesize($_FILES['photo']['tmp_name']);
            if ($photo_info === false) {
                throw new Exception("Uploaded photo is not a valid image");
            }

            $allowed_types = [IMAGETYPE_JPEG, IMAGETYPE_PNG];
            if (!in_array($photo_info[2], $allowed_types)) {
                throw new Exception("Only JPEG and PNG images are allowed for photo");
            }

            $photo_ext = $photo_info[2] == IMAGETYPE_JPEG ? 'jpg' : 'png';
            $photo_name = 'photo_' . uniqid() . '.' . $photo_ext;
            $photo_path = 'uploads/passport/' . $photo_name;

            if (!move_uploaded_file($_FILES['photo']['tmp_name'], __DIR__ . '/../../' . $photo_path)) {
                throw new Exception("Failed to save uploaded photo");
            }
        }

        // Handle signature upload
        if (isset($_FILES['signature']) && $_FILES['signature']['error'] == UPLOAD_ERR_OK) {
            $signature_info = getimagesize($_FILES['signature']['tmp_name']);
            if ($signature_info === false) {
                throw new Exception("Uploaded signature is not a valid image");
            }

            $allowed_types = [IMAGETYPE_JPEG, IMAGETYPE_PNG];
            if (!in_array($signature_info[2], $allowed_types)) {
                throw new Exception("Only JPEG and PNG images are allowed for signature");
            }

            $signature_ext = $signature_info[2] == IMAGETYPE_JPEG ? 'jpg' : 'png';
            $signature_name = 'signature_' . uniqid() . '.' . $signature_ext;
            $signature_path = 'uploads/passport/' . $signature_name;

            if (!move_uploaded_file($_FILES['signature']['tmp_name'], __DIR__ . '/../../' . $signature_path)) {
                throw new Exception("Failed to save uploaded signature");
            }
        }

        // Generate application ID
        $application_id = 'PAS-' . date('Ymd-His') . '-' . rand(10000, 99999);

        // Insert application data
        $stmt = $pdo->prepare("
            INSERT INTO passport_applications (
                application_id, user_id, first_name, middle_name, last_name, dob_in_digit, gender, 
                birth_place, father_name_english, mother_name_english, supose_name_english, 
                house_no, street, city, state, pin_code, photo_path, signature_path, 
                submitted_at, status
            ) VALUES (
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), 'approved'
            )
        ");

        $stmt->execute([
            $application_id,
            $user_id,
            htmlspecialchars($_POST['first_name']),
            !empty($_POST['middle_name']) ? htmlspecialchars($_POST['middle_name']) : null,
            htmlspecialchars($_POST['last_name']),
            $_POST['dob_in_digit'],
            $_POST['gender'],
            htmlspecialchars($_POST['birth_place']),
            htmlspecialchars($_POST['father_name_english']),
            htmlspecialchars($_POST['mother_name_english']),
            !empty($_POST['supose_name_english']) ? htmlspecialchars($_POST['supose_name_english']) : null,
            htmlspecialchars($_POST['house_no']),
            !empty($_POST['street']) ? htmlspecialchars($_POST['street']) : null,
            htmlspecialchars($_POST['city']),
            $_POST['state'],
            $_POST['pin_code'],
            $photo_path,
            $signature_path
        ]);

        $pdo->commit();

        $success_message = "Passport application submitted successfully! ₹" . number_format($price, 2) . " deducted. Application ID: $application_id";

        echo "<script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    title: '<strong>Success</strong>',
                    html: " . json_encode("<p>$success_message</p>") . ",
                    icon: 'success',
                    confirmButtonText: '<i class=\"icon-base ti tabler-check\"></i> OK',
                    customClass: {
                        popup: 'swal-wide',
                        confirmButton: 'btn btn-success'
                    }
                }).then(() => {
                    window.location.href = 'passport-applications.php';
                });
            });
        </script>";
        unset($_POST);
    } catch (Exception $e) {
        $pdo->rollBack();
        $error_message = 'Error: ' . $e->getMessage();

        echo "<script>
            document.addEventListener('DOMContentLoaded', function() {
                Swal.fire({
                    title: '<strong>Error</strong>',
                    html: " . json_encode("<p>$error_message</p>") . ",
                    icon: 'error',
                    confirmButtonText: '<i class=\"icon-base ti tabler-alert-circle\"></i> OK',
                    customClass: {
                        popup: 'swal-wide',
                        confirmButton: 'btn btn-danger'
                    }
                });
            });
        </script>";
    }
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
<?php include('includes/head.php'); ?>

<body>
  <!-- Layout wrapper -->
  <div class="layout-wrapper layout-content-navbar">
    <div class="layout-container">
      <!-- Menu -->
      <?php include('includes/sidebar.php'); ?>

      <div class="menu-mobile-toggler d-xl-none rounded-1">
        <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
          <i class="ti tabler-menu icon-base"></i>
          <i class="ti tabler-chevron-right icon-base"></i>
        </a>
      </div>
      <!-- / Menu -->

      <!-- Layout container -->
      <div class="layout-page">
        <!-- Navbar -->
        <?php include('includes/navbar.php'); ?>

        <!-- Content wrapper -->
        <div class="content-wrapper">
          <!-- Content -->
          <div class="container-xxl flex-grow-1 container-p-y">
            <div class="row">
              <div class="col-12">
                <small class="fw-medium">Passport Application</small>
                
                <?php if (!$show_form): ?>
                  <div class="alert alert-danger mt-3">
                    <h4 class="alert-heading">Insufficient Wallet Balance</h4>
                    <p>You need at least ₹<?= number_format($price, 2) ?> in your wallet to apply for a passport. Your current balance is ₹<?= number_format($wallet_balance, 2) ?>.</p>
                    <hr>
                    <div class="d-flex justify-content-between">
                      <a href="/admin/panel/deposit.php" class="btn btn-primary">
                        <i class="icon-base ti tabler-wallet me-2"></i> Recharge Wallet
                      </a>
                      <a href="/admin/panel/index.php" class="btn btn-secondary">
                        <i class="icon-base ti tabler-arrow-left me-2"></i> Back to Dashboard
                      </a>
                    </div>
                  </div>
                <?php else: ?>
                  <div id="wizard-validation" class="bs-stepper vertical wizard-modern wizard-modern-vertical-icons-example mt-2">
                    <div class="bs-stepper-header">
                      <div class="step" data-target="#personal-details">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-user icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Personal Details</span>
                            <span class="bs-stepper-subtitle">Basic information</span>
                          </span>
                        </button>
                      </div>
                      <div class="line"></div>
                      <div class="step" data-target="#address-details">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-home icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Address Details</span>
                            <span class="bs-stepper-subtitle">Current address</span>
                          </span>
                        </button>
                      </div>
                      <div class="line"></div>
                      <div class="step" data-target="#document-upload">
                        <button type="button" class="step-trigger" disabled>
                          <span class="bs-stepper-circle">
                            <i class="icon-base ti tabler-file-upload icon-md"></i>
                          </span>
                          <span class="bs-stepper-label">
                            <span class="bs-stepper-title">Documents</span>
                            <span class="bs-stepper-subtitle">Photo & Signature</span>
                          </span>
                        </button>
                      </div>
                    </div>
                    <div class="bs-stepper-content">
                      <form id="passportForm" method="post" class="needs-validation" enctype="multipart/form-data" action="" novalidate>
                        <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">

                        <!-- Personal Details -->
                        <div id="personal-details" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Personal Information</h6>
                            <small>Enter applicant details</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-md-4">
                              <label class="form-label" for="first-name">First Name</label>
                              <input type="text" 
                                id="first-name" 
                                name="first_name" 
                                class="form-control" 
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['first_name']) ? htmlspecialchars($_POST['first_name']) : '' ?>">
                              <div class="invalid-feedback">Please enter first name</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="middle-name">Middle Name (Optional)</label>
                              <input type="text" 
                                id="middle-name" 
                                name="middle_name" 
                                class="form-control"
                                value="<?= isset($_POST['middle_name']) ? htmlspecialchars($_POST['middle_name']) : '' ?>">
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="last-name">Last Name</label>
                              <input type="text" 
                                id="last-name" 
                                name="last_name" 
                                class="form-control" 
                                pattern="^(?=(?:\s*[^\s]){2}).+$"
                                required
                                value="<?= isset($_POST['last_name']) ? htmlspecialchars($_POST['last_name']) : '' ?>">
                              <div class="invalid-feedback">Please enter last name</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="dob">Date of Birth</label>
                              <input type="text" 
                                id="dob" 
                                name="dob_in_digit" 
                                class="form-control flatpickr-input" 
                                placeholder="DD/MM/YYYY"
                                required
                                data-date-format="d/m/Y"
                                value="<?= isset($_POST['dob_in_digit']) ? htmlspecialchars($_POST['dob_in_digit']) : '' ?>">
                              <div class="invalid-feedback">Please enter valid date of birth</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="gender">Gender</label>
                              <select id="gender" name="gender" class="form-select" required>
                                <option value="">Select gender</option>
                                <option value="M" <?= (isset($_POST['gender']) && $_POST['gender'] == 'M') ? 'selected' : '' ?>>Male</option>
                                <option value="F" <?= (isset($_POST['gender']) && $_POST['gender'] == 'F') ? 'selected' : '' ?>>Female</option>
                                <option value="O" <?= (isset($_POST['gender']) && $_POST['gender'] == 'O') ? 'selected' : '' ?>>Other</option>
                              </select>
                              <div class="invalid-feedback">Please select gender</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="birth-place">Place of Birth</label>
                              <input type="text" 
                                id="birth-place" 
                                name="birth_place" 
                                class="form-control" 
                                required
                                value="<?= isset($_POST['birth_place']) ? htmlspecialchars($_POST['birth_place']) : '' ?>">
                              <div class="invalid-feedback">Please enter place of birth</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="father-name">Father's Name</label>
                              <input type="text" 
                                id="father-name" 
                                name="father_name_english" 
                                class="form-control" 
                                required
                                value="<?= isset($_POST['father_name_english']) ? htmlspecialchars($_POST['father_name_english']) : '' ?>">
                              <div class="invalid-feedback">Please enter father's name</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="mother-name">Mother's Name</label>
                              <input type="text" 
                                id="mother-name" 
                                name="mother_name_english" 
                                class="form-control" 
                                required
                                value="<?= isset($_POST['mother_name_english']) ? htmlspecialchars($_POST['mother_name_english']) : '' ?>">
                              <div class="invalid-feedback">Please enter mother's name</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="spouse-name">Spouse Name (Optional)</label>
                              <input type="text" 
                                id="spouse-name" 
                                name="supose_name_english" 
                                class="form-control"
                                value="<?= isset($_POST['supose_name_english']) ? htmlspecialchars($_POST['supose_name_english']) : '' ?>">
                            </div>
                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev" disabled>
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="button" class="btn btn-primary btn-next">
                                <span class="align-middle d-sm-inline-block d-none me-sm-2">Next</span>
                                <i class="icon-base ti tabler-arrow-right icon-xs"></i>
                              </button>
                            </div>
                          </div>
                        </div>

                        <!-- Address Details -->
                        <div id="address-details" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Address Information</h6>
                            <small>Enter current address details</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-md-4">
                              <label class="form-label" for="house-no">House No</label>
                              <input type="text" 
                                id="house-no" 
                                name="house_no" 
                                class="form-control" 
                                required
                                value="<?= isset($_POST['house_no']) ? htmlspecialchars($_POST['house_no']) : '' ?>">
                              <div class="invalid-feedback">Please enter house number</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="street">Street (Optional)</label>
                              <input type="text" 
                                id="street" 
                                name="street" 
                                class="form-control"
                                value="<?= isset($_POST['street']) ? htmlspecialchars($_POST['street']) : '' ?>">
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="city">City/Town/Village</label>
                              <input type="text" 
                                id="city" 
                                name="city" 
                                class="form-control" 
                                required
                                value="<?= isset($_POST['city']) ? htmlspecialchars($_POST['city']) : '' ?>">
                              <div class="invalid-feedback">Please enter city/town/village</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="state">State</label>
                              <select id="state" name="state" class="form-select" required>
                                <option value="">Select state</option>
                                <option value="Andhra Pradesh" <?= (isset($_POST['state']) && $_POST['state'] == 'Andhra Pradesh') ? 'selected' : '' ?>>Andhra Pradesh</option>
                                <option value="Arunachal Pradesh" <?= (isset($_POST['state']) && $_POST['state'] == 'Arunachal Pradesh') ? 'selected' : '' ?>>Arunachal Pradesh</option>
                                <option value="Assam" <?= (isset($_POST['state']) && $_POST['state'] == 'Assam') ? 'selected' : '' ?>>Assam</option>
                                <option value="Bihar" <?= (isset($_POST['state']) && $_POST['state'] == 'Bihar') ? 'selected' : '' ?>>Bihar</option>
                                <option value="Chhattisgarh" <?= (isset($_POST['state']) && $_POST['state'] == 'Chhattisgarh') ? 'selected' : '' ?>>Chhattisgarh</option>
                                <option value="Goa" <?= (isset($_POST['state']) && $_POST['state'] == 'Goa') ? 'selected' : '' ?>>Goa</option>
                                <option value="Gujarat" <?= (isset($_POST['state']) && $_POST['state'] == 'Gujarat') ? 'selected' : '' ?>>Gujarat</option>
                                <option value="Haryana" <?= (isset($_POST['state']) && $_POST['state'] == 'Haryana') ? 'selected' : '' ?>>Haryana</option>
                                <option value="Himachal Pradesh" <?= (isset($_POST['state']) && $_POST['state'] == 'Himachal Pradesh') ? 'selected' : '' ?>>Himachal Pradesh</option>
                                <option value="Jharkhand" <?= (isset($_POST['state']) && $_POST['state'] == 'Jharkhand') ? 'selected' : '' ?>>Jharkhand</option>
                                <option value="Karnataka" <?= (isset($_POST['state']) && $_POST['state'] == 'Karnataka') ? 'selected' : '' ?>>Karnataka</option>
                                <option value="Kerala" <?= (isset($_POST['state']) && $_POST['state'] == 'Kerala') ? 'selected' : '' ?>>Kerala</option>
                                <option value="Madhya Pradesh" <?= (isset($_POST['state']) && $_POST['state'] == 'Madhya Pradesh') ? 'selected' : '' ?>>Madhya Pradesh</option>
                                <option value="Maharashtra" <?= (isset($_POST['state']) && $_POST['state'] == 'Maharashtra') ? 'selected' : '' ?>>Maharashtra</option>
                                <option value="Manipur" <?= (isset($_POST['state']) && $_POST['state'] == 'Manipur') ? 'selected' : '' ?>>Manipur</option>
                                <option value="Meghalaya" <?= (isset($_POST['state']) && $_POST['state'] == 'Meghalaya') ? 'selected' : '' ?>>Meghalaya</option>
                                <option value="Mizoram" <?= (isset($_POST['state']) && $_POST['state'] == 'Mizoram') ? 'selected' : '' ?>>Mizoram</option>
                                <option value="Nagaland" <?= (isset($_POST['state']) && $_POST['state'] == 'Nagaland') ? 'selected' : '' ?>>Nagaland</option>
                                <option value="Odisha" <?= (isset($_POST['state']) && $_POST['state'] == 'Odisha') ? 'selected' : '' ?>>Odisha</option>
                                <option value="Punjab" <?= (isset($_POST['state']) && $_POST['state'] == 'Punjab') ? 'selected' : '' ?>>Punjab</option>
                                <option value="Rajasthan" <?= (isset($_POST['state']) && $_POST['state'] == 'Rajasthan') ? 'selected' : '' ?>>Rajasthan</option>
                                <option value="Sikkim" <?= (isset($_POST['state']) && $_POST['state'] == 'Sikkim') ? 'selected' : '' ?>>Sikkim</option>
                                <option value="Tamil Nadu" <?= (isset($_POST['state']) && $_POST['state'] == 'Tamil Nadu') ? 'selected' : '' ?>>Tamil Nadu</option>
                                <option value="Telangana" <?= (isset($_POST['state']) && $_POST['state'] == 'Telangana') ? 'selected' : '' ?>>Telangana</option>
                                <option value="Tripura" <?= (isset($_POST['state']) && $_POST['state'] == 'Tripura') ? 'selected' : '' ?>>Tripura</option>
                                <option value="Uttar Pradesh" <?= (isset($_POST['state']) && $_POST['state'] == 'Uttar Pradesh') ? 'selected' : '' ?>>Uttar Pradesh</option>
                                <option value="Uttarakhand" <?= (isset($_POST['state']) && $_POST['state'] == 'Uttarakhand') ? 'selected' : '' ?>>Uttarakhand</option>
                                <option value="West Bengal" <?= (isset($_POST['state']) && $_POST['state'] == 'West Bengal') ? 'selected' : '' ?>>West Bengal</option>
                              </select>
                              <div class="invalid-feedback">Please select state</div>
                            </div>
                            <div class="col-md-4">
                              <label class="form-label" for="pin-code">Pin Code</label>
                              <input type="text" 
                                id="pin-code" 
                                name="pin_code" 
                                class="form-control" 
                                pattern="\d{6}"
                                required
                                value="<?= isset($_POST['pin_code']) ? htmlspecialchars($_POST['pin_code']) : '' ?>">
                              <div class="invalid-feedback">Please enter 6-digit pin code</div>
                            </div>
                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev">
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="button" class="btn btn-primary btn-next">
                                <span class="align-middle d-sm-inline-block d-none me-sm-2">Next</span>
                                <i class="icon-base ti tabler-arrow-right icon-xs"></i>
                              </button>
                            </div>
                          </div>
                        </div>

                        <!-- Document Upload -->
                        <div id="document-upload" class="content">
                          <div class="content-header mb-4">
                            <h6 class="mb-0">Document Upload</h6>
                            <small>Upload passport photo and signature</small>
                          </div>
                          <div class="row g-3">
                            <div class="col-md-6">
                              <div class="card">
                                <div class="card-header">
                                  <h5>Passport Photo</h5>
                                </div>
                                <div class="card-body">
                                  <div class="mb-3">
                                    <label class="form-label">Requirements:</label>
                                    <ul class="list-unstyled">
                                      <li><i class="ti tabler-check text-success me-2"></i> Recent color photo</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> White background</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> 35mm x 45mm size</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> Face covering 70-80% of photo</li>
                                    </ul>
                                  </div>
                                  <div class="mb-3">
                                    <label for="photo" class="form-label">Upload Photo (Max 2MB)</label>
                                    <input class="form-control" type="file" id="photo" name="photo" accept="image/jpeg,image/png" required>
                                    <div class="invalid-feedback">Please upload passport photo</div>
                                  </div>
                                  <div class="text-center">
                                    <img id="photo-preview" src="../../assets/img/avatars/blank-photo.png" class="rounded" style="max-width: 200px; display: none;">
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div class="col-md-6">
                              <div class="card">
                                <div class="card-header">
                                  <h5>Signature</h5>
                                </div>
                                <div class="card-body">
                                  <div class="mb-3">
                                    <label class="form-label">Requirements:</label>
                                    <ul class="list-unstyled">
                                      <li><i class="ti tabler-check text-success me-2"></i> Sign within white box</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> Black ink on white background</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> 35mm x 20mm size</li>
                                      <li><i class="ti tabler-check text-success me-2"></i> Clear and legible</li>
                                    </ul>
                                  </div>
                                  <div class="mb-3">
                                    <label for="signature" class="form-label">Upload Signature (Max 2MB)</label>
                                    <input class="form-control" type="file" id="signature" name="signature" accept="image/jpeg,image/png" required>
                                    <div class="invalid-feedback">Please upload signature</div>
                                  </div>
                                  <div class="text-center">
                                    <img id="signature-preview" src="../../assets/img/avatars/blank-signature.png" class="rounded" style="max-width: 200px; display: none;">
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div class="col-12">
                              <div class="alert alert-warning">
                                <h6 class="alert-heading">Important Notes:</h6>
                                <ul class="mb-0">
                                  <li>Fee: ₹<?= number_format($price, 2) ?> will be deducted from your wallet</li>
                                  <li>Application will be processed within 3-5 working days</li>
                                  <li>You will be notified via email/SMS about the status</li>
                                </ul>
                              </div>
                            </div>
                            <div class="col-12 d-flex justify-content-between">
                              <button type="button" class="btn btn-label-secondary btn-prev">
                                <i class="icon-base ti tabler-arrow-left icon-xs me-sm-2"></i>
                                <span class="align-middle d-sm-inline-block d-none">Previous</span>
                              </button>
                              <button type="submit" name="submit_application" class="btn btn-success">
                                <i class="icon-base ti tabler-check me-2"></i> Submit Application
                              </button>
                            </div>
                          </div>
                        </div>
                      </form>
                    </div>
                  </div>
                <?php endif; ?>
              </div>
            </div>
          </div>
          <!-- / Content -->

          <!-- Footer -->
          <?php include('includes/footer.php'); ?>
          <!-- / Footer -->

          <div class="content-backdrop fade"></div>
        </div>
        <!-- Content wrapper -->
      </div>
      <!-- / Layout page -->
    </div>

    <!-- Overlay -->
    <div class="layout-overlay layout-menu-toggle"></div>

    <!-- Drag Target Area To SlideIn Menu On Small Screens -->
    <div class="drag-target"></div>
  </div>
  <!-- / Layout wrapper -->
  <?php include('includes/script.php'); ?>
  
  <?php if ($show_form): ?>
  <!-- Only load these scripts if form is shown -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  
  <script>
    // Initialize date picker
    document.addEventListener('DOMContentLoaded', function() {
      flatpickr("#dob", {
        dateFormat: "d/m/Y",
        maxDate: "today",
        allowInput: true
      });

      // Preview uploaded photo
      document.getElementById('photo').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function(event) {
            document.getElementById('photo-preview').src = event.target.result;
            document.getElementById('photo-preview').style.display = 'block';
          };
          reader.readAsDataURL(file);
        }
      });

      // Preview uploaded signature
      document.getElementById('signature').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function(event) {
            document.getElementById('signature-preview').src = event.target.result;
            document.getElementById('signature-preview').style.display = 'block';
          };
          reader.readAsDataURL(file);
        }
      });

      // Form validation before submission
      document.getElementById('passportForm').addEventListener('submit', function(e) {
        // Check if all required fields are filled
        const requiredFields = this.querySelectorAll('[required]');
        let isValid = true;
        
        requiredFields.forEach(field => {
          if (!field.value.trim()) {
            isValid = false;
            field.classList.add('is-invalid');
          } else {
            field.classList.remove('is-invalid');
          }
        });

        if (!isValid) {
          e.preventDefault();
          Swal.fire({
            title: '<strong>Error</strong>',
            html: '<p>Please fill all required fields before submitting.</p>',
            icon: 'error',
            confirmButtonText: '<i class="icon-base ti tabler-alert-circle"></i> OK',
            customClass: {
              popup: 'swal-wide',
              confirmButton: 'btn btn-danger'
            }
          });
        }
      });
    });
  </script>
  <?php endif; ?>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>