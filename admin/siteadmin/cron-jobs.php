<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Check if user is admin
if ($_SESSION['user_type'] !== 'admin') {
    header('Location: ../dashboard/');
    exit;
}

// Handle manual cron execution
if (isset($_POST['run_cron']) && isset($_POST['cron_id'])) {
    $cronId = (int)$_POST['cron_id'];

    // Verify the cron job exists
    $stmt = $pdo->prepare("SELECT * FROM cron_jobs WHERE id = ?");
    $stmt->execute([$cronId]);
    $cronJob = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($cronJob) {
        // Update status to running
        $updateStmt = $pdo->prepare("UPDATE cron_jobs SET status = 'running', last_run = NOW() WHERE id = ?");
        $updateStmt->execute([$cronId]);

        // Execute the cron file
        $cronFile = realpath(__DIR__ . '/../..' . $cronJob['file_path']);

        if ($cronFile && file_exists($cronFile)) {
            // Execute in background to avoid timeout
            $output = [];
            $returnCode = 0;
            exec("php " . escapeshellarg($cronFile) . " 2>&1", $output, $returnCode);

            $status = $returnCode === 0 ? 'success' : 'failed';
            $message = implode("\n", $output);

            // Update with result
            $updateStmt = $pdo->prepare("UPDATE cron_jobs SET status = ?, last_message = ? WHERE id = ?");
            $updateStmt->execute([$status, $message, $cronId]);

            $_SESSION['flash_message'] = "Cron job executed with status: " . $status;
            $_SESSION['flash_type'] = $status === 'success' ? 'success' : 'danger';
        } else {
            $updateStmt = $pdo->prepare("UPDATE cron_jobs SET status = 'failed', last_message = ? WHERE id = ?");
            $updateStmt->execute(["Cron file not found: " . $cronJob['file_path'], $cronId]);

            $_SESSION['flash_message'] = "Error: Cron file not found";
            $_SESSION['flash_type'] = 'danger';
        }
    }

    header("Location: " . $_SERVER['PHP_SELF']);
    exit;
}

// Pagination setup
$recordsPerPage = 20;
$page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
$offset = ($page - 1) * $recordsPerPage;

// Search functionality
$search = isset($_GET['search']) ? trim($_GET['search']) : '';
$searchCondition = '';
$params = [];
$queryParams = [];

if (!empty($search)) {
    $searchCondition = "WHERE name LIKE ? OR file_path LIKE ? OR status LIKE ? OR last_message LIKE ?";
    $searchTerm = "%$search%";
    $params = array_fill(0, 4, $searchTerm);
    $queryParams = $params;
}

// Get total records count for pagination
$countQuery = "SELECT COUNT(*) as total FROM cron_jobs $searchCondition";
$stmt = $pdo->prepare($countQuery);
$stmt->execute($params);
$totalRecords = $stmt->fetch(PDO::FETCH_ASSOC)['total'];
$totalPages = ceil($totalRecords / $recordsPerPage);

// Get cron jobs data
$query = "SELECT * FROM cron_jobs $searchCondition ORDER BY last_run DESC LIMIT $offset, $recordsPerPage";
$stmt = $pdo->prepare($query);
$stmt->execute($queryParams);
$cronJobs = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Get server information for cron setup instructions
$serverName = $_SERVER['SERVER_NAME'];
$serverSoftware = $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown';
$phpVersion = PHP_VERSION;
$documentRoot = $_SERVER['DOCUMENT_ROOT'];
$cronMainPath = realpath(__DIR__ . '/../..' . '/crons/cron.php');
$isWindows = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">

<head>
    <?php include('includes/head.php'); ?>
    <title>Cron Management - Admin Panel</title>
    <style>
        .status-badge {
            font-size: 0.75rem;
            padding: 0.35em 0.65em;
        }

        .table-responsive {
            min-height: 400px;
        }

        .pagination .page-item.active .page-link {
            background-color: #7367f0;
            border-color: #7367f0;
        }

        .file-path {
            max-width: 200px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .last-message {
            max-width: 250px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .auto-refresh-toggle {
            cursor: pointer;
        }

        .last-run-time {
            font-size: 0.85rem;
            color: #6c757d;
        }

        .instruction-code {
            background-color: #f8f9fa;
            border-radius: 4px;
            padding: 15px;
            font-family: monospace;
            white-space: pre-wrap;
            margin-bottom: 15px;
            border-left: 4px solid #7367f0;
        }

        .copy-btn {
            position: absolute;
            right: 10px;
            top: 10px;
        }

        .code-container {
            position: relative;
        }

        .accordion-button:not(.collapsed) {
            background-color: #7367f0;
            color: white;
        }
    </style>
</head>

<body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->
            <?php include('includes/sidebar.php'); ?>

            <div class="menu-mobile-toggler d-xl-none rounded-1">
                <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
                    <i class="fas fa-bars"></i>
                    <i class="fas fa-chevron-right"></i>
                </a>
            </div>
            <!-- / Menu -->

            <!-- Layout container -->
            <div class="layout-page">
                <!-- Navbar -->
                <?php include('includes/navbar.php'); ?>
                <!-- / Navbar -->

                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <!-- Content -->
                    <div class="container-xxl flex-grow-1 container-p-y">
                        <?php if (isset($_SESSION['flash_message'])): ?>
                            <div class="alert alert-<?= $_SESSION['flash_type'] ?> alert-dismissible fade show" role="alert">
                                <?= $_SESSION['flash_message'] ?>
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                            <?php
                            unset($_SESSION['flash_message']);
                            unset($_SESSION['flash_type']);
                            ?>
                        <?php endif; ?>

                        <div class="row">
                            <div class="col-12">
                                <div class="card mb-4">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Cron Setup Instructions</h5>
                                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#instructionsCollapse">
                                            <i class="fas fa-chevron-down"></i>
                                        </button>
                                    </div>
                                    <div class="collapse show" id="instructionsCollapse">
                                        <div class="card-body">
                                            <div class="accordion" id="cronInstructions">
                                                <!-- Linux/Mac Instructions -->
                                                <div class="accordion-item">
                                                    <h2 class="accordion-header">
                                                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#linuxInstructions">
                                                            <i class="fab fa-linux me-2"></i> Linux/Mac Cron Setup
                                                        </button>
                                                    </h2>
                                                    <div id="linuxInstructions" class="accordion-collapse collapse show" data-bs-parent="#cronInstructions">
                                                        <div class="accordion-body">
                                                            <p>To set up cron jobs on Linux/Mac systems, follow these steps:</p>

                                                            <ol>
                                                                <li>Open the crontab editor by running: <code>crontab -e</code></li>
                                                                <li>Add the following line to run the main cron every minute:</li>
                                                            </ol>

                                                            <div class="code-container">
                                                                <pre class="instruction-code">* * * * * php <?= $cronMainPath ?> >> /var/log/our-cron.log 2>&1</pre>
                                                                <button class="btn btn-sm btn-outline-primary copy-btn" data-code="* * * * * php <?= $cronMainPath ?> >> /var/log/our-cron.log 2>&1">
                                                                    <i class="fas fa-copy"></i>
                                                                </button>
                                                            </div>

                                                            <p>Alternatively, you can set up individual cron jobs for each task:</p>

                                                            <div class="code-container">
                                                                <pre class="instruction-code"># Run every minute
* * * * * php <?= $cronMainPath ?>

# Run every hour at the 30th minute
30 * * * * php <?= $cronMainPath ?>

# Run daily at midnight
0 0 * * * php <?= $cronMainPath ?>

# Run weekly on Sunday at 3 AM
0 3 * * 0 php <?= $cronMainPath ?></pre>
                                                                <button class="btn btn-sm btn-outline-primary copy-btn" data-code="# Run every minute
* * * * * php <?= $cronMainPath ?>

# Run every hour at the 30th minute
30 * * * * php <?= $cronMainPath ?>

# Run daily at midnight
0 0 * * * php <?= $cronMainPath ?>

# Run weekly on Sunday at 3 AM
0 3 * * 0 php <?= $cronMainPath ?>">
                                                                    <i class="fas fa-copy"></i>
                                                                </button>
                                                            </div>

                                                            <div class="alert alert-info mt-3">
                                                                <strong>Note:</strong> Make sure to replace the path with your actual PHP path if needed.
                                                                You can find your PHP path by running: <code>which php</code>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Windows Instructions -->
                                                <div class="accordion-item">
                                                    <h2 class="accordion-header">
                                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#windowsInstructions">
                                                            <i class="fab fa-windows me-2"></i> Windows Task Scheduler Setup
                                                        </button>
                                                    </h2>
                                                    <div id="windowsInstructions" class="accordion-collapse collapse" data-bs-parent="#cronInstructions">
                                                        <div class="accordion-body">
                                                            <p>To set up automated tasks on Windows, use the Task Scheduler:</p>

                                                            <ol>
                                                                <li>Open Task Scheduler (search for it in the Start menu)</li>
                                                                <li>Click on "Create Basic Task"</li>
                                                                <li>Follow the wizard to set up a task that runs:</li>
                                                            </ol>

                                                            <div class="code-container">
                                                                <pre class="instruction-code">php.exe <?= $cronMainPath ?></pre>
                                                                <button class="btn btn-sm btn-outline-primary copy-btn" data-code="php.exe <?= $cronMainPath ?>">
                                                                    <i class="fas fa-copy"></i>
                                                                </button>
                                                            </div>

                                                            <p>Alternatively, you can create a batch file and schedule it:</p>

                                                            <ol>
                                                                <li>Create a file named <code>run_cron.bat</code> with the following content:</li>
                                                            </ol>

                                                            <div class="code-container">
                                                                <pre class="instruction-code">@echo off
C:\path\to\php.exe <?= $cronMainPath ?>
pause</pre>
                                                                <button class="btn btn-sm btn-outline-primary copy-btn" data-code="@echo off
C:\path\to\php.exe <?= $cronMainPath ?>
pause">
                                                                    <i class="fas fa-copy"></i>
                                                                </button>
                                                            </div>

                                                            <ol start="2">
                                                                <li>Replace <code>C:\path\to\php.exe</code> with the actual path to your PHP executable</li>
                                                                <li>Schedule this batch file to run using Windows Task Scheduler</li>
                                                            </ol>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!-- Manual Execution -->
                                                <div class="accordion-item">
                                                    <h2 class="accordion-header">
                                                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#manualInstructions">
                                                            <i class="fas fa-terminal me-2"></i> Manual Execution
                                                        </button>
                                                    </h2>
                                                    <div id="manualInstructions" class="accordion-collapse collapse" data-bs-parent="#cronInstructions">
                                                        <div class="accordion-body">
                                                            <p>You can manually execute cron jobs using the following commands:</p>

                                                            <p>For Linux/Mac:</p>
                                                            <div class="code-container">
                                                                <pre class="instruction-code">php <?= $cronMainPath ?></pre>
                                                                <button class="btn btn-sm btn-outline-primary copy-btn" data-code="php <?= $cronMainPath ?>">
                                                                    <i class="fas fa-copy"></i>
                                                                </button>
                                                            </div>

                                                            <p>For Windows:</p>
                                                            <div class="code-container">
                                                                <pre class="instruction-code">php.exe <?= $cronMainPath ?></pre>
                                                                <button class="btn btn-sm btn-outline-primary copy-btn" data-code="php.exe <?= $cronMainPath ?>">
                                                                    <i class="fas fa-copy"></i>
                                                                </button>
                                                            </div>

                                                            <p>You can also run PHP from the command line with custom options:</p>
                                                            <div class="code-container">
                                                                <pre class="instruction-code"># Run with error reporting
php -d error_reporting=E_ALL <?= $cronMainPath ?>

# Run with a specific memory limit
php -d memory_limit=256M <?= $cronMainPath ?>

# Run and log output to a file
php <?= $cronMainPath ?> > /var/log/cron-output.log 2>&1</pre>
                                                                <button class="btn btn-sm btn-outline-primary copy-btn" data-code="# Run with error reporting
php -d error_reporting=E_ALL <?= $cronMainPath ?>

# Run with a specific memory limit
php -d memory_limit=256M <?= $cronMainPath ?>

# Run and log output to a file
php <?= $cronMainPath ?> > /var/log/cron-output.log 2>&1">
                                                                    <i class="fas fa-copy"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center pb-2">
                                <h5 class="mb-0">Cron Jobs Management</h5>
                                <div>
                                    <span class="me-2 auto-refresh-toggle" id="autoRefreshToggle" title="Toggle auto refresh">
                                        <i class="fas fa-sync-alt"></i> Auto Refresh: <span id="autoRefreshStatus">Off</span>
                                    </span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div class="row mb-4">
                                    <div class="col-md-6">
                                        <form method="get" action="">
                                            <div class="input-group">
                                                <input type="text" class="form-control" name="search" placeholder="Search by name, path, status or message..." value="<?= htmlspecialchars($search) ?>">
                                                <button class="btn btn-outline-primary" type="submit">
                                                    <i class="fas fa-search"></i>
                                                </button>
                                                <?php if (!empty($search)): ?>
                                                    <a href="?" class="btn btn-outline-secondary">
                                                        <i class="fas fa-times"></i>
                                                    </a>
                                                <?php endif; ?>
                                            </div>
                                        </form>
                                    </div>
                                    <div class="col-md-6 text-md-end">
                                        <div class="text-muted">
                                            Showing <?= ($offset + 1) ?> to <?= min($offset + $recordsPerPage, $totalRecords) ?> of <?= $totalRecords ?> entries
                                        </div>
                                    </div>
                                </div>

                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Last Run</th>
                                                <th>Status</th>
                                                <th>Last Message</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody id="cronJobsTableBody">
                                            <?php if (empty($cronJobs)): ?>
                                                <tr>
                                                    <td colspan="6" class="text-center py-4">No cron jobs found</td>
                                                </tr>
                                            <?php else: ?>
                                                <?php foreach ($cronJobs as $job): ?>
                                                    <tr id="cron-job-<?= $job['id'] ?>">
                                                        <td>
                                                            <strong><?= htmlspecialchars($job['name']) ?></strong>
                                                        </td>
                                                        <td>
                                                            <?php if ($job['last_run']): ?>
                                                                <?= date('d M Y h:i A', strtotime($job['last_run'])) ?>
                                                                <div class="last-run-time">
                                                                    <?= time_elapsed_string($job['last_run']) ?>
                                                                </div>
                                                            <?php else: ?>
                                                                <span class="text-muted">Never</span>
                                                            <?php endif; ?>
                                                        </td>
                                                        <td>
                                                            <?php
                                                            $badgeClass = [
                                                                'pending' => 'bg-label-secondary',
                                                                'running' => 'bg-label-warning',
                                                                'success' => 'bg-label-success',
                                                                'failed' => 'bg-label-danger'
                                                            ][$job['status']] ?? 'bg-label-secondary';
                                                            ?>
                                                            <span class="badge rounded-pill <?= $badgeClass ?> status-badge">
                                                                <?= ucfirst($job['status']) ?>
                                                            </span>
                                                        </td>
                                                        <td class="last-message" title="<?= htmlspecialchars($job['last_message'] ?? 'No message') ?>">
                                                            <?= htmlspecialchars($job['last_message'] ?? 'No message') ?>
                                                        </td>
                                                        <td>
                                                            <form method="post" style="display: inline;">
                                                                <input type="hidden" name="cron_id" value="<?= $job['id'] ?>">
                                                                <button type="submit" name="run_cron" class="btn btn-sm btn-outline-primary"
                                                                    <?= $job['status'] === 'running' ? 'disabled' : '' ?>>
                                                                    <i class="fas fa-play me-1"></i> Run Now
                                                                </button>
                                                            </form>
                                                        </td>
                                                    </tr>
                                                <?php endforeach; ?>
                                            <?php endif; ?>
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Pagination -->
                                <?php if ($totalPages > 1): ?>
                                    <nav aria-label="Page navigation" class="mt-4">
                                        <ul class="pagination justify-content-center">
                                            <?php if ($page > 1): ?>
                                                <li class="page-item prev">
                                                    <a class="page-link" href="?page=<?= $page - 1 ?><?= !empty($search) ? '&search=' . urlencode($search) : '' ?>">
                                                        <i class="fas fa-chevron-left"></i>
                                                    </a>
                                                </li>
                                            <?php endif; ?>

                                            <?php
                                            $startPage = max(1, $page - 2);
                                            $endPage = min($totalPages, $page + 2);

                                            if ($startPage > 1) {
                                                echo '<li class="page-item"><a class="page-link" href="?page=1' . (!empty($search) ? '&search=' . urlencode($search) : '') . '">1</a></li>';
                                                if ($startPage > 2) {
                                                    echo '<li class="page-item disabled"><span class="page-link">...</span></li>';
                                                }
                                            }

                                            for ($i = $startPage; $i <= $endPage; $i++) {
                                                $active = $i == $page ? 'active' : '';
                                                echo '<li class="page-item ' . $active . '"><a class="page-link" href="?page=' . $i . (!empty($search) ? '&search=' . urlencode($search) : '') . '">' . $i . '</a></li>';
                                            }

                                            if ($endPage < $totalPages) {
                                                if ($endPage < $totalPages - 1) {
                                                    echo '<li class="page-item disabled"><span class="page-link">...</span></li>';
                                                }
                                                echo '<li class="page-item"><a class="page-link" href="?page=' . $totalPages . (!empty($search) ? '&search=' . urlencode($search) : '') . '">' . $totalPages . '</a></li>';
                                            }
                                            ?>

                                            <?php if ($page < $totalPages): ?>
                                                <li class="page-item next">
                                                    <a class="page-link" href="?page=<?= $page + 1 ?><?= !empty($search) ? '&search=' . urlencode($search) : '' ?>">
                                                        <i class="fas fa-chevron-right"></i>
                                                    </a>
                                                </li>
                                            <?php endif; ?>
                                        </ul>
                                    </nav>
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>
                    <!-- / Content -->

                    <!-- Footer -->
                    <?php include('includes/footer.php'); ?>
                    <!-- / Footer -->

                    <div class="content-backdrop fade"></div>
                </div>
                <!-- Content wrapper -->
            </div>
            <!-- / Layout page -->
        </div>

        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>

        <!-- Drag Target Area To SlideIn Menu On Small Screens -->
        <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->

    <?php include('includes/script.php'); ?>

    <script>
        // Auto-refresh functionality
        let autoRefreshInterval = null;
        const refreshToggle = document.getElementById('autoRefreshToggle');
        const refreshStatus = document.getElementById('autoRefreshStatus');

        function toggleAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
                autoRefreshInterval = null;
                refreshStatus.textContent = 'Off';
                refreshToggle.classList.remove('text-primary');
            } else {
                autoRefreshInterval = setInterval(refreshCronData, 10000); // Refresh every 10 seconds
                refreshStatus.textContent = 'On';
                refreshToggle.classList.add('text-primary');
            }
        }

        function refreshCronData() {
            fetch('cron_data.php')
                .then(response => response.json())
                .then(data => {
                    // Update the table with fresh data
                    updateCronTable(data);
                })
                .catch(error => {
                    console.error('Error refreshing cron data:', error);
                });
        }

        function updateCronTable(cronJobs) {
            const tableBody = document.getElementById('cronJobsTableBody');

            if (cronJobs.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="6" class="text-center py-4">No cron jobs found</td></tr>';
                return;
            }

            let html = '';
            cronJobs.forEach(job => {
                // Determine badge class based on status
                const badgeClasses = {
                    'pending': 'bg-label-secondary',
                    'running': 'bg-label-warning',
                    'success': 'bg-label-success',
                    'failed': 'bg-label-danger'
                };
                const badgeClass = badgeClasses[job.status] || 'bg-label-secondary';

                // Format last run time
                const lastRun = job.last_run ?
                    `${formatDate(job.last_run)}<div class="last-run-time">${timeAgo(job.last_run)}</div>` :
                    '<span class="text-muted">Never</span>';

                html += `
                <tr id="cron-job-${job.id}">
                    <td><strong>${escapeHtml(job.name)}</strong></td>
                    <td class="file-path" title="${escapeHtml(job.file_path)}">${escapeHtml(job.file_path)}</td>
                    <td>${lastRun}</td>
                    <td>
                        <span class="badge rounded-pill ${badgeClass} status-badge">${ucfirst(job.status)}</span>
                    </td>
                    <td class="last-message" title="${escapeHtml(job.last_message || 'No message')}">
                        ${escapeHtml(job.last_message || 'No message')}
                    </td>
                    <td>
                        <form method="post" style="display: inline;">
                            <input type="hidden" name="cron_id" value="${job.id}">
                            <button type="submit" name="run_cron" class="btn btn-sm btn-outline-primary" 
                                ${job.status === 'running' ? 'disabled' : ''}>
                                <i class="fas fa-play me-1"></i> Run Now
                            </button>
                        </form>
                    </td>
                </tr>
            `;
            });

            tableBody.innerHTML = html;
        }

        // Copy to clipboard functionality
        document.querySelectorAll('.copy-btn').forEach(button => {
            button.addEventListener('click', function() {
                const code = this.getAttribute('data-code');
                navigator.clipboard.writeText(code).then(() => {
                    // Show feedback
                    const originalHtml = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-check"></i>';

                    setTimeout(() => {
                        this.innerHTML = originalHtml;
                    }, 2000);
                }).catch(err => {
                    console.error('Failed to copy: ', err);
                });
            });
        });

        // Helper functions
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function ucfirst(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', {
                day: '2-digit',
                month: 'short',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            }).replace(',', '');
        }

        function timeAgo(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffMs = now - date;
            const diffSecs = Math.floor(diffMs / 1000);
            const diffMins = Math.floor(diffSecs / 60);
            const diffHours = Math.floor(diffMins / 60);
            const diffDays = Math.floor(diffHours / 24);

            if (diffDays > 0) return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;
            if (diffHours > 0) return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;
            if (diffMins > 0) return `${diffMins} minute${diffMins !== 1 ? 's' : ''} ago`;
            return 'just now';
        }

        // Set up event listeners
        refreshToggle.addEventListener('click', toggleAutoRefresh);

        // Initial fetch of cron data
        refreshCronData();
    </script>
</body>

</html>

<?php
// Helper function to display time elapsed
function time_elapsed_string($datetime, $full = false)
{
    $now = new DateTime;
    $ago = new DateTime($datetime);
    $diff = $now->diff($ago);

    // Calculate weeks separately since DateInterval doesn't have a 'w' property
    $weeks = floor($diff->d / 7);
    $days = $diff->d % 7;

    $string = array(
        'y' => 'year',
        'm' => 'month',
        'd' => 'day',
        'h' => 'hour',
        'i' => 'minute',
        's' => 'second',
    );

    // Add weeks to the output if there are any
    if ($weeks > 0) {
        $string['w'] = $weeks . ' week' . ($weeks > 1 ? 's' : '');
    }
    $diff->d = $days;

    foreach ($string as $k => &$v) {
        if (isset($diff->$k)) {
            $value = $diff->$k;
            if ($value > 0) {
                $v = $value . ' ' . $v . ($value > 1 ? 's' : '');
            } else {
                unset($string[$k]);
            }
        } else {
            unset($string[$k]);
        }
    }

    if (!$full) $string = array_slice($string, 0, 1);
    return $string ? implode(', ', $string) . ' ago' : 'just now';
}
?>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>