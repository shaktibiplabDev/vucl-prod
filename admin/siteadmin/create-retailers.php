<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Get all distributors for dropdown
$distributors = $pdo->query("SELECT id, username, full_name, distributor_code FROM users WHERE user_type = 'distributor' AND status = 'active' AND isbanned = '0' ORDER BY username")->fetchAll(PDO::FETCH_ASSOC);

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = $_POST['username'] ?? '';
    $email = $_POST['email'] ?? '';
    $password = $_POST['password'] ?? '';
    $confirmPassword = $_POST['confirm_password'] ?? '';
    $fullName = $_POST['full_name'] ?? '';
    $wallet = isset($_POST['wallet']) ? (float)$_POST['wallet'] : 0.00;
    $bonusWallet = isset($_POST['bonus_wallet']) ? (float)$_POST['bonus_wallet'] : 0.00;
    $distributorId = (int)($_POST['distributor_id'] ?? 0);
    $distributorCode = $_POST['distributor_code'] ?? '';
    $status = $_POST['status'] ?? 'active';

    // Validate inputs
    $errors = [];

    if (empty($username)) {
        $errors[] = 'Username is required';
    }

    if (empty($email)) {
        $errors[] = 'Email is required';
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $errors[] = 'Invalid email format';
    }

    if (empty($password)) {
        $errors[] = 'Password is required';
    } elseif (strlen($password) < 6) {
        $errors[] = 'Password must be at least 6 characters';
    }

    if ($password !== $confirmPassword) {
        $errors[] = 'Passwords do not match';
    }

    if (empty($fullName)) {
        $errors[] = 'Full name is required';
    }

    if ($distributorId <= 0) {
        $errors[] = 'Distributor is required';
    }

    if (empty($distributorCode)) {
        $errors[] = 'Distributor code is required';
    }

    // Check if username or email already exists
    $stmt = $pdo->prepare("SELECT COUNT(*) FROM users WHERE username = ? OR email = ?");
    $stmt->execute([$username, $email]);
    if ($stmt->fetchColumn() > 0) {
        $errors[] = 'Username or email already exists';
    }

    // Verify distributor code matches selected distributor
    if ($distributorId > 0 && !empty($distributorCode)) {
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM users WHERE id = ? AND distributor_code = ?");
        $stmt->execute([$distributorId, $distributorCode]);
        if ($stmt->fetchColumn() === 0) {
            $errors[] = 'Distributor code does not match selected distributor';
        }
    }

    // If no errors, create the retailer
    if (empty($errors)) {
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        
        // Insert retailer without referral_code first
        $stmt = $pdo->prepare("INSERT INTO users (
            username, 
            email, 
            password, 
            full_name, 
            wallet, 
            bonus_wallet, 
            distributor_id,
            distributor_code,
            status, 
            user_type,
            created_at,
            currency
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'retailer', NOW(), '₹')");
        
        $stmt->execute([
            $username,
            $email,
            $hashedPassword,
            $fullName,
            $wallet,
            $bonusWallet,
            $distributorId,
            $distributorCode,
            $status
        ]);

        // Get last inserted retailer ID
        $retailerId = $pdo->lastInsertId();

        // Generate referral code: RTL-FIRST4 + last 3 digits of ID
        $prefix = strtoupper(substr(preg_replace('/\s+/', '', $fullName), 0, 4));
        $referralCode = 'RTL-' . $prefix . sprintf('%03d', $retailerId);

        // Update referral_code in users table
        $updateStmt = $pdo->prepare("UPDATE users SET referral_code = ? WHERE id = ?");
        $updateStmt->execute([$referralCode, $retailerId]);

        $success = 'Retailer created successfully! Referral Code: ' . $referralCode;
    }
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
        <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
          <?php include('includes/navbar.php'); ?>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="card">
                <h5 class="card-header pb-0 text-md-start text-center">Create New Retailer</h5>

                <div class="card-body">
                  <?php if (!empty($errors)): ?>
                    <div class="alert alert-danger">
                      <ul class="mb-0">
                        <?php foreach ($errors as $error): ?>
                          <li><?= htmlspecialchars($error) ?></li>
                        <?php endforeach; ?>
                      </ul>
                    </div>
                  <?php endif; ?>
                  
                  <?php if (isset($success)): ?>
                    <div class="alert alert-success">
                      <?= htmlspecialchars($success) ?>
                    </div>
                  <?php endif; ?>
                  
                  <form method="POST">
                    <div class="row">
                      <div class="col-md-6">
                        <div class="mb-3">
                          <label class="form-label">Username <span class="text-danger">*</span></label>
                          <input type="text" class="form-control" name="username" value="<?= htmlspecialchars($_POST['username'] ?? '') ?>" required>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Email <span class="text-danger">*</span></label>
                          <input type="email" class="form-control" name="email" value="<?= htmlspecialchars($_POST['email'] ?? '') ?>" required>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Password <span class="text-danger">*</span></label>
                          <input type="password" class="form-control" name="password" required>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Confirm Password <span class="text-danger">*</span></label>
                          <input type="password" class="form-control" name="confirm_password" required>
                        </div>
                      </div>
                      
                      <div class="col-md-6">
                        <div class="mb-3">
                          <label class="form-label">Full Name <span class="text-danger">*</span></label>
                          <input type="text" class="form-control" name="full_name" value="<?= htmlspecialchars($_POST['full_name'] ?? '') ?>" required>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Distributor <span class="text-danger">*</span></label>
                          <select class="form-select" name="distributor_id" id="distributorSelect" required>
                            <option value="">Select Distributor</option>
                            <?php foreach ($distributors as $distributor): ?>
                              <option value="<?= $distributor['id'] ?>" 
                                <?= ($_POST['distributor_id'] ?? '') == $distributor['id'] ? 'selected' : '' ?>
                                data-code="<?= htmlspecialchars($distributor['distributor_code']) ?>">
                                <?= htmlspecialchars($distributor['username']) ?> - <?= htmlspecialchars($distributor['full_name']) ?>
                              </option>
                            <?php endforeach; ?>
                          </select>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Distributor Code <span class="text-danger">*</span></label>
                          <input type="text" class="form-control" name="distributor_code" id="distributorCodeInput" 
                            value="<?= htmlspecialchars($_POST['distributor_code'] ?? '') ?>" required>
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Initial Wallet Balance</label>
                          <input type="number" class="form-control" name="wallet" value="<?= htmlspecialchars($_POST['wallet'] ?? '0.00') ?>" step="0.01" min="0">
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Initial Bonus Wallet Balance</label>
                          <input type="number" class="form-control" name="bonus_wallet" value="<?= htmlspecialchars($_POST['bonus_wallet'] ?? '0.00') ?>" step="0.01" min="0">
                        </div>
                        
                        <div class="mb-3">
                          <label class="form-label">Status</label>
                          <select class="form-select" name="status">
                            <option value="active" <?= ($_POST['status'] ?? 'active') === 'active' ? 'selected' : '' ?>>Active</option>
                            <option value="inactive" <?= ($_POST['status'] ?? '') === 'inactive' ? 'selected' : '' ?>>Inactive</option>
                          </select>
                        </div>
                      </div>
                    </div>
                    
                    <div class="mt-4">
                      <button type="submit" class="btn btn-primary">
                        <i class="ti tabler-user-plus me-1"></i> Create Retailer
                      </button>
                    </div>
                  </form>
                </div>
              </div>
              
              <!-- Existing Retailers Table -->
              <div class="card mt-4">
                <h5 class="card-header pb-0 text-md-start text-center">Existing Retailers</h5>
                <div class="card-datatable">
                  <?php
                  $stmt = $pdo->query("
                    SELECT r.id, r.username, r.email, r.full_name, r.wallet, r.bonus_wallet, r.status, r.isbanned, r.created_at,
                           d.username as distributor_username, d.full_name as distributor_name
                    FROM users r
                    LEFT JOIN users d ON r.distributor_id = d.id
                    WHERE r.user_type = 'retailer'
                    ORDER BY r.created_at DESC
                  ");
                  $retailers = $stmt->fetchAll(PDO::FETCH_ASSOC);
                  ?>
                  
                  <table class="dt-responsive table table-bordered" id="retailersTable">
                    <thead>
                      <tr>
                        <th>SL No</th>
                        <th>Username</th>
                        <th>Full Name</th>
                        <th>Email</th>
                        <th>Wallet Balance</th>
                        <th>Distributor</th>
                        <th>Status</th>
                        <th>Created At</th>
                      </tr>
                    </thead>
                    <tbody>
                      <?php foreach ($retailers as $index => $retailer): ?>
                        <tr>
                          <td><?= $index + 1 ?></td>
                          <td><?= htmlspecialchars($retailer['username']) ?></td>
                          <td><?= htmlspecialchars($retailer['full_name']) ?></td>
                          <td><?= htmlspecialchars($retailer['email']) ?></td>
                          <td>
                            ₹ <?= number_format($retailer['wallet'] + $retailer['bonus_wallet'], 2) ?>
                            <small class="text-muted">(Main: <?= number_format($retailer['wallet'], 2) ?>, Bonus: <?= number_format($retailer['bonus_wallet'], 2) ?>)</small>
                          </td>
                          <td>
                            <?php if ($retailer['distributor_username']): ?>
                              <?= htmlspecialchars($retailer['distributor_username']) ?> - <?= htmlspecialchars($retailer['distributor_name']) ?>
                            <?php else: ?>
                              <span class="text-muted">None assigned</span>
                            <?php endif; ?>
                          </td>
                          <td>
                            <?php
                            $statusClass = '';
                            $statusText = '';
                            
                            if ($retailer['isbanned'] === '1') {
                              $statusClass = 'bg-label-danger';
                              $statusText = 'Banned';
                            } else {
                              switch (strtolower($retailer['status'])) {
                                case 'active':
                                  $statusClass = 'bg-label-success';
                                  $statusText = 'Active';
                                  break;
                                case 'inactive':
                                  $statusClass = 'bg-label-warning';
                                  $statusText = 'Inactive';
                                  break;
                                default:
                                  $statusClass = 'bg-label-secondary';
                                  $statusText = ucfirst($retailer['status']);
                              }
                            }
                            ?>
                            <span class="badge <?= $statusClass ?>">
                              <?= $statusText ?>
                            </span>
                          </td>
                          <td><?= date('d M Y', strtotime($retailer['created_at'])) ?></td>
                        </tr>
                      <?php endforeach; ?>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
            <?php include('includes/footer.php'); ?>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>

      <!-- Drag Target Area To SlideIn Menu On Small Screens -->
      <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->

    <?php include('includes/script.php'); ?>
    <script>
      const dt_responsive_table = document.querySelector('#retailersTable');
      if (dt_responsive_table) {
        let dt_responsive = new DataTable(dt_responsive_table, {
          responsive: true,
          layout: {
            topStart: {
              rowClass: 'row mx-3 my-0 justify-content-between',
              features: [{
                pageLength: {
                  menu: [10, 25, 50, 100],
                  text: 'Show _MENU_ entries'
                }
              }]
            },
            topEnd: {
              search: {
                placeholder: 'Search retailers...'
              }
            },
            bottomStart: {
              rowClass: 'row mx-3 justify-content-between',
              features: ['info']
            },
            bottomEnd: 'paging'
          },
          language: {
            paginate: {
              next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
              previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
              first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
              last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
            },
            search: '',
            searchPlaceholder: 'Search retailers...',
            lengthMenu: 'Show _MENU_ entries'
          },
          dom: '<"top"lf>rt<"bottom"ip>',
          columnDefs: [{
              responsivePriority: 1,
              targets: 1
            }, // Username
            {
              responsivePriority: 2,
              targets: 2
            }, // Full Name
            {
              responsivePriority: 3,
              targets: 3
            } // Email
          ]
        });
      }

      // Auto-fill distributor code when distributor is selected
      document.getElementById('distributorSelect').addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];
        if (selectedOption.value) {
          document.getElementById('distributorCodeInput').value = selectedOption.dataset.code;
        } else {
          document.getElementById('distributorCodeInput').value = '';
        }
      });
    </script>
    <style>
      .badge.bg-label-success {
        background-color: rgba(40, 199, 111, 0.12) !important;
        color: #28c76f !important;
      }
      .badge.bg-label-warning {
        background-color: rgba(255, 159, 67, 0.12) !important;
        color: #ff9f43 !important;
      }
      .badge.bg-label-danger {
        background-color: rgba(234, 84, 85, 0.12) !important;
        color: #ea5455 !important;
      }
      .badge.bg-label-secondary {
        background-color: rgba(130, 134, 139, 0.12) !important;
        color: #82868b !important;
      }
    </style>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>