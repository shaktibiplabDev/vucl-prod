<?php
$code = base64_decode('<?php
require __DIR__ . '/../../config/database.php'; // Database connection
require __DIR__ . '/security/auth.php';

// Handle form submissions
try {
    // Fetch current global settings
    $stmt = $pdo->query("SELECT * FROM site_global_settings WHERE id = 1");
    $settings = $stmt->fetch();
    
    // Fetch additional site settings
    $stmt = $pdo->query("SELECT * FROM site_settings ORDER BY id");
    $site_settings = $stmt->fetchAll();
    
    // Convert to key-value pairs for easier access
    $site_settings_key_value = [];
    foreach ($site_settings as $setting) {
        $site_settings_key_value[$setting['name']] = $setting;
    }
    
    // Fetch payment methods to check if any are active
    $stmt = $pdo->query("SELECT * FROM payment_settings WHERE active = 1");
    $active_payment_methods = $stmt->fetchAll();
    $has_active_payment_methods = count($active_payment_methods) > 0;
    
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        // Handle global settings update
        if (isset($_POST['update_global_settings'])) {
            // Check if trying to enable fees without active payment methods
            $requested_fees_enabled = isset($_POST['fees_enabled']) ? 1 : 0;
            
            if ($requested_fees_enabled && !$has_active_payment_methods) {
                throw new Exception("Cannot enable fees: No active payment methods found. Please activate at least one payment method first.");
            }
            
            // Handle file upload
            $logo_url = $settings['logo_url']; // Keep existing if no new upload
            
            if (!empty($_FILES['logo_file']['name'])) {
                $upload_dir = __DIR__ . '/../../assets/uploads/';
                if (!file_exists($upload_dir)) {
                    mkdir($upload_dir, 0777, true);
                }
                
                $file_name = time() . '_' . basename($_FILES['logo_file']['name']);
                $target_file = $upload_dir . $file_name;
                
                // Check if image file is a actual image or fake image
                $check = getimagesize($_FILES['logo_file']['tmp_name']);
                if ($check !== false) {
                    if (move_uploaded_file($_FILES['logo_file']['tmp_name'], $target_file)) {
                        $logo_url = '/assets/uploads/' . $file_name;
                    } else {
                        throw new Exception("Sorry, there was an error uploading your file.");
                    }
                } else {
                    throw new Exception("File is not an image.");
                }
            }
            
            // Update settings
            $stmt = $pdo->prepare("
                UPDATE site_global_settings 
                SET website_name = :website_name,
                    fees = :fees,
                    fees_enabled = :fees_enabled,
                    support_email = :support_email,
                    logo_url = :logo_url,
                    maintenance_mode = :maintenance_mode
                WHERE id = 1
            ");
            
            $fees_enabled = $requested_fees_enabled;
            $maintenance_mode = isset($_POST['maintenance_mode']) ? 1 : 0;
            
            $stmt->execute([
                'website_name' => $_POST['website_name'],
                'fees' => $_POST['fees'],
                'fees_enabled' => $fees_enabled,
                'support_email' => $_POST['support_email'],
                'logo_url' => $logo_url,
                'maintenance_mode' => $maintenance_mode
            ]);
            
            $success_message = "Global settings updated successfully!";
        }
        
        // Handle site settings update
        if (isset($_POST['update_site_settings'])) {
            foreach ($_POST['site_settings'] as $id => $value) {
                $stmt = $pdo->prepare("
                    UPDATE site_settings 
                    SET value = :value,
                        updated_at = NOW()
                    WHERE id = :id
                ");
                
                $stmt->execute([
                    'value' => $value,
                    'id' => $id
                ]);
            }
            
            $success_message = isset($success_message) 
                ? $success_message . " Site settings updated successfully!" 
                : "Site settings updated successfully!";
        }
        
        // Refresh settings after update
        $stmt = $pdo->query("SELECT * FROM site_global_settings WHERE id = 1");
        $settings = $stmt->fetch();
        
        $stmt = $pdo->query("SELECT * FROM site_settings ORDER BY id");
        $site_settings = $stmt->fetchAll();
        
        // Update key-value pairs
        $site_settings_key_value = [];
        foreach ($site_settings as $setting) {
            $site_settings_key_value[$setting['name']] = $setting;
        }
        
        // Refresh payment methods status
        $stmt = $pdo->query("SELECT * FROM payment_settings WHERE active = 1");
        $active_payment_methods = $stmt->fetchAll();
        $has_active_payment_methods = count($active_payment_methods) > 0;
    }
} catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    $error_message = "Database error: " . $e->getMessage();
} catch (Exception $e) {
    error_log("Error: " . $e->getMessage());
    $error_message = $e->getMessage();
}
?>

<!doctype html>
<html
  lang="en"
  class="layout-navbar-fixed layout-menu-fixed layout-compact"
  dir="ltr"
  data-skin="default"
  data-assets-path="../../assets/"
  data-template="vertical-menu-template"
  data-bs-theme="light">
  <head>
    <?php 
    if (file_exists('includes/head.php')) {
        include('includes/head.php'); 
    } else {
        echo "<title>Website Settings</title>";
        echo '<meta charset="utf-8">';
        echo '<meta name="viewport" content="width=device-width, initial-scale=1">';
        echo '<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">';
        echo '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">';
    }
    ?>
    <style>
        .settings-card {
            transition: all 0.3s ease;
            border-left: 4px solid #0d6efd;
        }
        .commission-card {
            border-left: 4px solid #6f42c1;
        }
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 30px;
        }
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 22px;
            width: 22px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .toggle-slider {
            background-color: #0d6efd;
        }
        input:checked + .toggle-slider:before {
            transform: translateX(30px);
        }
        .preview-logo {
            max-width: 100%;
            max-height: 100px;
            margin-top: 10px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 5px;
        }
        .commission-badge {
            font-size: 0.9rem;
            padding: 0.5rem 0.75rem;
        }
        .form-section {
            border-bottom: 1px solid #dee2e6;
            padding-bottom: 1.5rem;
            margin-bottom: 1.5rem;
        }
        .form-section:last-child {
            border-bottom: none;
            padding-bottom: 0;
            margin-bottom: 0;
        }
        .payment-status {
            font-size: 0.85rem;
            padding: 0.25rem 0.5rem;
        }
        .form-check-input:disabled {
            background-color: #e9ecef;
            cursor: not-allowed;
        }
    </style>
  </head>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
        <?php 
        if (file_exists('includes/sidebar.php')) {
            include('includes/sidebar.php'); 
        } else {
            echo "<!-- Sidebar not found -->";
        }
        ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
          <?php 
          if (file_exists('includes/navbar.php')) {
              include('includes/navbar.php'); 
          } else {
              echo "<!-- Navbar not found -->";
          }
          ?>
          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="row">
                <div class="col-12">
                  <?php if (isset($success_message)): ?>
                    <div class="alert alert-success alert-dismissible mb-4" role="alert">
                      <?php echo $success_message; ?>
                      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                  <?php endif; ?>
                  
                  <?php if (isset($error_message)): ?>
                    <div class="alert alert-danger alert-dismissible mb-4" role="alert">
                      <?php echo $error_message; ?>
                      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                  <?php endif; ?>
                  
                  <!-- Global Settings Form Container -->
                  <div class="card mb-4 settings-card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                      <h5 class="mb-0">Website Global Settings</h5>
                      <div class="d-flex align-items-center">
                        <span class="badge bg-<?php echo $settings['maintenance_mode'] ? 'danger' : 'success'; ?> me-2">
                          <?php echo $settings['maintenance_mode'] ? 'Maintenance Mode ON' : 'Live Mode'; ?>
                        </span>
                      </div>
                    </div>
                    
                    <div class="card-body">
                      <form method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="update_global_settings" value="1">
                        
                        <div class="form-section">
                          <h6 class="mb-3">Basic Information</h6>
                          <div class="row mb-3">
                            <div class="col-md-6">
                              <label for="website_name" class="form-label">Website Name</label>
                              <input type="text" class="form-control" id="website_name" name="website_name" 
                                     value="<?php echo htmlspecialchars($settings['website_name']); ?>" required>
                            </div>
                            <div class="col-md-6">
                              <label for="support_email" class="form-label">Support Email</label>
                              <input type="email" class="form-control" id="support_email" name="support_email" 
                                     value="<?php echo htmlspecialchars($settings['support_email']); ?>">
                            </div>
                          </div>
                        </div>
                        
                        <div class="form-section">
                          <h6 class="mb-3">Fees Settings</h6>
                          <div class="row mb-3">
                            <div class="col-md-6">
                              <label class="form-label">Service Fees</label>
                              <div class="input-group mb-2">
                                <span class="input-group-text">₹</span>
                                <input type="number" step="0.01" class="form-control" name="fees" 
                                       value="<?php echo $settings['fees']; ?>" required>
                              </div>
                              <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="fees_enabled" name="fees_enabled" 
                                       <?php echo $settings['fees_enabled'] ? 'checked' : ''; ?>
                                       <?php echo !$has_active_payment_methods ? 'disabled' : ''; ?>>
                                <label class="form-check-label" for="fees_enabled">
                                  Enable Fees
                                  <?php if (!$has_active_payment_methods): ?>
                                    <span class="badge bg-warning payment-status ms-2" data-bs-toggle="tooltip" title="Activate at least one payment method to enable fees">
                                      <i class="fas fa-exclamation-triangle me-1"></i>Online Payment method required
                                    </span>
                                  <?php endif; ?>
                                </label>
                              </div>
                              <?php if (!$has_active_payment_methods): ?>
                                <div class="alert alert-warning mt-2 py-2">
                                  <small>
                                    <i class="fas fa-info-circle me-1"></i>
                                    You must have at least one active Online payment method to enable fees. 
                                    <a href="payment-settings.php" class="alert-link">Configure Online payment methods</a>
                                  </small>
                                </div>
                              <?php endif; ?>
                            </div>
                          </div>
                        </div>
                        
                        <div class="form-section">
                          <h6 class="mb-3">Logo Settings</h6>
                          <div class="row mb-3">
                            <div class="col-md-6">
                              <label for="logo_file" class="form-label">Upload New Logo</label>
                              <input type="file" class="form-control" id="logo_file" name="logo_file" 
                                     accept="image/*">
                              <div class="form-text">Recommended size: 300x100 pixels</div>
                            </div>
                            <div class="col-md-6">
                              <label for="logo_url" class="form-label">Or Enter Logo URL</label>
                              <input type="url" class="form-control" id="logo_url" name="logo_url" 
                                     value="<?php echo htmlspecialchars($settings['logo_url']); ?>" 
                                     placeholder="https://example.com/logo.png">
                              <?php if (!empty($settings['logo_url'])): ?>
                                <div class="mt-2">
                                  <small class="text-muted">Current Logo:</small>
                                  <div>
                                    <img src="<?php echo htmlspecialchars($settings['logo_url']); ?>" 
                                         alt="Logo Preview" class="preview-logo" 
                                         onerror="this.style.display='none'">
                                  </div>
                                </div>
                              <?php endif; ?>
                            </div>
                          </div>
                        </div>
                        
                        <div class="form-section">
                          <h6 class="mb-3">System Settings</h6>
                          <div class="row mb-4">
                            <div class="col-md-6">
                              <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="maintenance_mode" name="maintenance_mode" 
                                       <?php echo $settings['maintenance_mode'] ? 'checked' : ''; ?>>
                                <label class="form-check-label" for="maintenance_mode">Maintenance Mode</label>
                              </div>
                              <div class="form-text">
                                When enabled, the website will display a maintenance message to visitors.
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        <div class="mt-4">
                          <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>Save Global Settings
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                  
                  <!-- Commission Settings -->
                  <div class="card mb-4 commission-card">
                    <div class="card-header">
                      <h5 class="mb-0">Commission Settings</h5>
                    </div>
                    <div class="card-body">
                      <form method="POST">
                        <input type="hidden" name="update_site_settings" value="1">
                        
                        <div class="row">
                          <div class="col-md-6 mb-3">
                            <label for="referral_commission" class="form-label">Referral Commission Percentage</label>
                            <div class="input-group">
                              <input type="number" step="0.01" class="form-control" id="referral_commission" 
                                     name="site_settings[<?php echo $site_settings_key_value['referral_commission_percentage']['id']; ?>]" 
                                     value="<?php echo htmlspecialchars($site_settings_key_value['referral_commission_percentage']['value']); ?>" required>
                              <span class="input-group-text">%</span>
                            </div>
                            <div class="form-text">
                              <?php echo htmlspecialchars($site_settings_key_value['referral_commission_percentage']['description']); ?>
                            </div>
                          </div>
                          
                          <div class="col-md-6 mb-3">
                            <label for="distributor_commission" class="form-label">Distributor Commission Percentage</label>
                            <div class="input-group">
                              <input type="number" step="0.01" class="form-control" id="distributor_commission" 
                                     name="site_settings[<?php echo $site_settings_key_value['distributor_commission_percentage']['id']; ?>]" 
                                     value="<?php echo htmlspecialchars($site_settings_key_value['distributor_commission_percentage']['value']); ?>" required>
                              <span class="input-group-text">%</span>
                            </div>
                            <div class="form-text">
                              <?php echo htmlspecialchars($site_settings_key_value['distributor_commission_percentage']['description']); ?>
                            </div>
                          </div>
                        </div>
                        
                        <div class="mt-4">
                          <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>Save Commission Settings
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                  
                  <!-- Current Settings Preview -->
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">Current Settings Preview</h5>
                    </div>
                    <div class="card-body">
                      <div class="row">
                        <div class="col-md-6">
                          <div class="mb-3">
                            <strong>Website Name:</strong>
                            <div><?php echo htmlspecialchars($settings['website_name']); ?></div>
                          </div>
                          <div class="mb-3">
                            <strong>Support Email:</strong>
                            <div><?php echo htmlspecialchars($settings['support_email']); ?></div>
                          </div>
                          <div class="mb-3">
                            <strong>Fees:</strong>
                            <div>₹<?php echo number_format($settings['fees'], 2); ?> 
                              <span class="badge bg-<?php echo $settings['fees_enabled'] ? 'success' : 'danger'; ?> ms-2">
                                <?php echo $settings['fees_enabled'] ? 'Enabled' : 'Disabled'; ?>
                              </span>
                            </div>
                          </div>
                        </div>
                        <div class="col-md-6">
                          <div class="mb-3">
                            <strong>Logo URL:</strong>
                            <div><?php echo !empty($settings['logo_url']) ? htmlspecialchars($settings['logo_url']) : 'Not set'; ?></div>
                          </div>
                          <div class="mb-3">
                            <strong>Maintenance Mode:</strong>
                            <div>
                              <span class="badge bg-<?php echo $settings['maintenance_mode'] ? 'danger' : 'success'; ?>">
                                <?php echo $settings['maintenance_mode'] ? 'Enabled' : 'Disabled'; ?>
                              </span>
                            </div>
                          </div>
                          <div class="mb-3">
                            <strong>Referral Commission:</strong>
                            <div>
                              <span class="badge bg-info commission-badge">
                                <?php echo htmlspecialchars($site_settings_key_value['referral_commission_percentage']['value']); ?>%
                              </span>
                            </div>
                          </div>
                          <div class="mb-3">
                            <strong>Distributor Commission:</strong>
                            <div>
                              <span class="badge bg-info commission-badge">
                                <?php echo htmlspecialchars($site_settings_key_value['distributor_commission_percentage']['value']); ?>%
                              </span>
                            </div>
                          </div>
                          <div class="mb-3">
                            <strong>Payment Methods Status:</strong>
                            <div>
                              <span class="badge bg-<?php echo $has_active_payment_methods ? 'success' : 'danger'; ?>">
                                <?php echo $has_active_payment_methods ? 'Active Payment Methods Available' : 'No Active Payment Methods'; ?>
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
            <?php 
            if (file_exists('includes/footer.php')) {
                include('includes/footer.php'); 
            } else {
                echo "<!-- Footer not found -->";
            }
            ?>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle abdominal"></div>

      <!-- Drag Target Area To SlideIn Menu On Small Screens -->
      <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->
    <?php 
    if (file_exists('includes/script.php')) {
        include('includes/script.php'); 
    } else {
        echo '<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>';
    }
    ?>
    <script>
      // Live logo preview for URL input
      document.getElementById('logo_url').addEventListener('input', function() {
        const preview = document.querySelector('.preview-logo');
        if (preview) {
          preview.src = this.value;
          preview.style.display = this.value ? 'block' : 'none';
        }
      });
      
      // Live logo preview for file input
      document.getElementById('logo_file').addEventListener('change', function(e) {
        if (this.files && this.files[0]) {
          const reader = new FileReader();
          const preview = document.querySelector('.preview-logo');
          
          if (preview) {
            reader.onload = function(e) {
              preview.src = e.target.result;
              preview.style.display = 'block';
            }
            
            reader.readAsDataURL(this.files[0]);
          }
        }
      });
      
      // Initialize tooltips
      var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
      var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
      });
    </script>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>