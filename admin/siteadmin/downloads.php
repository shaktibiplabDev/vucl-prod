<?php
$code = base64_decode('PD9waHAKcmVxdWlyZSBfX0RJUl9fIC4gJy9zZWN1cml0eS9hdXRoLnBocCc7CnJlcXVpcmVfb25jZSByZWFscGF0aChfX0RJUl9fIC4gJy8uLi8uLi9jb25maWcvZGF0YWJhc2UucGhwJyk7CgokdXNlcl9pZCA9ICRfU0VTU0lPTlsndXNlcl9pZCddOwokc3RtdCA9ICRwZG8tPnByZXBhcmUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSA/Iik7CiRzdG10LT5leGVjdXRlKFskdXNlcl9pZF0pOwokdXNlciA9ICRzdG10LT5mZXRjaChQRE86OkZFVENIX0FTU09DKTsKCmlmICghJHVzZXIpIHsKICBoZWFkZXIoIkxvY2F0aW9uOiBsb2dvdXQucGhwIik7CiAgZXhpdDsKfQoKJGlzX2FkbWluID0gKCR1c2VyWyd1c2VyX3R5cGUnXSA9PT0gJ2FkbWluJyk7CgovLyBIYW5kbGUgZmlsZSB1cGxvYWQKJHVwbG9hZF9zdWNjZXNzID0gbnVsbDsKJHVwbG9hZF9lcnJvciA9IG51bGw7CgppZiAoJGlzX2FkbWluICYmICRfU0VSVkVSWydSRVFVRVNUX01FVEhPRCddID09PSAnUE9TVCcgJiYgaXNzZXQoJF9QT1NUWydhZGRfc29mdHdhcmUnXSkpIHsKICAgICRuYW1lID0gJF9QT1NUWyduYW1lJ107CiAgICAkZGVzY3JpcHRpb24gPSAkX1BPU1RbJ2Rlc2NyaXB0aW9uJ107CiAgICAkdmVyc2lvbiA9ICRfUE9TVFsndmVyc2lvbiddOwogICAgCiAgICAvLyBIYW5kbGUgZmlsZSB1cGxvYWQKICAgIGlmIChpc3NldCgkX0ZJTEVTWydzb2Z0d2FyZV9maWxlJ10pICYmICRfRklMRVNbJ3NvZnR3YXJlX2ZpbGUnXVsnZXJyb3InXSA9PT0gVVBMT0FEX0VSUl9PSykgewogICAgICAgICRmaWxlID0gJF9GSUxFU1snc29mdHdhcmVfZmlsZSddOwogICAgICAgICRvcmlnaW5hbF9maWxlX25hbWUgPSBiYXNlbmFtZSgkZmlsZVsnbmFtZSddKTsKICAgICAgICAkZmlsZV9leHRlbnNpb24gPSBwYXRoaW5mbygkb3JpZ2luYWxfZmlsZV9uYW1lLCBQQVRISU5GT19FWFRFTlNJT04pOwogICAgICAgICRmaWxlX25hbWUgPSB1bmlxaWQoKSAuICdfJyAuIHRpbWUoKSAuICcuJyAuICRmaWxlX2V4dGVuc2lvbjsKICAgICAgICAkdXBsb2FkX2RpciA9IHJlYWxwYXRoKF9fRElSX18gLiAnLy4uLy4uL3VwbG9hZHMvc29mdHdhcmUvJyk7CiAgICAgICAgCiAgICAgICAgLy8gQ3JlYXRlIGRpcmVjdG9yeSBpZiBpdCBkb2Vzbid0IGV4aXN0CiAgICAgICAgaWYgKCFmaWxlX2V4aXN0cygkdXBsb2FkX2RpcikpIHsKICAgICAgICAgICAgbWtkaXIoJHVwbG9hZF9kaXIsIDA3NzcsIHRydWUpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAkZmlsZV9wYXRoID0gJHVwbG9hZF9kaXIgLiAnLycgLiAkZmlsZV9uYW1lOwogICAgICAgIAogICAgICAgIC8vIFZhbGlkYXRlIGZpbGUgdHlwZSAoeW91IGNhbiBleHRlbmQgdGhpcyBsaXN0KQogICAgICAgICRhbGxvd2VkX2V4dGVuc2lvbnMgPSBbJ2V4ZScsICdtc2knLCAnemlwJywgJ3JhcicsICdkbWcnLCAncGtnJywgJ2RlYicsICdycG0nXTsKICAgICAgICBpZiAoIWluX2FycmF5KHN0cnRvbG93ZXIoJGZpbGVfZXh0ZW5zaW9uKSwgJGFsbG93ZWRfZXh0ZW5zaW9ucykpIHsKICAgICAgICAgICAgJHVwbG9hZF9lcnJvciA9ICJJbnZhbGlkIGZpbGUgdHlwZS4gQWxsb3dlZCB0eXBlczogIiAuIGltcGxvZGUoJywgJywgJGFsbG93ZWRfZXh0ZW5zaW9ucyk7CiAgICAgICAgfSBlbHNlaWYgKCRmaWxlWydzaXplJ10gPiA1MDAgKiAxMDI0ICogMTAyNCkgeyAvLyA1MDBNQiBsaW1pdAogICAgICAgICAgICAkdXBsb2FkX2Vycm9yID0gIkZpbGUgaXMgdG9vIGxhcmdlLiBNYXhpbXVtIHNpemUgaXMgNTAwTUIuIjsKICAgICAgICB9IGVsc2VpZiAobW92ZV91cGxvYWRlZF9maWxlKCRmaWxlWyd0bXBfbmFtZSddLCAkZmlsZV9wYXRoKSkgewogICAgICAgICAgICAvLyBGaWxlIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseSwgbm93IGFkZCB0byBkYXRhYmFzZQogICAgICAgICAgICAkZmlsZV9zaXplID0gZm9ybWF0RmlsZVNpemUoJGZpbGVbJ3NpemUnXSk7CiAgICAgICAgICAgICRkb3dubG9hZF9saW5rID0gJy91cGxvYWRzL3NvZnR3YXJlLycgLiAkZmlsZV9uYW1lOwogICAgICAgICAgICAKICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJJTlNFUlQgSU5UTyByZXF1aXJlZF9zb2Z0d2FyZSAobmFtZSwgZGVzY3JpcHRpb24sIGRvd25sb2FkX2xpbmssIHZlcnNpb24sIGZpbGVfc2l6ZSwgZmlsZV9uYW1lLCBvcmlnaW5hbF9maWxlX25hbWUpIFZBTFVFUyAoPywgPywgPywgPywgPywgPywgPykiKTsKICAgICAgICAgICAgaWYgKCRzdG10LT5leGVjdXRlKFskbmFtZSwgJGRlc2NyaXB0aW9uLCAkZG93bmxvYWRfbGluaywgJHZlcnNpb24sICRmaWxlX3NpemUsICRmaWxlX25hbWUsICRvcmlnaW5hbF9maWxlX25hbWVdKSkgewogICAgICAgICAgICAgICAgJHVwbG9hZF9zdWNjZXNzID0gIlNvZnR3YXJlIGFkZGVkIHN1Y2Nlc3NmdWxseSEiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJHVwbG9hZF9lcnJvciA9ICJGYWlsZWQgdG8gYWRkIHNvZnR3YXJlIHRvIGRhdGFiYXNlLiI7CiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHVwbG9hZGVkIGZpbGUgaWYgZGF0YWJhc2UgaW5zZXJ0aW9uIGZhaWxlZAogICAgICAgICAgICAgICAgdW5saW5rKCRmaWxlX3BhdGgpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHVwbG9hZF9lcnJvciA9ICJGYWlsZWQgdG8gdXBsb2FkIGZpbGUuIjsKICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgICR1cGxvYWRfZXJyb3IgPSAiUGxlYXNlIHNlbGVjdCBhIHZhbGlkIGZpbGUgdG8gdXBsb2FkLiI7CiAgICB9Cn0KCi8vIEhhbmRsZSBzb2Z0d2FyZSBkZWxldGlvbgppZiAoJGlzX2FkbWluICYmIGlzc2V0KCRfR0VUWydkZWxldGUnXSkpIHsKICAgICRzb2Z0d2FyZV9pZCA9ICRfR0VUWydkZWxldGUnXTsKICAgIAogICAgLy8gR2V0IGZpbGUgaW5mbyBiZWZvcmUgZGVsZXRpb24KICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiU0VMRUNUIGZpbGVfbmFtZSBGUk9NIHJlcXVpcmVkX3NvZnR3YXJlIFdIRVJFIGlkID0gPyIpOwogICAgJHN0bXQtPmV4ZWN1dGUoWyRzb2Z0d2FyZV9pZF0pOwogICAgJHNvZnR3YXJlID0gJHN0bXQtPmZldGNoKFBETzo6RkVUQ0hfQVNTT0MpOwogICAgCiAgICBpZiAoJHNvZnR3YXJlKSB7CiAgICAgICAgLy8gRGVsZXRlIGZyb20gZGF0YWJhc2UKICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIkRFTEVURSBGUk9NIHJlcXVpcmVkX3NvZnR3YXJlIFdIRVJFIGlkID0gPyIpOwogICAgICAgIGlmICgkc3RtdC0+ZXhlY3V0ZShbJHNvZnR3YXJlX2lkXSkpIHsKICAgICAgICAgICAgLy8gRGVsZXRlIHRoZSBmaWxlCiAgICAgICAgICAgICRmaWxlX3BhdGggPSByZWFscGF0aChfX0RJUl9fIC4gJy8uLi8uLi91cGxvYWRzL3NvZnR3YXJlLycpIC4gJy8nIC4gJHNvZnR3YXJlWydmaWxlX25hbWUnXTsKICAgICAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRmaWxlX3BhdGgpKSB7CiAgICAgICAgICAgICAgICB1bmxpbmsoJGZpbGVfcGF0aCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHVwbG9hZF9zdWNjZXNzID0gIlNvZnR3YXJlIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5ISI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHVwbG9hZF9lcnJvciA9ICJGYWlsZWQgdG8gZGVsZXRlIHNvZnR3YXJlIGZyb20gZGF0YWJhc2UuIjsKICAgICAgICB9CiAgICB9Cn0KCi8vIEhhbmRsZSB0b2dnbGUgYWN0aXZlIHN0YXR1cwppZiAoJGlzX2FkbWluICYmIGlzc2V0KCRfR0VUWyd0b2dnbGVfc3RhdHVzJ10pKSB7CiAgICAkc29mdHdhcmVfaWQgPSAkX0dFVFsndG9nZ2xlX3N0YXR1cyddOwogICAgCiAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIlVQREFURSByZXF1aXJlZF9zb2Z0d2FyZSBTRVQgaXNfYWN0aXZlID0gTk9UIGlzX2FjdGl2ZSBXSEVSRSBpZCA9ID8iKTsKICAgIGlmICgkc3RtdC0+ZXhlY3V0ZShbJHNvZnR3YXJlX2lkXSkpIHsKICAgICAgICAkdXBsb2FkX3N1Y2Nlc3MgPSAiU29mdHdhcmUgc3RhdHVzIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5ISI7CiAgICB9IGVsc2UgewogICAgICAgICR1cGxvYWRfZXJyb3IgPSAiRmFpbGVkIHRvIHVwZGF0ZSBzb2Z0d2FyZSBzdGF0dXMuIjsKICAgIH0KfQoKLy8gR2V0IGFsbCBzb2Z0d2FyZSAoYWRtaW4gc2VlcyBhbGwsIHVzZXJzIHNlZSBvbmx5IGFjdGl2ZSkKaWYgKCRpc19hZG1pbikgewogICAgJHNvZnR3YXJlX3N0bXQgPSAkcGRvLT5xdWVyeSgiU0VMRUNUICogRlJPTSByZXF1aXJlZF9zb2Z0d2FyZSBPUkRFUiBCWSBjcmVhdGVkX2F0IERFU0MiKTsKfSBlbHNlIHsKICAgICRzb2Z0d2FyZV9zdG10ID0gJHBkby0+cXVlcnkoIlNFTEVDVCAqIEZST00gcmVxdWlyZWRfc29mdHdhcmUgV0hFUkUgaXNfYWN0aXZlID0gMSBPUkRFUiBCWSBjcmVhdGVkX2F0IERFU0MiKTsKfQokc29mdHdhcmVfbGlzdCA9ICRzb2Z0d2FyZV9zdG10LT5mZXRjaEFsbChQRE86OkZFVENIX0FTU09DKTsKCi8vIEhlbHBlciBmdW5jdGlvbiB0byBmb3JtYXQgZmlsZSBzaXplCmZ1bmN0aW9uIGZvcm1hdEZpbGVTaXplKCRieXRlcykgewogICAgaWYgKCRieXRlcyA+PSAxMDczNzQxODI0KSB7CiAgICAgICAgcmV0dXJuIG51bWJlcl9mb3JtYXQoJGJ5dGVzIC8gMTA3Mzc0MTgyNCwgMikgLiAnIEdCJzsKICAgIH0gZWxzZWlmICgkYnl0ZXMgPj0gMTA0ODU3NikgewogICAgICAgIHJldHVybiBudW1iZXJfZm9ybWF0KCRieXRlcyAvIDEwNDg1NzYsIDIpIC4gJyBNQic7CiAgICB9IGVsc2VpZiAoJGJ5dGVzID49IDEwMjQpIHsKICAgICAgICByZXR1cm4gbnVtYmVyX2Zvcm1hdCgkYnl0ZXMgLyAxMDI0LCAyKSAuICcgS0InOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJGJ5dGVzIC4gJyBieXRlcyc7CiAgICB9Cn0KPz4KCjwhZG9jdHlwZSBodG1sPgo8aHRtbCBsYW5nPSJlbiIgY2xhc3M9ImxheW91dC1uYXZiYXItZml4ZWQgbGF5b3V0LW1lbnUtZml4ZWQgbGF5b3V0LWNvbXBhY3QiIGRpcj0ibHRyIiBkYXRhLXNraW49ImRlZmF1bHQiIGRhdGEtYXNzZXRzLXBhdGg9Ii4uLy4uL2Fzc2V0cy8iIGRhdGEtdGVtcGxhdGU9InZlcnRpY2FsLW1lbnUtdGVtcGxhdGUiIGRhdGEtYnMtdGhlbWU9ImxpZ2h0Ij4KICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9oZWFkLnBocCcpOyA/PgoKICA8Ym9keT4KICAgIDwhLS0gTGF5b3V0IHdyYXBwZXIgLS0+CiAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtd3JhcHBlciBsYXlvdXQtY29udGVudC1uYXZiYXIiPgogICAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtY29udGFpbmVyIj4KICAgICAgICA8IS0tIE1lbnUgLS0+CiAgICAgICAgPD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvc2lkZWJhci5waHAnKTsgPz4KCiAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1tb2JpbGUtdG9nZ2xlciBkLXhsLW5vbmUgcm91bmRlZC0xIj4KICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJsYXlvdXQtbWVudS10b2dnbGUgbWVudS1saW5rIHRleHQtbGFyZ2UgdGV4dC1iZy1zZWNvbmRhcnkgcC0yIHJvdW5kZWQtMSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJ0aSB0YWJsZXItbWVudSBpY29uLWJhc2UiPjwvaT4KICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1jaGV2cm9uLXJpZ2h0IGljb24tYmFzZSI+PC9pPgogICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gLyBNZW51IC0tPgoKICAgICAgICA8IS0tIExheW91dCBjb250YWluZXIgLS0+CiAgICAgICAgPGRpdiBjbGFzcz0ibGF5b3V0LXBhZ2UiPgogICAgICAgICAgPCEtLSBOYXZiYXIgLS0+CiAgICAgICAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9uYXZiYXIucGhwJyk7ID8+CgogICAgICAgICAgPCEtLSAvIE5hdmJhciAtLT4KCiAgICAgICAgICA8IS0tIENvbnRlbnQgd3JhcHBlciAtLT4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtd3JhcHBlciI+CiAgICAgICAgICAgIDwhLS0gQ29udGVudCAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLXh4bCBmbGV4LWdyb3ctMSBjb250YWluZXItcC15Ij4KICAgICAgICAgICAgICA8IS0tIE5vdGlmaWNhdGlvbiBhbGVydHMgLS0+CiAgICAgICAgICAgICAgPD9waHAgaWYgKCR1cGxvYWRfc3VjY2Vzcyk6ID8+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1zdWNjZXNzIGFsZXJ0LWRpc21pc3NpYmxlIGZhZGUgc2hvdyIgcm9sZT0iYWxlcnQiPgogICAgICAgICAgICAgICAgICA8Pz0gJHVwbG9hZF9zdWNjZXNzID8+CiAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9ImFsZXJ0IiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8P3BocCBpZiAoJHVwbG9hZF9lcnJvcik6ID8+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIgYWxlcnQtZGlzbWlzc2libGUgZmFkZSBzaG93IiByb2xlPSJhbGVydCI+CiAgICAgICAgICAgICAgICAgIDw/PSAkdXBsb2FkX2Vycm9yID8+CiAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9ImFsZXJ0IiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBtYi00Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWhlYWRlciBkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4gYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibWItMCI+UmVxdWlyZWQgU29mdHdhcmUgZm9yIFRoaXMgV29yayBQb3J0YWw8L2g1PgogICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRpc19hZG1pbik6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBkYXRhLWJzLXRvZ2dsZT0ibW9kYWwiIGRhdGEtYnMtdGFyZ2V0PSIjYWRkU29mdHdhcmVNb2RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1wbHVzIG1lLTIiPjwvaT4gQWRkIFNvZnR3YXJlCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LWluZm8iPgogICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLWluZm8tY2lyY2xlIG1lLTIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgQWxsIHNvZnR3YXJlIGlzIGN1cnJlbnRseSBhdmFpbGFibGUgZm9yIGZyZWUgZG93bmxvYWQuCiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZm9yZWFjaCAoJHNvZnR3YXJlX2xpc3QgYXMgJHNvZnR3YXJlKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBjb2wtbGctNCBtYi00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgaC0xMDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiBhbGlnbi1pdGVtcy1zdGFydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNhcmQtdGl0bGUiPjw/PSBodG1sc3BlY2lhbGNoYXJzKCRzb2Z0d2FyZVsnbmFtZSddKSA/PjwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGlzX2FkbWluKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4taWNvbiIgZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ0aSB0YWJsZXItZG90cy12ZXJ0aWNhbCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duLW1lbnUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0iIGhyZWY9Ij90b2dnbGVfc3RhdHVzPTw/PSAkc29mdHdhcmVbJ2lkJ10gPz4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Pz0gJHNvZnR3YXJlWydpc19hY3RpdmUnXSA/ICdEZWFjdGl2YXRlJyA6ICdBY3RpdmF0ZScgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIHRleHQtZGFuZ2VyIiBocmVmPSI/ZGVsZXRlPTw/PSAkc29mdHdhcmVbJ2lkJ10gPz4iIG9uY2xpY2s9InJldHVybiBjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgc29mdHdhcmU/JykiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWxldGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9ImNhcmQtc3VidGl0bGUgbWItMiB0ZXh0LW11dGVkIj5WZXJzaW9uIDw/PSBodG1sc3BlY2lhbGNoYXJzKCRzb2Z0d2FyZVsndmVyc2lvbiddKSA/PjwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGV4dCI+PD89IGh0bWxzcGVjaWFsY2hhcnMoJHNvZnR3YXJlWydkZXNjcmlwdGlvbiddKSA/PjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC1tdXRlZCI+RmlsZSBzaXplOiA8Pz0gaHRtbHNwZWNpYWxjaGFycygkc29mdHdhcmVbJ2ZpbGVfc2l6ZSddKSA/Pjwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGlzX2FkbWluKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPlN0YXR1czogPD89ICRzb2Z0d2FyZVsnaXNfYWN0aXZlJ10gPyAnQWN0aXZlJyA6ICdJbmFjdGl2ZScgPz48L3NtYWxsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRzb2Z0d2FyZVsnZG93bmxvYWRfbGluayddKSA/PiIgY2xhc3M9ImJ0biBidG4tc3VjY2VzcyB3LTEwMCIgZG93bmxvYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0idGkgdGFibGVyLWRvd25sb2FkIG1lLTIiPjwvaT4gRG93bmxvYWQgTm93CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRmb3JlYWNoOyA/PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKGVtcHR5KCRzb2Z0d2FyZV9saXN0KSk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXdhcm5pbmciPk5vIHNvZnR3YXJlIHJlcXVpcmVtZW50cyBmb3VuZC48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0gLyBDb250ZW50IC0tPgoKICAgICAgICAgICAgPCEtLSBGb290ZXIgLS0+CiAgICAgICAgICAgIDw/cGhwIGluY2x1ZGUoJ2luY2x1ZGVzL2Zvb3Rlci5waHAnKTsgPz4KICAgICAgICAgICAgPCEtLSAvIEZvb3RlciAtLT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtYmFja2Ryb3AgZmFkZSI+PC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwhLS0gQ29udGVudCB3cmFwcGVyIC0tPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gLyBMYXlvdXQgcGFnZSAtLT4KICAgICAgPC9kaXY+CgogICAgICA8IS0tIE92ZXJsYXkgLS0+CiAgICAgIDxkaXYgY2xhc3M9ImxheW91dC1vdmVybGF5IGxheW91dC1tZW51LXRvZ2dsZSI+PC9kaXY+CgogICAgICA8IS0tIERyYWcgVGFyZ2V0IEFyZWEgVG8gU2xpZGVJbiBNZW51IE9uIFNtYWxsIFNjcmVlbnMgLS0+CiAgICAgIDxkaXYgY2xhc3M9ImRyYWctdGFyZ2V0Ij48L2Rpdj4KICAgIDwvZGl2PgogICAgPCEtLSAvIExheW91dCB3cmFwcGVyIC0tPgogICAgCiAgICA8IS0tIEFkZCBTb2Z0d2FyZSBNb2RhbCAtLT4KICAgIDw/cGhwIGlmICgkaXNfYWRtaW4pOiA/PgogICAgPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9ImFkZFNvZnR3YXJlTW9kYWwiIHRhYmluZGV4PSItMSIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtbGciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgICAgPGg1IGNsYXNzPSJtb2RhbC10aXRsZSI+QWRkIE5ldyBTb2Z0d2FyZTwvaDU+CiAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuLWNsb3NlIiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PC9idXR0b24+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCIgZW5jdHlwZT0ibXVsdGlwYXJ0L2Zvcm0tZGF0YSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBtYi0zIj4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibmFtZSIgY2xhc3M9ImZvcm0tbGFiZWwiPlNvZnR3YXJlIE5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9Im5hbWUiIG5hbWU9Im5hbWUiIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBtYi0zIj4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0idmVyc2lvbiIgY2xhc3M9ImZvcm0tbGFiZWwiPlZlcnNpb248L2xhYmVsPgogICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InZlcnNpb24iIG5hbWU9InZlcnNpb24iIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItMyI+CiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJkZXNjcmlwdGlvbiIgY2xhc3M9ImZvcm0tbGFiZWwiPkRlc2NyaXB0aW9uPC9sYWJlbD4KICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iZGVzY3JpcHRpb24iIG5hbWU9ImRlc2NyaXB0aW9uIiByb3dzPSIzIiByZXF1aXJlZD48L3RleHRhcmVhPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ic29mdHdhcmVfZmlsZSIgY2xhc3M9ImZvcm0tbGFiZWwiPlNvZnR3YXJlIEZpbGU8L2xhYmVsPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImZpbGUiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJzb2Z0d2FyZV9maWxlIiBuYW1lPSJzb2Z0d2FyZV9maWxlIiByZXF1aXJlZD4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tdGV4dCI+QWxsb3dlZCBmaWxlIHR5cGVzOiBleGUsIG1zaSwgemlwLCByYXIsIGRtZywgcGtnLCBkZWIsIHJwbS4gTWF4IHNpemU6IDUwME1CPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1sYWJlbC1zZWNvbmRhcnkiIGRhdGEtYnMtZGlzbWlzcz0ibW9kYWwiPkNhbmNlbDwvYnV0dG9uPgogICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBuYW1lPSJhZGRfc29mdHdhcmUiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiPkFkZCBTb2Z0d2FyZTwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDw/cGhwIGVuZGlmOyA/PgogICAgCiAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9zY3JpcHQucGhwJyk7ID8+CiAgPC9ib2R5Pgo8L2h0bWw+');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>