<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once(__DIR__ . '/../../config/database.php');

// Verify admin access
if ($_SESSION['user_type'] !== 'admin') {
  header('Location: /unauthorized.php');
  exit;
}

// Generate CSRF token
if (empty($_SESSION['csrf_token'])) {
  $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

// Process form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  // Verify CSRF token
  if (!isset($_POST['csrf_token']) || !hash_equals($_SESSION['csrf_token'], $_POST['csrf_token'])) {
    $_SESSION['error_message'] = "CSRF token validation failed.";
    header("Location: {$_SERVER['PHP_SELF']}");
    exit;
  }

  if (isset($_POST['action']) && isset($_POST['request_id'])) {
    $requestId = (int)$_POST['request_id'];
    $action = $_POST['action'];
    $adminNotes = $_POST['admin_notes'] ?? '';

    try {
      // Begin transaction
      $pdo->beginTransaction();

      // Get the request details
      $stmt = $pdo->prepare("SELECT * FROM withdrawal_requests WHERE id = ?");
      $stmt->execute([$requestId]);
      $request = $stmt->fetch(PDO::FETCH_ASSOC);

      if ($request) {
        if ($action === 'approve') {
          $deductStmt = $pdo->prepare("UPDATE users SET bonus_wallet = bonus_wallet - ? WHERE id = ? AND bonus_wallet >= ?");
          $deductStmt->execute([$request['amount'], $request['user_id'], $request['amount']]);

          if ($deductStmt->rowCount() === 0) {
            throw new Exception("Insufficient bonus wallet balance.");
          }

          $updateStmt = $pdo->prepare("UPDATE withdrawal_requests SET status = 'approved', admin_notes = ?, updated_at = NOW() WHERE id = ?");
          $updateStmt->execute([$adminNotes, $requestId]);

          $_SESSION['success_message'] = "Withdrawal request #{$requestId} has been approved and amount deducted from bonus wallet.";
        } elseif ($action === 'reject') {
          $updateStmt = $pdo->prepare("UPDATE withdrawal_requests SET status = 'rejected', admin_notes = ?, updated_at = NOW() WHERE id = ?");
          $updateStmt->execute([$adminNotes, $requestId]);
          $refundStmt = $pdo->prepare("UPDATE users SET wallet = wallet + ? WHERE id = ?");
          $refundStmt->execute([$request['amount'], $request['user_id']]);
          $_SESSION['success_message'] = "Withdrawal request #{$requestId} has been rejected and amount refunded.";
        } elseif ($action === 'process') {
          $updateStmt = $pdo->prepare("UPDATE withdrawal_requests SET status = 'processed', admin_notes = ?, updated_at = NOW() WHERE id = ?");
          $updateStmt->execute([$adminNotes, $requestId]);
          $_SESSION['success_message'] = "Withdrawal request #{$requestId} has been marked as processed.";
        }

        $pdo->commit();
        header("Location: {$_SERVER['PHP_SELF']}");
        exit;
      } else {
        throw new Exception("Withdrawal request not found");
      }
    } catch (Exception $e) {
      $pdo->rollBack();
      $_SESSION['error_message'] = "Error processing request: " . $e->getMessage();
      header("Location: {$_SERVER['PHP_SELF']}");
      exit;
    }
  }
}

// Calculate aggregate statistics
$stmt = $pdo->prepare("SELECT SUM(amount) as total_pending FROM withdrawal_requests WHERE status = 'pending'");
$stmt->execute();
$totalPending = $stmt->fetchColumn() ?: 0;

$stmt = $pdo->prepare("SELECT SUM(amount) as total_rejected FROM withdrawal_requests WHERE status = 'rejected'");
$stmt->execute();
$totalRejected = $stmt->fetchColumn() ?: 0;

$stmt = $pdo->prepare("SELECT SUM(amount) as total_approved FROM withdrawal_requests WHERE status = 'approved'");
$stmt->execute();
$totalApproved = $stmt->fetchColumn() ?: 0;

// Get filter status if set
$statusFilter = isset($_GET['status']) && in_array($_GET['status'], ['pending', 'approved', 'rejected', 'processed']) ? $_GET['status'] : null;
// Get filter username if set
$usernameFilter = isset($_GET['username'])? ("%" . $_GET['username'] . "%") : null;

// Get all withdrawal requests with pagination
$page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
$perPage = 10;
$offset = ($page - 1) * $perPage;

try {
  $query = "SELECT wr.*, u.full_name, u.email, u.username, u.profile_image, phone_number as user_phone 
            FROM withdrawal_requests wr
            JOIN users u ON wr.user_id = u.id";
  $countQuery = "SELECT COUNT(*) FROM withdrawal_requests";
  if ($statusFilter) {
    $query .= " WHERE wr.status = :status";
    $countQuery .= " WHERE status = :status";
  }

  if ($usernameFilter) {
    if ($statusFilter) {
      $query .= " AND u.username LIKE :username";
    } else {
      $query .= " WHERE u.username LIKE :username";
    }
  }

  $query .= " ORDER BY wr.created_at DESC LIMIT :limit OFFSET :offset";

  $countStmt = $pdo->prepare($countQuery);
  if ($statusFilter) {
    $countStmt->bindParam(':status', $statusFilter);
  }
  $countStmt->execute();
  $total = $countStmt->fetchColumn();

  $stmt = $pdo->prepare($query);
  if ($statusFilter) {
    $stmt->bindParam(':status', $statusFilter);
  }
  if ($usernameFilter) {
    $stmt->bindParam(':username', $usernameFilter);
  }
  $stmt->bindValue(':limit', $perPage, PDO::PARAM_INT);
  $stmt->bindValue(':offset', $offset, PDO::PARAM_INT);
  $stmt->execute();
  $withdrawals = $stmt->fetchAll(PDO::FETCH_ASSOC);

  $totalPages = ceil($total / $perPage);
} catch (PDOException $e) {
  $withdrawals = [];
  $_SESSION['error_message'] = "Failed to load withdrawal requests: " . $e->getMessage();
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Admin - Withdrawal Requests</title>
  <?php include('includes/head.php'); ?>
  <style>
    /* Payment Method Tabs (for consistency) */
    .nav-pills .nav-link {
      border-radius: 6px;
      padding: 0.5rem 1rem;
      margin-right: 8px;
      color: #6f6b7d;
      font-weight: 500;
      border: 1px solid transparent;
    }

    .nav-pills .nav-link.active {
      background-color: rgba(115, 103, 240, 0.1);
      color: #7367F0;
      border-color: #7367F0;
    }

    .nav-pills .nav-link:not(.active):hover {
      color: #7367F0;
    }

    /* Form Input Styling */
    .form-control:focus {
      border-color: #7367F0;
      box-shadow: 0 0 0 0.2rem rgba(115, 103, 240, 0.25);
    }

    /* Recent Withdrawals Table */
    .recent-withdrawals .table {
      margin-bottom: 0;
    }

    .recent-withdrawals .badge {
      font-weight: 500;
      padding: 0.35rem 0.5rem;
    }

    .badge-pending {
      background-color: rgba(255, 159, 67, 0.12);
      color: #ff9f43;
    }

    .badge-approved {
      background-color: rgba(40, 199, 111, 0.12);
      color: #28c76f;
    }

    .badge-rejected {
      background-color: rgba(234, 84, 85, 0.12);
      color: #ea5455;
    }

    .badge-processed {
      background-color: rgba(0, 207, 232, 0.12);
      color: #00cfe8;
    }
  </style>
</head>

<body>
  <!-- Layout wrapper -->
  <div class="layout-wrapper layout-content-navbar">
    <div class="layout-container">
      <!-- Menu -->
      <?php include('includes/sidebar.php'); ?>

      <div class="menu-mobile-toggler d-xl-none rounded-1">
        <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
          <i class="ti tabler-menu icon-base"></i>
          <i class="ti tabler-chevron-right icon-base"></i>
        </a>
      </div>

      <!-- Layout container -->
      <div class="layout-page">
        <!-- Navbar -->
        <?php include('includes/navbar.php'); ?>

        <!-- Content wrapper -->
        <div class="content-wrapper">
          <!-- Content -->
          <div class="container-xxl flex-grow-1 container-p-y">
            <div class="row">
              <div class="col-md-12">
                <!-- Aggregate Statistics Cards -->
                <div class="row mb-4">
                  <div class="col-md-4 mb-3">
                    <div class="card bg-warning text-white h-100">
                      <div class="card-body d-flex flex-column">
                        <h5 class="card-title">Total Pending</h5>
                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency'] ?? '₹') ?> <?= number_format($totalPending, 2) ?></h3>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-4 mb-3">
                    <div class="card bg-success text-white h-100">
                      <div class="card-body d-flex flex-column">
                        <h5 class="card-title">Total Approved</h5>
                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency'] ?? '₹') ?> <?= number_format($totalApproved, 2) ?></h3>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-4 mb-3">
                    <div class="card bg-danger text-white h-100">
                      <div class="card-body d-flex flex-column">
                        <h5 class="card-title">Total Rejected</h5>
                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency'] ?? '₹') ?> <?= number_format($totalRejected, 2) ?></h3>
                      </div>
                    </div>
                  </div>

                </div>

                <!-- Withdrawal Requests Card -->
                <div class="card mb-6 recent-withdrawals">
                  <h5 class="card-header bg-transparent">Withdrawal Requests</h5>
                  <div class="card-body">
                    <!-- Flash Messages -->
                    <?php if (isset($_SESSION['success_message'])): ?>
                      <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="ti tabler-check me-2"></i> <?= htmlspecialchars($_SESSION['success_message']) ?>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                      </div>
                      <?php unset($_SESSION['success_message']); ?>
                    <?php endif; ?>

                    <?php if (isset($_SESSION['error_message'])): ?>
                      <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="ti tabler-alert-circle me-2"></i> <?= htmlspecialchars($_SESSION['error_message']) ?>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                      </div>
                      <?php unset($_SESSION['error_message']); ?>
                    <?php endif; ?>

                    <div class="d-flex justify-content-between align-items-center mb-4">
                      <h6>Manage withdrawal requests</h6>
                      <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                          <i class="icon-base ti tabler-filter icon-sm me-1_5"></i> Filter
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                          <li><a class="dropdown-item" href="?status=all">All Requests</a></li>
                          <li>
                            <hr class="dropdown-divider">
                          </li>
                          <li><a class="dropdown-item" href="?status=pending">Pending</a></li>
                          <li><a class="dropdown-item" href="?status=approved">Approved</a></li>
                          <li><a class="dropdown-item" href="?status=processed">Processed</a></li>
                          <li><a class="dropdown-item" href="?status=rejected">Rejected</a></li>
                        </ul>
                      </div>
                    </div>

                    <div class="table-responsive">
                      <table class="table table-hover mb-0">
                        <thead>
                          <tr>
                            <th>ID</th>
                            <th>User</th>
                            <th>Amount</th>
                            <th>Method</th>
                            <th>Details</th>
                            <th>Status</th>
                            <th>Date</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          <?php if (empty($withdrawals)): ?>
                            <tr>
                              <td colspan="8" class="text-center py-4 text-muted">No withdrawal requests found</td>
                            </tr>
                          <?php else: ?>
                            <?php foreach ($withdrawals as $withdrawal): ?>
                              <tr>
                                <td>#<?= $withdrawal['id'] ?></td>
                                <td>
                                  <div class="d-flex align-items-center">
                                    <img class="rounded-circle" src="../../assets/img/avatars/<?= htmlspecialchars($withdrawal['profile_image'] ?? 'default.png') ?>" alt="User Image" width="40" height="40">
                                    <div class="ms-2">
                                      <?= htmlspecialchars($withdrawal['full_name']) ?>
                                      <br><small class="text-muted"><?= htmlspecialchars($withdrawal['username']) ?></small>
                                    </div>
                                  </div>
                                </td>

                                <td><?= htmlspecialchars($user['currency'] ?? '₹') ?> <?= number_format($withdrawal['amount'], 2) ?></td>
                                <td>
                                  <?= ucfirst(str_replace('_', ' ', $withdrawal['payment_method'])) ?>
                                  <?php if ($withdrawal['payment_method'] === 'upi' && $withdrawal['upi_id']): ?>
                                    <br><small class="text-muted"><?= htmlspecialchars($withdrawal['upi_id']) ?></small>
                                  <?php endif; ?>
                                </td>
                                <td>
                                  <?php if ($withdrawal['payment_method'] === 'bank_transfer'): ?>
                                    <small>
                                      Bank: <?= htmlspecialchars($withdrawal['bank_name']) ?><br>
                                      A/C: <?= htmlspecialchars($withdrawal['bank_account_number']) ?><br>
                                      IFSC: <?= htmlspecialchars($withdrawal['bank_ifsc']) ?><br>
                                      Name: <?= htmlspecialchars($withdrawal['account_holder_name']) ?>
                                    </small>
                                  <?php elseif ($withdrawal['payment_method'] === 'qr_code' && $withdrawal['qr_code_image']): ?>
                                    <a href="#" data-bs-toggle="modal" data-bs-target="#qrModal<?= $withdrawal['id'] ?>">
                                      View QR Code
                                    </a>
                                  <?php endif; ?>
                                </td>
                                <td>
                                  <?php
                                  $badgeClass = [
                                    'pending' => 'badge-pending',
                                    'approved' => 'badge-approved',
                                    'rejected' => 'badge-rejected',
                                    'processed' => 'badge-processed'
                                  ][$withdrawal['status']] ?? 'badge-secondary';
                                  ?>
                                  <span class="badge <?= $badgeClass ?>"><?= ucfirst($withdrawal['status']) ?></span>
                                </td>
                                <td>
                                  <?= date('d M Y', strtotime($withdrawal['created_at'])) ?><br>
                                  <small class="text-muted"><?= date('H:i', strtotime($withdrawal['created_at'])) ?></small>
                                </td>
                                <td>
                                  <div class="dropdown">
                                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" id="actionDropdown<?= $withdrawal['id'] ?>" data-bs-toggle="dropdown" aria-expanded="false">
                                      <i class="icon-base ti tabler-dots-vertical"></i>
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="actionDropdown<?= $withdrawal['id'] ?>">
                                      <?php if ($withdrawal['status'] === 'pending'): ?>
                                        <li>
                                          <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#approveModal<?= $withdrawal['id'] ?>">
                                            <i class="icon-base ti tabler-check-circle me-1_5"></i> Approve
                                          </a>
                                        </li>
                                        <li>
                                          <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#rejectModal<?= $withdrawal['id'] ?>">
                                            <i class="icon-base ti tabler-x-circle me-1_5"></i> Reject
                                          </a>
                                        </li>
                                      <?php elseif ($withdrawal['status'] === 'approved'): ?>
                                        <li>
                                          <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#processModal<?= $withdrawal['id'] ?>">
                                            <i class="icon-base ti tabler-send me-1_5"></i> Mark as Processed
                                          </a>
                                        </li>
                                      <?php endif; ?>
                                      <li>
                                        <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#detailsModal<?= $withdrawal['id'] ?>">
                                          <i class="icon-base ti tabler-info-circle me-1_5"></i> Details
                                        </a>
                                      </li>
                                    </ul>
                                  </div>
                                </td>
                              </tr>

                              <!-- QR Code Modal -->
                              <?php if ($withdrawal['payment_method'] === 'qr_code' && $withdrawal['qr_code_image']): ?>
                                <div class="modal fade" id="qrModal<?= $withdrawal['id'] ?>" tabindex="-1" aria-hidden="true">
                                  <div class="modal-dialog modal-sm modal-dialog-centered">
                                    <div class="modal-content">
                                      <div class="modal-header">
                                        <h5 class="modal-title">QR Code</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                      </div>
                                      <div class="modal-body text-center">
                                        <img src="<?= htmlspecialchars($withdrawal['qr_code_image']) ?>" alt="QR Code" class="img-fluid">
                                      </div>
                                      <div class="modal-footer">
                                        <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Close</button>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              <?php endif; ?>

                              <!-- Approve Modal -->
                              <div class="modal fade" id="approveModal<?= $withdrawal['id'] ?>" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                  <div class="modal-content">
                                    <form method="POST">
                                      <div class="modal-header">
                                        <h5 class="modal-title">Approve Withdrawal Request #<?= $withdrawal['id'] ?></h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                      </div>
                                      <div class="modal-body">
                                        <p>Are you sure you want to approve this withdrawal request?</p>
                                        <div class="mb-3">
                                          <label for="approveNotes<?= $withdrawal['id'] ?>" class="form-label">Admin Notes</label>
                                          <textarea class="form-control" id="approveNotes<?= $withdrawal['id'] ?>" name="admin_notes" rows="3" placeholder="Optional notes about this approval"></textarea>
                                        </div>
                                      </div>
                                      <div class="modal-footer">
                                        <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                        <input type="hidden" name="request_id" value="<?= $withdrawal['id'] ?>">
                                        <input type="hidden" name="action" value="approve">
                                        <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
                                        <button type="submit" class="btn btn-primary">Confirm Approval</button>
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>

                              <!-- Reject Modal -->
                              <div class="modal fade" id="rejectModal<?= $withdrawal['id'] ?>" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                  <div class="modal-content">
                                    <form method="POST">
                                      <div class="modal-header">
                                        <h5 class="modal-title">Reject Withdrawal Request #<?= $withdrawal['id'] ?></h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                      </div>
                                      <div class="modal-body">
                                        <p>Are you sure you want to reject this withdrawal request? The amount will be refunded to the user's wallet.</p>
                                        <div class="mb-3">
                                          <label for="rejectNotes<?= $withdrawal['id'] ?>" class="form-label">Reason for Rejection</label>
                                          <textarea class="form-control" id="rejectNotes<?= $withdrawal['id'] ?>" name="admin_notes" rows="3" placeholder="Please specify the reason for rejection" required></textarea>
                                        </div>
                                      </div>
                                      <div class="modal-footer">
                                        <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                        <input type="hidden" name="request_id" value="<?= $withdrawal['id'] ?>">
                                        <input type="hidden" name="action" value="reject">
                                        <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
                                        <button type="submit" class="btn btn-danger">Confirm Rejection</button>
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>

                              <!-- Process Modal -->
                              <div class="modal fade" id="processModal<?= $withdrawal['id'] ?>" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                  <div class="modal-content">
                                    <form method="POST">
                                      <div class="modal-header">
                                        <h5 class="modal-title">Mark as Processed #<?= $withdrawal['id'] ?></h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                      </div>
                                      <div class="modal-body">
                                        <p>Mark this request as processed after you have sent the payment.</p>
                                        <div class="mb-3">
                                          <label for="processNotes<?= $withdrawal['id'] ?>" class="form-label">Transaction Details</label>
                                          <textarea class="form-control" id="processNotes<?= $withdrawal['id'] ?>" name="admin_notes" rows="3" placeholder="Optional transaction details (reference number, etc.)"></textarea>
                                        </div>
                                      </div>
                                      <div class="modal-footer">
                                        <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                        <input type="hidden" name="request_id" value="<?= $withdrawal['id'] ?>">
                                        <input type="hidden" name="action" value="process">
                                        <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
                                        <button type="submit" class="btn btn-primary">Mark as Processed</button>
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>

                              <!-- Details Modal -->
                              <div class="modal fade" id="detailsModal<?= $withdrawal['id'] ?>" tabindex="-1" aria-hidden="true">
                                <div class="modal-dialog modal-lg modal-dialog-centered">
                                  <div class="modal-content">
                                    <div class="modal-header">
                                      <h5 class="modal-title">Withdrawal Details #<?= $withdrawal['id'] ?></h5>
                                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                      <div class="row mb-4">
                                        <div class="col-md-6">
                                          <h6 class="fw-medium">User</h6>
                                          <p><?= htmlspecialchars($withdrawal['full_name']) ?> (<?= htmlspecialchars($withdrawal['username']) ?>)</p>
                                        </div>
                                        <div class="col-md-6">
                                          <h6 class="fw-medium">Amount</h6>
                                          <p><?= htmlspecialchars($user['currency'] ?? '₹') ?> <?= number_format($withdrawal['amount'], 2) ?></p>
                                        </div>
                                      </div>

                                      <div class="row mb-4">
                                        <div class="col-md-6">
                                          <h6 class="fw-medium">Payment Method</h6>
                                          <p><?= ucfirst(str_replace('_', ' ', $withdrawal['payment_method'])) ?></p>
                                        </div>
                                        <div class="col-md-6">
                                          <h6 class="fw-medium">Status</h6>
                                          <p>
                                            <span class="badge <?= $badgeClass ?>"><?= ucfirst($withdrawal['status']) ?></span>
                                          </p>
                                        </div>
                                      </div>

                                      <div class="mb-4">
                                        <h6 class="fw-medium">Payment Details</h6>
                                        <?php if ($withdrawal['payment_method'] === 'bank_transfer'): ?>
                                          <div class="card bg-light p-3">
                                            <p><strong>Bank Name:</strong> <?= htmlspecialchars($withdrawal['bank_name']) ?></p>
                                            <p><strong>Account Number:</strong> <?= htmlspecialchars($withdrawal['bank_account_number']) ?></p>
                                            <p><strong>IFSC Code:</strong> <?= htmlspecialchars($withdrawal['bank_ifsc']) ?></p>
                                            <p><strong>Account Holder:</strong> <?= htmlspecialchars($withdrawal['account_holder_name']) ?></p>
                                          </div>
                                        <?php elseif ($withdrawal['payment_method'] === 'upi'): ?>
                                          <div class="card bg-light p-3">
                                            <p><strong>UPI ID:</strong> <?= htmlspecialchars($withdrawal['upi_id']) ?></p>
                                          </div>
                                        <?php elseif ($withdrawal['payment_method'] === 'qr_code' && $withdrawal['qr_code_image']): ?>
                                          <div class="card bg-light p-3 text-center">
                                            <img src="<?= htmlspecialchars($withdrawal['qr_code_image']) ?>" alt="QR Code" style="max-width: 200px; margin: 0 auto;">
                                          </div>
                                        <?php endif; ?>
                                      </div>

                                      <?php if ($withdrawal['admin_notes']): ?>
                                        <div class="mb-4">
                                          <h6 class="fw-medium">Admin Notes</h6>
                                          <div class="card bg-light p-3">
                                            <?= nl2br(htmlspecialchars($withdrawal['admin_notes'])) ?>
                                          </div>
                                        </div>
                                      <?php endif; ?>

                                      <div class="row">
                                        <div class="col-md-6">
                                          <h6 class="fw-medium">Request Date</h6>
                                          <p><?= date('d M Y H:i', strtotime($withdrawal['created_at'])) ?></p>
                                        </div>
                                        <div class="col-md-6">
                                          <h6 class="fw-medium">Last Updated</h6>
                                          <p><?= date('d M Y H:i', strtotime($withdrawal['updated_at'])) ?></p>
                                        </div>
                                      </div>
                                    </div>
                                    <div class="modal-footer">
                                      <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Close</button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            <?php endforeach; ?>
                          <?php endif; ?>
                        </tbody>
                      </table>

                      <!-- Pagination -->
                      <?php if ($totalPages > 1): ?>
                        <div class="mt-6">
                          <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">
                              <li class="page-item <?= $page <= 1 ? 'disabled' : '' ?>">
                                <a class="page-link" href="?page=<?= $page - 1 ?><?= $statusFilter ? '&status=' . $statusFilter : '' ?>" tabindex="-1">
                                  <i class="icon-base ti tabler-chevron-left"></i> Previous
                                </a>
                              </li>
                              <?php for ($i = 1; $i <= $totalPages; $i++): ?>
                                <li class="page-item <?= $i == $page ? 'active' : '' ?>">
                                  <a class="page-link" href="?page=<?= $i ?><?= $statusFilter ? '&status=' . $statusFilter : '' ?>"><?= $i ?></a>
                                </li>
                              <?php endfor; ?>
                              <li class="page-item <?= $page >= $totalPages ? 'disabled' : '' ?>">
                                <a class="page-link" href="?page=<?= $page + 1 ?><?= $statusFilter ? '&status=' . $statusFilter : '' ?>">
                                  Next <i class="icon-base ti tabler-chevron-right"></i>
                                </a>
                              </li>
                            </ul>
                          </nav>
                        </div>
                      <?php endif; ?>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <!-- / Content -->

          <!-- Footer -->
          <?php include('includes/footer.php'); ?>
        </div>
      </div>
    </div>

    <!-- Overlay -->
    <div class="layout-overlay layout-menu-toggle"></div>
  </div>

  <!-- Scripts -->
  <?php include(__DIR__ . '/includes/script.php'); ?>
  <script src="assets/js/jquery-3.6.0.min.js"></script>
  <script src="assets/js/bootstrap.bundle.min.js"></script>
  <script src="assets/plugins/slimscroll/jquery.slimscroll.min.js"></script>
  <script src="assets/plugins/datatables/jquery.dataTables.min.js"></script>
  <script src="assets/plugins/datatables/datatables.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    // Show SweetAlert notifications
    <?php if (isset($_SESSION['success_message'])): ?>
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: '<?= addslashes($_SESSION['success_message']) ?>',
        timer: 3000,
        showConfirmButton: false
      });
      <?php unset($_SESSION['success_message']); ?>
    <?php endif; ?>

    <?php if (isset($_SESSION['error_message'])): ?>
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: '<?= addslashes($_SESSION['error_message']) ?>'
      });
      <?php unset($_SESSION['error_message']); ?>
    <?php endif; ?>

    // Confirm before rejecting
    $(document).ready(function() {
      $('form input[name="action"][value="reject"]').closest('form').on('submit', function(e) {
        e.preventDefault();
        Swal.fire({
          title: 'Confirm Rejection',
          text: "Are you sure you want to reject this withdrawal request? The amount will be refunded to the user's wallet.",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: 'Yes, reject it!'
        }).then((result) => {
          if (result.isConfirmed) {
            $(this).unbind('submit').submit();
          }
        });
      });

      // Confirm before processing
      $('form input[name="action"][value="process"]').closest('form').on('submit', function(e) {
        e.preventDefault();
        Swal.fire({
          title: 'Confirm Processing',
          text: "Have you already sent the payment to the user?",
          icon: 'question',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, payment sent!'
        }).then((result) => {
          if (result.isConfirmed) {
            $(this).unbind('submit').submit();
          }
        });
      });
    });
  </script>
</body>

</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>