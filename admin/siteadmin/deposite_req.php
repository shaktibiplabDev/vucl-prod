<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once(__DIR__ . '/../../config/database.php');

// Initialize variables
$error = null;
$success = null;

// Date range handling (default to current month)
$startDate = isset($_GET['start_date']) ? $_GET['start_date'] : date('Y-m-01');
$endDate = isset($_GET['end_date']) ? $_GET['end_date'] : date('Y-m-t');

// Pagination settings
$perPage = 10; // Number of items per page
$currentPage = isset($_GET['page']) ? max(1, (int)$_GET['page']) : 1;
$offset = ($currentPage - 1) * $perPage;

// Handle offline deposit status change
if (isset($_POST['action']) && in_array($_POST['action'], ['approve', 'reject']) && isset($_POST['offline_id'])) {
    try {
        $pdo->beginTransaction();
        
        $offline_id = (int)$_POST['offline_id'];
        $action = $_POST['action'];
        
        // Get the offline transaction
        $stmt = $pdo->prepare("SELECT ot.*, d.user_id, d.amount, d.order_id
                              FROM offline_transactions ot
                              JOIN deposits d ON ot.deposit_id = d.id
                              WHERE ot.id = ?");
        $stmt->execute([$offline_id]);
        $offlineTx = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$offlineTx) {
            throw new Exception("Transaction not found");
        }
        
        // Update offline transaction status
        $newStatus = ($action === 'approve') ? 'approved' : 'rejected';
        $stmt = $pdo->prepare("UPDATE offline_transactions SET status = ? WHERE id = ?");
        $stmt->execute([$newStatus, $offline_id]);
        
        // Update deposit status
        $depositStatus = ($action === 'approve') ? 'completed' : 'failed';
        $stmt = $pdo->prepare("UPDATE deposits SET status = ? WHERE id = ?");
        $stmt->execute([$depositStatus, $offlineTx['deposit_id']]);
        
        // If approved, add funds to user's wallet
        if ($action === 'approve') {
            $stmt = $pdo->prepare("UPDATE users SET wallet = wallet + ? WHERE id = ?");
            $stmt->execute([$offlineTx['amount'], $offlineTx['user_id']]);
            
            // Record transaction
            $stmt = $pdo->prepare("INSERT INTO transactions 
                                  (user_id, type, amount, status, related_order_id, created_at)
                                  VALUES (?, 'deposit', ?, 'completed', ?, NOW())");
            $stmt->execute([
                $offlineTx['user_id'],
                $offlineTx['amount'],
                'OFFLINE-' . $offlineTx['transaction_id']
            ]);
        }
        
        $pdo->commit();
        
        // Redirect to avoid form resubmission
        $redirectUrl = $_SERVER['PHP_SELF'] . '?success=' . urlencode("Transaction has been " . $newStatus . " successfully") . 
                      '&start_date=' . urlencode($startDate) . 
                      '&end_date=' . urlencode($endDate) . 
                      '&page=' . $currentPage;
        header("Location: " . $redirectUrl);
        exit();
        
    } catch (Exception $e) {
        $pdo->rollBack();
        $error = "Failed to update transaction: " . $e->getMessage();
    }
}

// Check for success message in URL
if (isset($_GET['success'])) {
    $success = $_GET['success'];
}

// Handle export requests for offline transactions only
if (isset($_GET['export'])) {
    try {
        // Get all offline deposit data for export
        $stmt = $pdo->prepare("SELECT ot.id, u.username, u.email, ot.amount, d.order_id, ot.status, ot.created_at, ot.upi_id, ot.transaction_id
                              FROM offline_transactions ot
                              JOIN deposits d ON ot.deposit_id = d.id
                              JOIN users u ON d.user_id = u.id
                              WHERE ot.created_at BETWEEN ? AND ?
                              ORDER BY ot.created_at DESC");
        $stmt->execute([$startDate, $endDate . ' 23:59:59']);
        $exportData = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Set headers for CSV download
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="offline_deposits_export_' . date('Y-m-d') . '.csv"');
        
        // Open output stream
        $output = fopen('php://output', 'w');
        
        // Add CSV headers
        fputcsv($output, ['ID', 'Username', 'Email', 'Amount', 'Order ID', 'Status', 'UPI ID', 'Transaction ID', 'Date']);
        
        // Add data rows
        foreach ($exportData as $row) {
            fputcsv($output, [
                $row['id'],
                $row['username'],
                $row['email'],
                $row['amount'],
                $row['order_id'],
                ucfirst($row['status']),
                $row['upi_id'],
                $row['transaction_id'],
                date('M d, Y h:i A', strtotime($row['created_at']))
            ]);
        }
        
        fclose($output);
        exit();
        
    } catch (PDOException $e) {
        $error = "Export failed: " . $e->getMessage();
    }
}

// Calculate financial totals for offline transactions only
$financialData = [
    'total_pending' => 0,
    'total_approved' => 0,
    'total_rejected' => 0
];

try {
    // Get total pending offline deposits
    $stmt = $pdo->prepare("SELECT COUNT(*) as count, SUM(d.amount) as total 
                          FROM offline_transactions ot
                          JOIN deposits d ON ot.deposit_id = d.id
                          WHERE ot.status = 'pending'
                          AND ot.created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $pendingData = $stmt->fetch(PDO::FETCH_ASSOC);
    $financialData['total_pending_count'] = $pendingData['count'] ?: 0;
    $financialData['total_pending'] = $pendingData['total'] ?: 0;

    // Get total approved offline deposits
    $stmt = $pdo->prepare("SELECT COUNT(*) as count, SUM(d.amount) as total 
                          FROM offline_transactions ot
                          JOIN deposits d ON ot.deposit_id = d.id
                          WHERE ot.status = 'approved'
                          AND ot.created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $approvedData = $stmt->fetch(PDO::FETCH_ASSOC);
    $financialData['total_approved_count'] = $approvedData['count'] ?: 0;
    $financialData['total_approved'] = $approvedData['total'] ?: 0;

    // Get total rejected offline deposits
    $stmt = $pdo->prepare("SELECT COUNT(*) as count, SUM(d.amount) as total 
                          FROM offline_transactions ot
                          JOIN deposits d ON ot.deposit_id = d.id
                          WHERE ot.status = 'rejected'
                          AND ot.created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $rejectedData = $stmt->fetch(PDO::FETCH_ASSOC);
    $financialData['total_rejected_count'] = $rejectedData['count'] ?: 0;
    $financialData['total_rejected'] = $rejectedData['total'] ?: 0;

} catch (PDOException $e) {
    $error = "Database error: " . $e->getMessage();
}

// Get total count of offline deposits for pagination
$totalDeposits = 0;
try {
    $stmt = $pdo->prepare("SELECT COUNT(*) as total 
                          FROM offline_transactions ot
                          JOIN deposits d ON ot.deposit_id = d.id
                          JOIN users u ON d.user_id = u.id
                          WHERE ot.created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $totalResult = $stmt->fetch(PDO::FETCH_ASSOC);
    $totalDeposits = $totalResult['total'] ?: 0;
} catch (PDOException $e) {
    $error = "Database error: " . $e->getMessage();
}

// Calculate total pages
$totalPages = ceil($totalDeposits / $perPage);

// Get paginated offline deposits
$offlineDeposits = [];
try {
    $stmt = $pdo->prepare("SELECT ot.*, d.user_id, d.amount, d.order_id, u.username, u.email
                          FROM offline_transactions ot
                          JOIN deposits d ON ot.deposit_id = d.id
                          JOIN users u ON d.user_id = u.id
                          WHERE ot.created_at BETWEEN ? AND ?
                          ORDER BY ot.created_at DESC
                          LIMIT ? OFFSET ?");

    $stmt->bindValue(1, $startDate);
    $stmt->bindValue(2, $endDate . ' 23:59:59');
    $stmt->bindValue(3, (int)$perPage, PDO::PARAM_INT);
    $stmt->bindValue(4, (int)$offset, PDO::PARAM_INT);

    $stmt->execute();
    $offlineDeposits = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error = "Database error: " . $e->getMessage();
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" 
  data-skin="default" data-assets-path="../../assets/" 
  data-template="vertical-menu-template" data-bs-theme="light">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Admin Offline Deposits</title>
    <?php include('includes/head.php'); ?>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
    /* Admin Dashboard Styles */
    .stat-card {
        transition: all 0.3s ease;
        border-radius: 10px;
        overflow: hidden;
        height: 100%;
    }
    
    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    
    .stat-icon {
        font-size: 2rem;
        opacity: 0.7;
    }
    
    .badge-status {
        padding: 5px 10px;
        border-radius: 20px;
        font-weight: 500;
    }
    
    /* Status badge colors */
    .badge-pending {
        background-color: #ffc107;
        color: #212529;
    }
    .badge-approved {
        background-color: #28a745;
        color: white;
    }
    .badge-rejected {
        background-color: #dc3545;
        color: white;
    }
    
    /* Mobile-friendly tables */
    .table-responsive {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    @media (max-width: 767.98px) {
        .table-responsive {
            width: 100%;
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
        
        .table {
            display: block;
            width: 100%;
            overflow-x: auto;
        }
        
        .table thead {
            display: none;
        }
        
        .table tbody {
            display: block;
            width: 100%;
        }
        
        .table tr {
            display: block;
            margin-bottom: 1rem;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
        }
        
        .table td {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            border-bottom: 1px solid #dee2e6;
        }
        
        .table td:before {
            content: attr(data-label);
            font-weight: bold;
            margin-right: 1rem;
            flex: 0 0 40%;
        }
        
        .table td:last-child {
            border-bottom: 0;
        }
    }
    
    /* Form enhancements */
    .form-control:focus {
        border-color: #7367F0;
        box-shadow: 0 0 0 0.2rem rgba(115, 103, 240, 0.25);
    }
    
    /* Print-specific styles */
    @media print {
        body * {
            visibility: hidden;
        }
        .print-section, .print-section * {
            visibility: visible;
        }
        .print-section {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
        }
        .no-print {
            display: none !important;
        }
        .table-responsive {
            box-shadow: none;
        }
    }
    
    /* Pagination styles */
    .pagination {
        justify-content: center;
    }
    .page-item.active .page-link {
        background-color: #7367F0;
        border-color: #7367F0;
    }
    .page-link {
        color: #7367F0;
    }
    </style>
</head>

<body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->
            <?php include('includes/sidebar.php'); ?>

            <div class="layout-page">
                <!-- Navbar -->
                <?php include('includes/navbar.php'); ?>

                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <!-- Content -->
                    <div class="container-xxl flex-grow-1 container-p-y">
                        <h4 class="fw-bold py-3 mb-4">
                            <span class="text-muted fw-light">Admin /</span> Offline Deposits
                        </h4>

                        <!-- Display success/error messages -->
                        <?php if ($success): ?>
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <i class="fas fa-check-circle me-2"></i> <?= htmlspecialchars($success) ?>
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        <?php endif; ?>
                        
                        <?php if ($error): ?>
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-circle me-2"></i> <?= htmlspecialchars($error) ?>
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        <?php endif; ?>

                        <!-- Date Range Picker -->
                        <div class="card mb-4 no-print">
                            <div class="card-body">
                                <form method="get" class="row g-3">
                                    <div class="col-md-4">
                                        <label for="start_date" class="form-label">From Date</label>
                                        <input type="date" class="form-control" id="start_date" name="start_date" 
                                               value="<?= htmlspecialchars($startDate) ?>">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="end_date" class="form-label">To Date</label>
                                        <input type="date" class="form-control" id="end_date" name="end_date" 
                                               value="<?= htmlspecialchars($endDate) ?>">
                                    </div>
                                    <div class="col-md-4 d-flex align-items-end">
                                        <button type="submit" class="btn btn-primary me-2">
                                            <i class="fas fa-filter me-2"></i>Filter
                                        </button>
                                        <a href="?" class="btn btn-outline-secondary">
                                            <i class="fas fa-sync-alt me-2"></i>Reset
                                        </a>
                                    </div>
                                </form>
                            </div>
                        </div>

                        <!-- Stats Cards -->
                        <div class="row mb-4 no-print">
                            <div class="col-6 col-md-4 mb-4">
                                <div class="card stat-card bg-warning text-white h-100">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h5 class="card-title mb-0">Pending</h5>
                                            <div class="stat-icon">
                                                <i class="fas fa-clock"></i>
                                            </div>
                                        </div>
                                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($financialData['total_pending'], 2) ?></h3>
                                        <small class="text-white-50"><?= $financialData['total_pending_count'] ?> requests</small>
                                    </div>
                                </div>
                            </div>

                            <div class="col-6 col-md-4 mb-4">
                                <div class="card stat-card bg-success text-white h-100">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h5 class="card-title mb-0">Approved</h5>
                                            <div class="stat-icon">
                                                <i class="fas fa-check-circle"></i>
                                            </div>
                                        </div>
                                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($financialData['total_approved'], 2) ?></h3>
                                        <small class="text-white-50"><?= $financialData['total_approved_count'] ?> requests</small>
                                    </div>
                                </div>
                            </div>

                            <div class="col-6 col-md-4 mb-4">
                                <div class="card stat-card bg-danger text-white h-100">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h5 class="card-title mb-0">Rejected</h5>
                                            <div class="stat-icon">
                                                <i class="fas fa-times-circle"></i>
                                            </div>
                                        </div>
                                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($financialData['total_rejected'], 2) ?></h3>
                                        <small class="text-white-50"><?= $financialData['total_rejected_count'] ?> requests</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Offline Deposits Table -->
                        <div class="card mb-4 print-section">
                            <h5 class="card-header bg-transparent">
                                <i class="fas fa-exchange-alt me-2"></i>Offline Deposit Requests (<?= $totalDeposits ?>)
                                <span class="float-end no-print">
                                    <small><?= date('M d, Y', strtotime($startDate)) ?> to <?= date('M d, Y', strtotime($endDate)) ?></small>
                                </span>
                            </h5>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>User</th>
                                                <th>Amount</th>
                                                <th>UPI ID</th>
                                                <th>Transaction ID</th>
                                                <th>Deposit ID</th>
                                                <th>Status</th>
                                                <th>Date</th>
                                                <th class="no-print">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <?php if (empty($offlineDeposits)): ?>
                                                <tr>
                                                    <td colspan="9" class="text-center py-4">No offline deposits found for the selected period</td>
                                                </tr>
                                            <?php else: ?>
                                                <?php foreach ($offlineDeposits as $deposit): ?>
                                                    <tr>
                                                        <td data-label="ID"><?= $deposit['id'] ?></td>
                                                        <td data-label="User">
                                                            <div><?= htmlspecialchars($deposit['username']) ?></div>
                                                            <small class="text-muted"><?= htmlspecialchars($deposit['email']) ?></small>
                                                        </td>
                                                        <td data-label="Amount"><?= htmlspecialchars($user['currency']) ?> <?= number_format($deposit['amount'], 2) ?></td>
                                                        <td data-label="UPI ID"><?= htmlspecialchars($deposit['upi_id']) ?></td>
                                                        <td data-label="Transaction ID"><?= htmlspecialchars($deposit['transaction_id']) ?></td>
                                                        <td data-label="Deposit ID"><?= htmlspecialchars($deposit['order_id']) ?></td>
                                                        <td data-label="Status">
                                                            <?php 
                                                            $statusClass = '';
                                                            switch ($deposit['status']) {
                                                                case 'pending': $statusClass = 'badge-pending'; break;
                                                                case 'approved': $statusClass = 'badge-approved'; break;
                                                                case 'rejected': $statusClass = 'badge-rejected'; break;
                                                            }
                                                            ?>
                                                            <span class="badge badge-status <?= $statusClass ?>">
                                                                <?= ucfirst($deposit['status']) ?>
                                                            </span>
                                                        </td>
                                                        <td data-label="Date"><?= date('M d, Y h:i A', strtotime($deposit['created_at'])) ?></td>
                                                        <td data-label="Actions" class="no-print">
                                                            <?php if ($deposit['status'] === 'pending'): ?>
                                                                <form method="post" class="d-inline">
                                                                    <input type="hidden" name="offline_id" value="<?= $deposit['id'] ?>">
                                                                    <input type="hidden" name="page" value="<?= $currentPage ?>">
                                                                    <button type="submit" name="action" value="approve" class="btn btn-sm btn-success me-1">
                                                                        <i class="fas fa-check"></i> <span class="d-none d-md-inline">Approve</span>
                                                                    </button>
                                                                    <button type="submit" name="action" value="reject" class="btn btn-sm btn-danger">
                                                                        <i class="fas fa-times"></i> <span class="d-none d-md-inline">Reject</span>
                                                                    </button>
                                                                </form>
                                                            <?php else: ?>
                                                                <span class="text-muted">Processed</span>
                                                            <?php endif; ?>
                                                        </td>
                                                    </tr>
                                                <?php endforeach; ?>
                                            <?php endif; ?>
                                        </tbody>
                                    </table>
                                </div>
                                
                                <!-- Pagination -->
                                <?php if ($totalPages > 1): ?>
                                <nav aria-label="Page navigation" class="mt-4 no-print">
                                    <ul class="pagination">
                                        <li class="page-item <?= $currentPage == 1 ? 'disabled' : '' ?>">
                                            <a class="page-link" href="?start_date=<?= urlencode($startDate) ?>&end_date=<?= urlencode($endDate) ?>&page=<?= $currentPage - 1 ?>" aria-label="Previous">
                                                <span aria-hidden="true">&laquo;</span>
                                            </a>
                                        </li>
                                        
                                        <?php for ($i = 1; $i <= $totalPages; $i++): ?>
                                            <li class="page-item <?= $i == $currentPage ? 'active' : '' ?>">
                                                <a class="page-link" href="?start_date=<?= urlencode($startDate) ?>&end_date=<?= urlencode($endDate) ?>&page=<?= $i ?>"><?= $i ?></a>
                                            </li>
                                        <?php endfor; ?>
                                        
                                        <li class="page-item <?= $currentPage == $totalPages ? 'disabled' : '' ?>">
                                            <a class="page-link" href="?start_date=<?= urlencode($startDate) ?>&end_date=<?= urlencode($endDate) ?>&page=<?= $currentPage + 1 ?>" aria-label="Next">
                                                <span aria-hidden="true">&raquo;</span>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                                <?php endif; ?>
                            </div>
                        </div>

                        <!-- Quick Actions -->
                        <div class="row no-print">
                            <div class="col-md-6 mb-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title"><i class="fas fa-bolt me-2"></i>Quick Actions</h5>
                                        <div class="d-grid gap-2">
                                            <a href="?export=1&start_date=<?= urlencode($startDate) ?>&end_date=<?= urlencode($endDate) ?>" class="btn btn-outline-primary">
                                                <i class="fas fa-download me-2"></i> Export Data
                                            </a>
                                            <button class="btn btn-outline-secondary" onclick="window.print()">
                                                <i class="fas fa-print me-2"></i> Print Report
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Footer -->
                    <?php include('includes/footer.php'); ?>
                </div>
            </div>
        </div>

        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>
    </div>

    <?php include('includes/script.php'); ?>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize date range picker
        const startDateInput = document.getElementById('start_date');
        const endDateInput = document.getElementById('end_date');
        
        // Set max date for end date to today
        endDateInput.max = new Date().toISOString().split('T')[0];
        
        // Update end date min when start date changes
        startDateInput.addEventListener('change', function() {
            endDateInput.min = this.value;
            if (endDateInput.value < this.value) {
                endDateInput.value = this.value;
            }
        });

        // Confirm before rejecting a deposit
        document.querySelectorAll('button[value="reject"]').forEach(button => {
            button.addEventListener('click', function(e) {
                if (!confirm('Are you sure you want to reject this deposit request?')) {
                    e.preventDefault();
                }
            });
        });
    });
    </script>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>