<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Check if user is admin
$isAdmin = $_SESSION['user_type'] === 'admin';

// Initialize filters
$statusFilter = $_GET['status'] ?? '';
$dateFrom = $_GET['date_from'] ?? '';
$dateTo = $_GET['date_to'] ?? '';
$appIdSearch = $_GET['app_id'] ?? '';
$urgentFilter = isset($_GET['urgent']) ? (bool)$_GET['urgent'] : null;
$userIdFilter = $_GET['user_id'] ?? '';

// Handle bulk actions
if ($_SERVER['REQUEST_METHOD'] === 'POST' && $isAdmin) {
    if (isset($_POST['bulk_action'])) {
        $selectedIds = $_POST['selected_ids'] ?? [];
        
        if (!empty($selectedIds)) {
            $placeholders = implode(',', array_fill(0, count($selectedIds), '?'));
            
            switch ($_POST['bulk_action']) {
                case 'mark_urgent':
                    $stmt = $pdo->prepare("UPDATE dob_update SET is_urgent = TRUE WHERE id IN ($placeholders)");
                    $stmt->execute($selectedIds);
                    $_SESSION['flash_message'] = 'Selected records marked as urgent';
                    break;
                    
                case 'unmark_urgent':
                    $stmt = $pdo->prepare("UPDATE dob_update SET is_urgent = FALSE WHERE id IN ($placeholders)");
                    $stmt->execute($selectedIds);
                    $_SESSION['flash_message'] = 'Selected records unmarked as urgent';
                    break;
                    
                case 'delete':
                    $stmt = $pdo->prepare("DELETE FROM dob_update WHERE id IN ($placeholders)");
                    $stmt->execute($selectedIds);
                    $_SESSION['flash_message'] = 'Selected records deleted';
                    break;
                    
                case 'approve':
                    $stmt = $pdo->prepare("UPDATE dob_update SET status = 'approved' WHERE id IN ($placeholders)");
                    $stmt->execute($selectedIds);
                    $_SESSION['flash_message'] = 'Selected records approved';
                    break;
                    
                case 'reject':
                    $stmt = $pdo->prepare("UPDATE dob_update SET status = 'rejected' WHERE id IN ($placeholders)");
                    $stmt->execute($selectedIds);
                    $_SESSION['flash_message'] = 'Selected records rejected';
                    break;
            }
            
            header("Location: " . $_SERVER['PHP_SELF']);
            exit();
        }
    }
}

// Handle single record actions
if (isset($_GET['action']) && isset($_GET['id']) && $isAdmin) {
    $id = $_GET['id'];
    
    switch ($_GET['action']) {
        case 'toggle_urgent':
            $stmt = $pdo->prepare("UPDATE dob_update SET is_urgent = NOT is_urgent WHERE id = ?");
            $stmt->execute([$id]);
            $_SESSION['flash_message'] = 'Urgent status updated';
            break;
            
        case 'delete':
            $stmt = $pdo->prepare("DELETE FROM dob_update WHERE id = ?");
            $stmt->execute([$id]);
            $_SESSION['flash_message'] = 'Record deleted';
            break;
            
        case 'approve':
            $stmt = $pdo->prepare("UPDATE dob_update SET status = 'approved' WHERE id = ?");
            $stmt->execute([$id]);
            $_SESSION['flash_message'] = 'Record approved';
            break;
            
        case 'reject':
            $stmt = $pdo->prepare("UPDATE dob_update SET status = 'rejected' WHERE id = ?");
            $stmt->execute([$id]);
            $_SESSION['flash_message'] = 'Record rejected';
            break;
    }
    
    header("Location: " . $_SERVER['PHP_SELF']);
    exit();
}

// Build the base query
$query = "SELECT 
            d.id,
            d.application_id, 
            d.user_id, 
            d.full_name, 
            d.aadhaar_no, 
            d.village, 
            d.district, 
            d.mobile_no, 
            d.old_dob, 
            d.post, 
            d.state,
            d.new_dob, 
            d.father_name, 
            d.landmark, 
            d.pincode, 
            d.purpose,
            d.finger1, 
            d.finger2, 
            d.finger3, 
            d.finger4, 
            d.finger5,
            d.finger6, 
            d.finger7, 
            d.finger8, 
            d.finger9, 
            d.finger10,
            d.missing_fingers, 
            d.submitted_at, 
            d.status,
            d.is_urgent,
            u.username as submitted_by
          FROM dob_update d
          LEFT JOIN users u ON d.user_id = u.id";

// Add WHERE conditions based on filters
$conditions = [];
$params = [];

if (!$isAdmin) {
    // For non-admin users, only show their own records
    $conditions[] = "d.user_id = ?";
    $params[] = $user_id;
}

if (!empty($statusFilter)) {
    $conditions[] = "d.status = ?";
    $params[] = $statusFilter;
}

if (!empty($dateFrom)) {
    $conditions[] = "d.submitted_at >= ?";
    $params[] = $dateFrom . ' 00:00:00';
}

if (!empty($dateTo)) {
    $conditions[] = "d.submitted_at <= ?";
    $params[] = $dateTo . ' 23:59:59';
}

if (!empty($appIdSearch)) {
    $conditions[] = "d.application_id LIKE ?";
    $params[] = '%' . $appIdSearch . '%';
}

if (!empty($userIdFilter) && $isAdmin) {
    $conditions[] = "d.user_id = ?";
    $params[] = $userIdFilter;
}

if ($urgentFilter !== null && $isAdmin) {
    $conditions[] = "d.is_urgent = ?";
    $params[] = $urgentFilter;
}

if (!empty($conditions)) {
    $query .= " WHERE " . implode(" AND ", $conditions);
}

$query .= " ORDER BY d.is_urgent ASC, d.submitted_at ASC";

// Prepare and execute the query
$stmt = $pdo->prepare($query);
$stmt->execute($params);
$dobUpdates = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Get distinct status values for filter dropdown
$statuses = $pdo->query("SELECT DISTINCT status FROM dob_update")->fetchAll(PDO::FETCH_COLUMN);

// Get all users for admin filter
$users = [];
if ($isAdmin) {
    $users = $pdo->query("SELECT id, username FROM users ORDER BY username")->fetchAll(PDO::FETCH_ASSOC);
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
<?php include('includes/head.php'); ?>

<body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->
            <?php include('includes/sidebar.php'); ?>

            <div class="menu-mobile-toggler d-xl-none rounded-1">
                <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
                    <i class="ti tabler-menu icon-base"></i>
                    <i class="ti tabler-chevron-right icon-base"></i>
                </a>
            </div>
            <!-- / Menu -->

            <!-- Layout container -->
            <div class="layout-page">
                <!-- Navbar -->
                <?php include('includes/navbar.php'); ?>

                <!-- / Navbar -->

                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <!-- Content -->
                    <div class="container-xxl flex-grow-1 container-p-y">
                        <?php if (isset($_SESSION['flash_message'])): ?>
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <?= $_SESSION['flash_message'] ?>
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                            <?php unset($_SESSION['flash_message']); ?>
                        <?php endif; ?>

                        <div class="card">
                            <h5 class="card-header pb-0 text-md-start text-center">DOB Update Records <?= $isAdmin ? '(Admin View)' : '' ?></h5>
                            <!-- Filter Section -->
                            <div class="card-body border-bottom">
                                <form method="GET" class="row g-3">
                                    <div class="col-md-2">
                                        <label class="form-label">Application ID</label>
                                        <input type="text" name="app_id" class="form-control" placeholder="Search by ID" value="<?= htmlspecialchars($appIdSearch) ?>">
                                    </div>

                                    <div class="col-md-2">
                                        <label class="form-label">Status</label>
                                        <select name="status" class="form-select">
                                            <option value="">All Statuses</option>
                                            <?php foreach ($statuses as $status): ?>
                                                <option value="<?= $status ?>" <?= $status === $statusFilter ? 'selected' : '' ?>>
                                                    <?= ucfirst($status) ?>
                                                </option>
                                            <?php endforeach; ?>
                                        </select>
                                    </div>

                                    <div class="col-md-2">
                                        <label class="form-label">Date From</label>
                                        <input type="date" name="date_from" class="form-control" value="<?= htmlspecialchars($dateFrom) ?>">
                                    </div>

                                    <div class="col-md-2">
                                        <label class="form-label">Date To</label>
                                        <input type="date" name="date_to" class="form-control" value="<?= htmlspecialchars($dateTo) ?>">
                                    </div>

                                    <?php if ($isAdmin): ?>
                                        <div class="col-md-2">
                                            <label class="form-label">Submitted By</label>
                                            <select name="user_id" class="form-select">
                                                <option value="">All Users</option>
                                                <?php foreach ($users as $user): ?>
                                                    <option value="<?= $user['id'] ?>" <?= $user['id'] == $userIdFilter ? 'selected' : '' ?>>
                                                        <?= htmlspecialchars($user['username']) ?>
                                                    </option>
                                                <?php endforeach; ?>
                                            </select>
                                        </div>

                                        <div class="col-md-2">
                                            <label class="form-label">Urgent Only</label>
                                            <select name="urgent" class="form-select">
                                                <option value="">All</option>
                                                <option value="1" <?= $urgentFilter === true ? 'selected' : '' ?>>Urgent Only</option>
                                                <option value="0" <?= $urgentFilter === false ? 'selected' : '' ?>>Non-Urgent</option>
                                            </select>
                                        </div>
                                    <?php endif; ?>

                                    <div class="col-md-2 d-flex align-items-end">
                                        <button type="submit" class="btn btn-primary">
                                            <i class="ti tabler-filter me-1"></i> Filter
                                        </button>
                                    </div>
                                </form>
                            </div>

                            <?php if ($isAdmin): ?>
                                <!-- Bulk Actions Form -->
                                <form method="POST" class="card-body border-bottom">
                                    <div class="row g-3 align-items-center">
                                        <div class="col-md-3">
                                            <select name="bulk_action" class="form-select" required>
                                                <option value="">-- Bulk Actions --</option>
                                                <option value="mark_urgent">Mark as Urgent</option>
                                                <option value="unmark_urgent">Unmark as Urgent</option>
                                                <option value="approve">Approve Selected</option>
                                                <option value="reject">Reject Selected</option>
                                                <option value="delete">Delete Selected</option>
                                            </select>
                                        </div>
                                        <div class="col-md-2">
                                            <button type="submit" class="btn btn-primary">Apply</button>
                                        </div>
                                    </div>
                            <?php endif; ?>

                            <div class="card-datatable">
                                <table class="dt-responsive table table-bordered">
                                    <thead>
                                        <tr>
                                            <?php if ($isAdmin): ?>
                                                <th width="30">
                                                    <input type="checkbox" id="selectAll" class="form-check-input">
                                                </th>
                                            <?php endif; ?>
                                            <th>SL No</th>
                                            <th>Application ID</th>
                                            <th>Full Name</th>
                                            <?php if ($isAdmin): ?>
                                                <th>Submitted By</th>
                                            <?php endif; ?>
                                            <th>Submitted At</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <?php foreach ($dobUpdates as $index => $update): ?>
                                            <tr <?= $update['is_urgent'] ? 'class="table-warning"' : '' ?>>
                                                <?php if ($isAdmin): ?>
                                                    <td>
                                                        <input type="checkbox" name="selected_ids[]" value="<?= $update['id'] ?>" class="form-check-input row-checkbox">
                                                    </td>
                                                <?php endif; ?>
                                                <td><?= $index + 1 ?></td>
                                                <td>
                                                    <?= htmlspecialchars($update['application_id']) ?>
                                                    <?php if ($update['is_urgent']): ?>
                                                        <span class="badge bg-danger ms-1">URGENT</span>
                                                    <?php endif; ?>
                                                </td>
                                                <td><?= htmlspecialchars($update['full_name']) ?></td>
                                                <?php if ($isAdmin): ?>
                                                    <td><?= htmlspecialchars($update['submitted_by'] ?? 'N/A') ?></td>
                                                <?php endif; ?>
                                                <td><?= date('d M Y, h:i A', strtotime($update['submitted_at'])) ?></td>
                                                <td>
                                                    <?php
                                                    $statusClass = '';
                                                    switch (strtolower($update['status'])) {
                                                        case 'pending':
                                                            $statusClass = 'bg-label-warning';
                                                            break;
                                                        case 'approved':
                                                            $statusClass = 'bg-label-success';
                                                            break;
                                                        case 'rejected':
                                                            $statusClass = 'bg-label-danger';
                                                            break;
                                                        case 'processing':
                                                            $statusClass = 'bg-label-info';
                                                            break;
                                                        default:
                                                            $statusClass = 'bg-label-secondary';
                                                    }
                                                    ?>
                                                    <span class="badge <?= $statusClass ?>">
                                                        <?= ucfirst($update['status']) ?>
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="d-flex gap-2">
                                                        <button class="btn btn-sm btn-outline-primary view-btn"
                                                            data-id="<?= $update['id'] ?>"
                                                            data-app-id="<?= htmlspecialchars($update['application_id']) ?>"
                                                            data-full-name="<?= htmlspecialchars($update['full_name']) ?>"
                                                            data-aadhaar="<?= htmlspecialchars($update['aadhaar_no'])?>"
                                                            data-village="<?= htmlspecialchars($update['village'])?>"
                                                            data-district="<?= htmlspecialchars($update['district'])?>"
                                                            data-state="<?= htmlspecialchars($update['state'])?>"
                                                            data-mobile="<?= htmlspecialchars($update['mobile_no'])?>"
                                                            data-old-dob="<?= htmlspecialchars($update['old_dob'])?>"
                                                            data-new-dob="<?= htmlspecialchars($update['new_dob'])?>"
                                                            data-post="<?= htmlspecialchars($update['post'])?>"
                                                            data-landmark="<?= htmlspecialchars($update['landmark'])?>"
                                                            data-pincode="<?= htmlspecialchars($update['pincode'])?>"
                                                            data-purpose="<?= htmlspecialchars($update['purpose'])?>"
                                                            data-father-name="<?= htmlspecialchars($update['father_name'])?>"
                                                            data-submitted="<?= date('d M Y, h:i A', strtotime($update['submitted_at'])) ?>"
                                                            data-status="<?= htmlspecialchars($update['status']) ?>"
                                                            data-finger1="<?= !empty($update['finger1']) ? 'true' : 'false' ?>"
                                                            data-finger2="<?= !empty($update['finger2']) ? 'true' : 'false' ?>"
                                                            data-finger3="<?= !empty($update['finger3']) ? 'true' : 'false' ?>"
                                                            data-finger4="<?= !empty($update['finger4']) ? 'true' : 'false' ?>"
                                                            data-finger5="<?= !empty($update['finger5']) ? 'true' : 'false' ?>"
                                                            data-finger6="<?= !empty($update['finger6']) ? 'true' : 'false' ?>"
                                                            data-finger7="<?= !empty($update['finger7']) ? 'true' : 'false' ?>"
                                                            data-finger8="<?= !empty($update['finger8']) ? 'true' : 'false' ?>"
                                                            data-finger9="<?= !empty($update['finger9']) ? 'true' : 'false' ?>"
                                                            data-finger10="<?= !empty($update['finger10']) ? 'true' : 'false' ?>"
                                                            data-missing-fingers="<?= htmlspecialchars($update['missing_fingers']) ?>"
                                                            data-submitted-by="<?= htmlspecialchars($update['submitted_by'] ?? 'N/A') ?>"
                                                            data-is-urgent="<?= $update['is_urgent'] ? 'true' : 'false' ?>">
                                                            <i class="ti tabler-eye me-1"></i> View
                                                        </button>
                                                        
                                                        <?php if ($isAdmin): ?>
                                                            <a href="?action=toggle_urgent&id=<?= $update['id'] ?>" class="btn btn-sm btn-outline-<?= $update['is_urgent'] ? 'danger' : 'warning' ?>">
                                                                <i class="ti tabler-<?= $update['is_urgent'] ? 'bell-off' : 'bell' ?> me-1"></i> <?= $update['is_urgent'] ? 'Unmark' : 'Mark' ?>
                                                            </a>
                                                            
                                                            <a href="?action=delete&id=<?= $update['id'] ?>" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this record?')">
                                                                <i class="ti tabler-trash me-1"></i> Delete
                                                            </a>
                                                            
                                                        <?php endif; ?>
                                                    </div>
                                                </td>
                                            </tr>
                                        <?php endforeach; ?>
                                    </tbody>
                                </table>
                                <?php if ($isAdmin): ?>
                                    </form> <!-- Close the bulk actions form -->
                                <?php endif; ?>
                            </div>
                        </div>
                    </div>
                    <!-- / Content -->

                    <!-- Footer -->
                    <?php include('includes/footer.php'); ?>
                    <!-- / Footer -->

                    <div class="content-backdrop fade"></div>
                </div>
                <!-- Content wrapper -->
            </div>
            <!-- / Layout page -->
        </div>

        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>

        <!-- Drag Target Area To SlideIn Menu On Small Screens -->
        <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->
    
    <!-- View Modal -->
    <div class="modal fade" id="viewModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Application Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Application ID:</strong> <span id="modalAppId"></span></p>
                            <p><strong>Full Name:</strong> <span id="modalFullName"></span></p>
                            <p><strong>Aadhaar No:</strong> <span id="modalAadhaar"></span></p>
                            <p><strong>Mobile No:</strong> <span id="modalMobile"></span></p>
                            <p><strong>Old DOB:</strong> <span id="modalOldDob"></span></p>
                            <p><strong>New DOB:</strong> <span id="modalNewDob"></span></p>
                            <p><strong>Father Name:</strong> <span id="modalFatherName"></span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Submitted By:</strong> <span id="modalSubmittedBy"></span></p>
                            <p><strong>Submitted At:</strong> <span id="modalSubmitted"></span></p>
                            <p><strong>Status:</strong> <span id="modalStatus"></span></p>
                            <p><strong>Purpose:</strong> <span id="modalPurpose"></span></p>
                            <p><strong>Urgent:</strong> <span id="modalIsUrgent"></span></p>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>Address Details</h6>
                            <p><strong>Village:</strong> <span id="modalVillage"></span></p>
                            <p><strong>Post:</strong> <span id="modalPost"></span></p>
                            <p><strong>District:</strong> <span id="modalDistrict"></span></p>
                            <p><strong>State:</strong> <span id="modalState"></span></p>
                            <p><strong>Pincode:</strong> <span id="modalPincode"></span></p>
                            <p><strong>Landmark:</strong> <span id="modalLandmark"></span></p>
                        </div>
                        <!-- Fingerprint visualization using images -->
                        <div class="col-md-6">
                            <h6>Fingerprint Collection</h6>
                            <div class="fingerprint-diagram">
                                <div class="d-flex justify-content-center align-items-start">
                                    <!-- Left Hand -->
                                    <div class="hand-wrapper me-5">
                                        <h6 class="text-center">LEFT HAND</h6>
                                        <div class="hand-container position-relative">
                                            <img src="../../assets/images/left-hand.png" alt="Left Hand" class="hand-image" id="left-hand-image" />
                                            <!-- Indicators for fingers 1-5 (Left Hand) -->
                                            <span class="finger-indicator" id="finger1-indicator">?</span> <!-- Thumb -->
                                            <span class="finger-indicator" id="finger2-indicator">?</span> <!-- Index -->
                                            <span class="finger-indicator" id="finger3-indicator">?</span> <!-- Middle -->
                                            <span class="finger-indicator" id="finger4-indicator">?</span> <!-- Ring -->
                                            <span class="finger-indicator" id="finger5-indicator">?</span> <!-- Little -->
                                        </div>
                                    </div>

                                    <!-- Right Hand -->
                                    <div class="hand-wrapper">
                                        <h6 class="text-center">RIGHT HAND</h6>
                                        <div class="hand-container position-relative">
                                            <img src="../../assets/images/right-hand.png" alt="Right Hand" class="hand-image" id="right-hand-image" />
                                            <!-- Indicators for fingers 6-10 (Right Hand) -->
                                            <span class="finger-indicator" id="finger6-indicator">?</span> <!-- Thumb -->
                                            <span class="finger-indicator" id="finger7-indicator">?</span> <!-- Index -->
                                            <span class="finger-indicator" id="finger8-indicator">?</span> <!-- Middle -->
                                            <span class="finger-indicator" id="finger9-indicator">?</span> <!-- Ring -->
                                            <span class="finger-indicator" id="finger10-indicator">?</span> <!-- Little -->
                                        </div>
                                    </div>
                                </div>

                                <div class="mt-3 text-center">
                                    <p><span class="text-success">✓</span> = Collected | <span class="text-danger">✗</span> = Not Collected</p>
                                    <p><strong>Missing Fingers:</strong> <span id="modalMissingFingers"></span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="downloadPdf">
                        <i class="ti tabler-file-download me-1"></i> Download PDF
                    </button>
                </div>
            </div>
        </div>
    </div>

    <?php include('includes/script.php'); ?>
    <script>
        const dt_responsive_table = document.querySelector('.dt-responsive');
        if (dt_responsive_table) {
            let dt_responsive = new DataTable(dt_responsive_table, {
                responsive: true,
                layout: {
                    topStart: {
                        rowClass: 'row mx-3 my-0 justify-content-between',
                        features: [{
                            pageLength: {
                                menu: [10, 25, 50, 100],
                                text: 'Show _MENU_ entries'
                            }
                        }]
                    },
                    topEnd: {
                        search: {
                            placeholder: 'Search records...'
                        }
                    },
                    bottomStart: {
                        rowClass: 'row mx-3 justify-content-between',
                        features: ['info']
                    },
                    bottomEnd: 'paging'
                },
                language: {
                    paginate: {
                        next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
                        previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
                        first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                        last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
                    },
                    search: '',
                    searchPlaceholder: 'Search records...',
                    lengthMenu: 'Show _MENU_ entries'
                },
                dom: '<"top"lf>rt<"bottom"ip>',
                columnDefs: [{
                    responsivePriority: 1,
                    targets: 1
                }, // Application ID
                {
                    responsivePriority: 2,
                    targets: 2
                }, // Full Name
                {
                    responsivePriority: 3,
                    targets: -1
                } // Actions
                ]
            });
        }

        // Bulk select all checkbox
        document.getElementById('selectAll')?.addEventListener('click', function() {
            const checkboxes = document.querySelectorAll('.row-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });

        // View button click handler
        document.querySelectorAll('.view-btn').forEach(button => {
            button.addEventListener('click', function() {
                const modal = new bootstrap.Modal(document.getElementById('viewModal'));

                // Set modal content
                document.getElementById('modalAppId').textContent = this.dataset.appId;
                document.getElementById('modalFullName').textContent = this.dataset.fullName;
                document.getElementById('modalAadhaar').textContent = this.dataset.aadhaar;
                document.getElementById('modalMobile').textContent = this.dataset.mobile;
                document.getElementById('modalOldDob').textContent = this.dataset.oldDob;
                document.getElementById('modalNewDob').textContent = this.dataset.newDob;
                document.getElementById('modalFatherName').textContent = this.dataset.fatherName;
                document.getElementById('modalSubmitted').textContent = this.dataset.submitted;
                document.getElementById('modalSubmittedBy').textContent = this.dataset.submittedBy;
                document.getElementById('modalPurpose').textContent = this.dataset.purpose;
                document.getElementById('modalVillage').textContent = this.dataset.village;
                document.getElementById('modalPost').textContent = this.dataset.post;
                document.getElementById('modalDistrict').textContent = this.dataset.district;
                document.getElementById('modalState').textContent = this.dataset.state;
                document.getElementById('modalPincode').textContent = this.dataset.pincode;
                document.getElementById('modalLandmark').textContent = this.dataset.landmark;
                document.getElementById('modalMissingFingers').textContent = this.dataset.missingFingers || 'None';

                // Set status with badge
                const statusSpan = document.getElementById('modalStatus');
                statusSpan.innerHTML = '';
                const badge = document.createElement('span');
                badge.className = `badge ${this.dataset.status === 'pending' ? 'bg-label-warning' : 
                            this.dataset.status === 'approved' ? 'bg-label-success' : 
                            this.dataset.status === 'rejected' ? 'bg-label-danger' : 
                            this.dataset.status === 'processing' ? 'bg-label-info' : 'bg-label-secondary'}`;
                badge.textContent = this.dataset.status.charAt(0).toUpperCase() + this.dataset.status.slice(1);
                statusSpan.appendChild(badge);
                
                // Set urgent status
                const urgentSpan = document.getElementById('modalIsUrgent');
                urgentSpan.innerHTML = '';
                const urgentBadge = document.createElement('span');
                urgentBadge.className = `badge ${this.dataset.isUrgent === 'true' ? 'bg-label-danger' : 'bg-label-secondary'}`;
                urgentBadge.textContent = this.dataset.isUrgent === 'true' ? 'Yes' : 'No';
                urgentSpan.appendChild(urgentBadge);

                // Update fingerprint status for all fingers
                for (let i = 1; i <= 10; i++) {
                    const fingerIndicatorEl = document.getElementById(`finger${i}-indicator`);

                    if (fingerIndicatorEl) {
                        // Get finger data from button dataset
                        const isCollected = this.dataset[`finger${i}`] === 'true';

                        // Update status symbol and color
                        fingerIndicatorEl.textContent = isCollected ? '✓' : '✗';
                        fingerIndicatorEl.classList.remove('text-success', 'text-danger');
                        fingerIndicatorEl.classList.add(isCollected ? 'text-success' : 'text-danger');
                    }
                }

                // Set PDF download link
                document.getElementById('downloadPdf').onclick = function() {
                    window.location.href = `generate_pdf.php?app_id=${button.dataset.appId}`;
                };

                modal.show();
            });
        });
    </script>
    <style>
        /* Fingerprint Visualization Styles */
        .fingerprint-diagram {
            margin-top: 1rem;
            padding: 1rem;
            background-color: #2c3e50;
            border-radius: 5px;
        }

        .hand-wrapper {
            text-align: center;
            flex: 1;
        }

        .hand-container {
            position: relative;
            margin: 0 auto;
            width: 150px;
            height: 165px;
        }

        .hand-image {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .finger-indicator {
            position: absolute;
            font-weight: bold;
            font-size: 18px;
            width: 28px;
            height: 28px;
            line-height: 28px;
            text-align: center;
            background-color: #fff;
            border-radius: 50%;
            border: 1px solid #666;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        /* Left Hand Finger Positions */
        #finger1-indicator {
            left: 15px;
            top: 70px;
        }

        /* Left Thumb */
        #finger2-indicator {
            left: 40px;
            top: 10px;
        }

        /* Left Index */
        #finger3-indicator {
            left: 70px;
            top: 1px;
        }

        /* Left Middle */
        #finger4-indicator {
            left: 97px;
            top: 5px;
        }

        /* Left Ring */
        #finger5-indicator {
            left: 120px;
            top: 30px;
        }

        /* Left Little */

        /* Right Hand Finger Positions */
        #finger6-indicator {
            left: 115px;
            top: 70px;
        }

        /* Right Thumb */
        #finger7-indicator {
            left: 85px;
            top: 10px;
        }

        /* Right Index */
        #finger8-indicator {
            left: 55px;
            top: 1px;
        }

        /* Right Middle */
        #finger9-indicator {
            left: 27px;
            top: 5px;
        }

        /* Right Ring */
        #finger10-indicator {
            left: 5px;
            top: 30px;
        }

        /* Right Little */

        .finger-indicator.text-success {
            color: #28a745;
        }

        .finger-indicator.text-danger {
            color: #dc3545;
        }

        .finger-indicator:hover {
            cursor: pointer;
            opacity: 0.8;
            border-width: 2px;
        }

        .fingerprint-diagram h6 {
            color: #fff;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
        }

        .fingerprint-diagram p {
            color: #fff;
            margin: 0.5rem 0;
        }

        .fingerprint-diagram .text-success {
            color: #28a745;
        }

        .fingerprint-diagram .text-danger {
            color: #dc3545;
        }

        /* Urgent row styling */
        .table-warning {
            background-color: rgba(255, 193, 7, 0.15) !important;
        }

        /* Action buttons styling */
        .btn-action-group {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .btn-action-group .btn {
            white-space: nowrap;
        }
    </style>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>