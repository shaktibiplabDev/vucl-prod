<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// CSRF Token generation
if (!isset($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}

// Handle form submissions
try {
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'], $_POST['csrf_token'])) {
        // Validate CSRF token
        if ($_POST['csrf_token'] !== $_SESSION['csrf_token']) {
            throw new Exception('Invalid CSRF token');
        }

        $success = false;
        $message = '';

        if ($_POST['action'] === 'assign_service') {
            // Validate inputs
            if (!isset($_POST['operator_id'], $_POST['service_key'], $_POST['price'])) {
                throw new Exception('Missing required fields');
            }
            $operatorId = filter_var($_POST['operator_id'], FILTER_VALIDATE_INT);
            $serviceKey = filter_var($_POST['service_key'], FILTER_SANITIZE_STRING);
            $price = filter_var($_POST['price'], FILTER_VALIDATE_FLOAT);
            
            if (!$operatorId || !$serviceKey || $price === false) {
                throw new Exception('Invalid operator, service or price');
            }

            // Check if service is assignable
            $stmt = $pdo->prepare("SELECT is_assignable FROM prices_list WHERE service_key = ?");
            $stmt->execute([$serviceKey]);
            $service = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if (!$service || !$service['is_assignable']) {
                throw new Exception('This service cannot be assigned to operators');
            }

            // Assign service to operator
            $stmt = $pdo->prepare("
                INSERT INTO operator_services (operator_id, service_key, price, is_active)
                VALUES (:operator_id, :service_key, :price, :is_active)
                ON DUPLICATE KEY UPDATE 
                    price = VALUES(price),
                    is_active = VALUES(is_active)
            ");
            $success = $stmt->execute([
                'operator_id' => $operatorId,
                'service_key' => $serviceKey,
                'price' => $price,
                'is_active' => isset($_POST['is_active']) ? 1 : 0
            ]);
            $message = $success ? 'Service assigned successfully!' : 'Failed to assign service';

        } elseif ($_POST['action'] === 'update_access') {
            // Validate inputs
            if (!isset($_POST['id'], $_POST['is_active'])) {
                throw new Exception('Missing required fields');
            }
            $id = filter_var($_POST['id'], FILTER_VALIDATE_INT);
            $isActive = filter_var($_POST['is_active'], FILTER_VALIDATE_INT);
            if (!$id || !in_array($isActive, [0, 1])) {
                throw new Exception('Invalid service ID or status');
            }

            // Update operator service access
            $stmt = $pdo->prepare("
                UPDATE operator_services 
                SET is_active = :is_active
                WHERE id = :id
            ");
            $success = $stmt->execute([
                'id' => $id,
                'is_active' => $isActive
            ]);
            $message = $success ? 'Access updated successfully!' : 'Failed to update access';
            
        } elseif ($_POST['action'] === 'remove_service') {
            // Validate inputs
            if (!isset($_POST['id'])) {
                throw new Exception('Missing required fields');
            }
            $id = filter_var($_POST['id'], FILTER_VALIDATE_INT);
            if (!$id) {
                throw new Exception('Invalid service ID');
            }

            // Remove operator service
            $stmt = $pdo->prepare("
                DELETE FROM operator_services 
                WHERE id = :id
            ");
            $success = $stmt->execute(['id' => $id]);
            $message = $success ? 'Service removed successfully!' : 'Failed to remove service';
            
        } elseif ($_POST['action'] === 'update_price') {
            // Validate inputs
            if (!isset($_POST['id'], $_POST['price'])) {
                throw new Exception('Missing required fields');
            }
            $id = filter_var($_POST['id'], FILTER_VALIDATE_INT);
            $price = filter_var($_POST['price'], FILTER_VALIDATE_FLOAT);
            if (!$id || $price === false) {
                throw new Exception('Invalid service ID or price');
            }

            // Update operator service price
            $stmt = $pdo->prepare("
                UPDATE operator_services 
                SET price = :price
                WHERE id = :id
            ");
            $success = $stmt->execute([
                'id' => $id,
                'price' => $price
            ]);
            $message = $success ? 'Price updated successfully!' : 'Failed to update price';
        }

        // Set session message for SweetAlert
        $_SESSION['alert'] = [
            'type' => $success ? 'success' : 'error',
            'message' => $message
        ];

        // Redirect to avoid form resubmission
        header("Location: " . $_SERVER['PHP_SELF'] . (isset($_GET['operator_id']) ? '?operator_id=' . (int)$_GET['operator_id'] : ''));
        exit;
    }

    // Fetch all operators with their service counts
    $operators = $pdo->query("
        SELECT u.id, u.username, u.full_name, 
               COUNT(os.id) as service_count,
               SUM(CASE WHEN os.is_active = 1 THEN 1 ELSE 0 END) as active_service_count
        FROM users u
        LEFT JOIN operator_services os ON u.id = os.operator_id
        WHERE u.user_type = 'operator'
        GROUP BY u.id
        ORDER BY u.full_name
    ")->fetchAll(PDO::FETCH_ASSOC);

    // Fetch all services (only assignable ones for the assign form)
    $services = $pdo->query("
        SELECT service_key, service_name, is_assignable 
        FROM prices_list 
        ORDER BY service_name
    ")->fetchAll(PDO::FETCH_ASSOC);

    // Fetch current operator services if operator selected
    $operatorServices = [];
    $selectedOperator = null;
    if (isset($_GET['operator_id']) && is_numeric($_GET['operator_id'])) {
        $operatorId = (int)$_GET['operator_id'];
        $selectedOperatorStmt = $pdo->prepare("
            SELECT id, full_name, username 
            FROM users 
            WHERE id = ? AND user_type = 'operator'
        ");
        $selectedOperatorStmt->execute([$operatorId]);
        $selectedOperator = $selectedOperatorStmt->fetch(PDO::FETCH_ASSOC);

        if ($selectedOperator) {
            $operatorServicesStmt = $pdo->prepare("
                SELECT os.id, os.service_key, os.price, os.is_active, pl.service_name, pl.is_assignable
                FROM operator_services os
                JOIN prices_list pl ON os.service_key = pl.service_key
                WHERE os.operator_id = ?
                ORDER BY pl.service_name
            ");
            $operatorServicesStmt->execute([$operatorId]);
            $operatorServices = $operatorServicesStmt->fetchAll(PDO::FETCH_ASSOC);

            // Fetch unassigned services (only assignable ones)
            $unassignedServicesStmt = $pdo->prepare("
                SELECT pl.service_key, pl.service_name, pl.is_assignable
                FROM prices_list pl
                WHERE pl.service_key NOT IN (
                    SELECT service_key 
                    FROM operator_services 
                    WHERE operator_id = ?
                )
                AND pl.is_assignable = 1
                ORDER BY pl.service_name
            ");
            $unassignedServicesStmt->execute([$operatorId]);
            $unassignedServices = $unassignedServicesStmt->fetchAll(PDO::FETCH_ASSOC);
            
            // Also get non-assignable services for display purposes
            $nonAssignableServicesStmt = $pdo->prepare("
                SELECT pl.service_key, pl.service_name, pl.is_assignable
                FROM prices_list pl
                WHERE pl.service_key NOT IN (
                    SELECT service_key 
                    FROM operator_services 
                    WHERE operator_id = ?
                )
                AND pl.is_assignable = 0
                ORDER BY pl.service_name
            ");
            $nonAssignableServicesStmt->execute([$operatorId]);
            $nonAssignableServices = $nonAssignableServicesStmt->fetchAll(PDO::FETCH_ASSOC);
        } else {
            $_SESSION['alert'] = [
                'type' => 'error',
                'message' => 'Invalid operator selected'
            ];
            header("Location: " . $_SERVER['PHP_SELF']);
            exit;
        }
    }
} catch (Exception $e) {
    error_log("Error: " . $e->getMessage());
    $_SESSION['alert'] = [
        'type' => 'error',
        'message' => 'An error occurred: ' . htmlspecialchars($e->getMessage())
    ];
    header("Location: " . $_SERVER['PHP_SELF'] . (isset($_GET['operator_id']) ? '?operator_id=' . (int)$_GET['operator_id'] : ''));
    exit;
}

// Helper function to include files if they exist
function include_if_exists($path) {
    if (file_exists($path)) {
        include($path);
        return true;
    }
    error_log("Include file not found: $path");
    return false;
}
?>

<!DOCTYPE html>
<html
  lang="en"
  class="layout-navbar-fixed layout-menu-fixed layout-compact"
  dir="ltr"
  data-skin="default"
  data-assets-path="../../assets/"
  data-template="vertical-menu-template"
  data-bs-theme="light">
<head>
    <?php 
    if (!include_if_exists('includes/head.php')) {
        echo "<title>Operator Service Access</title>";
        echo '<meta charset="utf-8">';
        echo '<meta name="viewport" content="width=device-width, initial-scale=1">';
        echo '<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">';
    }
    ?>
    <!-- SweetAlert CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

    <style>
        :root {
            --primary-color: #7367f0;
            --success-color: #28c76f;
            --danger-color: #ea5455;
            --warning-color: #ff9f43;
            --secondary-color: #82868b;
            --dark-bg: #283046;
            --dark-card-bg: #161d31;
            --dark-text: #d0d2d6;
            --light-bg: #f8f8f8;
            --light-card-bg: #ffffff;
            --light-text: #6e6b7b;
        }

        [data-bs-theme="dark"] {
            --bg-color: var(--dark-bg);
            --card-bg: var(--dark-card-bg);
            --text-color: var(--dark-text);
            --border-color: #3b4253;
        }

        [data-bs-theme="light"] {
            --bg-color: var(--light-bg);
            --card-bg: var(--light-card-bg);
            --text-color: var(--light-text);
            --border-color: #ebe9f1;
        }

        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .card {
            background-color: var(--card-bg);
            border: 1px solid var(--border-color);
            color: var(--text-color);
        }

        .access-card {
            transition: all 0.3s ease;
            border-left: 4px solid var(--primary-color);
        }

        .access-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .status-toggle {
            cursor: pointer;
            min-width: 80px;
            transition: background-color 0.2s;
        }

        .service-badge {
            font-size: 0.85rem;
        }

        .operator-card {
            transition: all 0.2s;
            border: 1px solid var(--border-color);
            background-color: var(--card-bg);
        }

        .operator-card:hover {
            background-color: rgba(115, 103, 240, 0.1);
        }

        .operator-card.active {
            border-left: 4px solid var(--primary-color);
            background-color: rgba(115, 103, 240, 0.1);
        }

        .service-count {
            font-size: 0.75rem;
        }

        .assigned-service {
            background-color: rgba(40, 199, 111, 0.1);
        }

        .unassigned-service {
            background-color: rgba(234, 84, 85, 0.1);
        }

        .non-assignable-service {
            background-color: rgba(108, 117, 125, 0.1);
            opacity: 0.7;
        }

        .price-input {
            max-width: 120px;
        }

        .save-price-btn {
            margin-left: 8px;
            display: none;
        }

        .nav-tabs .nav-link {
            color: var(--text-color);
            border: 1px solid transparent;
        }

        .nav-tabs .nav-link.active {
            color: var(--primary-color);
            border-color: var(--border-color);
            border-bottom-color: var(--card-bg);
            background-color: var(--card-bg);
        }

        .nav-tabs {
            border-bottom: 1px solid var(--border-color);
        }

        .form-control, .form-select {
            background-color: var(--card-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
        }

        .form-control:focus, .form-select:focus {
            background-color: var(--card-bg);
            color: var(--text-color);
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(115, 103, 240, 0.25);
        }

        .input-group-text {
            background-color: var(--card-bg);
            color: var(--text-color);
            border: 1px solid var(--border-color);
        }

        /* SweetAlert theming */
        .swal2-popup {
            background-color: var(--card-bg) !important;
            color: var(--text-color) !important;
        }

        .swal2-title {
            color: var(--text-color) !important;
        }

        .swal2-html-container {
            color: var(--text-color) !important;
        }

        .swal2-confirm {
            background-color: var(--primary-color) !important;
            border-color: var(--primary-color) !important;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .card-body {
                padding: 1rem;
            }
            .status-toggle {
                min-width: 60px;
            }
            .service-badge {
                font-size: 0.75rem;
            }
            .price-input {
                max-width: 100%;
            }
        }

        /* Accessibility improvements */
        .status-toggle:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        .btn:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }
        
        /* Layout fixes */
        .layout-wrapper {
            min-height: 100vh;
        }
        
        .layout-container {
            display: flex;
            min-height: 100vh;
        }
        
        .layout-page {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .content-wrapper {
            flex: 1;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->
            <?php include_if_exists('includes/sidebar.php'); ?>

            <div class="menu-mobile-toggler d-xl-none rounded-1">
                <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
                    <i class="ti tabler-menu icon-base"></i>
                    <i class="ti tabler-chevron-right icon-base"></i>
                </a>
            </div>
            <!-- / Menu -->

            <!-- Layout container -->
            <div class="layout-page">
                <!-- Navbar -->
                <?php include_if_exists('includes/navbar.php'); ?>

                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <div class="container-xxl flex-grow-1 container-p-y">
                        <!-- SweetAlert Notification -->
                        <?php if (isset($_SESSION['alert'])): ?>
                            <div class="alert-notification" 
                                 data-type="<?= htmlspecialchars($_SESSION['alert']['type']) ?>" 
                                 data-message="<?= htmlspecialchars($_SESSION['alert']['message']) ?>">
                            </div>
                            <?php unset($_SESSION['alert']); ?>
                        <?php endif; ?>

                        <div class="row">
                            <div class="col-12">
                                <div class="card mb-4">
                                    <div class="card-header d-flex justify-content-between align-items-center">
                                        <h5 class="mb-0">Operator Service Access Management</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <!-- Operator List -->
                                            <div class="col-md-4 mb-4">
                                                <div class="card">
                                                    <div class="card-header">
                                                        <h6>Operators List</h6>
                                                    </div>
                                                    <div class="card-body p-0">
                                                        <div class="list-group list-group-flush">
                                                            <?php foreach ($operators as $operator): ?>
                                                                <a href="?operator_id=<?= $operator['id'] ?>" 
                                                                   class="list-group-item list-group-item-action operator-card <?= isset($_GET['operator_id']) && $_GET['operator_id'] == $operator['id'] ? 'active' : '' ?>"
                                                                   aria-current="<?= isset($_GET['operator_id']) && $_GET['operator_id'] == $operator['id'] ? 'true' : 'false' ?>">
                                                                    <div class="d-flex justify-content-between align-items-center">
                                                                        <div>
                                                                            <strong><?= htmlspecialchars($operator['full_name']) ?></strong>
                                                                            <div class="text-muted small">@<?= htmlspecialchars($operator['username']) ?></div>
                                                                        </div>
                                                                        <div class="text-end">
                                                                            <span class="badge bg-primary rounded-pill service-count">
                                                                                <?= $operator['active_service_count'] ?: '0' ?>/<?= $operator['service_count'] ?> active
                                                                            </span>
                                                                        </div>
                                                                    </div>
                                                                </a>
                                                            <?php endforeach; ?>
                                                        </div>
                                                    </div>
                                                </div>

                                                <?php if (isset($selectedOperator)): ?>
                                                    <div class="card mt-4">
                                                        <div class="card-header">
                                                            <h6>Assign Services to <?= htmlspecialchars($selectedOperator['full_name']) ?></h6>
                                                        </div>
                                                        <div class="card-body">
                                                            <form method="POST" id="assignServiceForm">
                                                                <input type="hidden" name="action" value="assign_service">
                                                                <input type="hidden" name="operator_id" value="<?= $selectedOperator['id'] ?>">
                                                                <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                                                <div class="mb-3">
                                                                    <label class="form-label" for="service_key">Select Service</label>
                                                                    <select name="service_key" id="service_key" class="form-select" required aria-describedby="service_key_help">
                                                                        <option value="">-- Select Service --</option>
                                                                        <?php foreach ($unassignedServices as $service): ?>
                                                                            <option value="<?= htmlspecialchars($service['service_key']) ?>" data-is-assignable="<?= $service['is_assignable'] ?>">
                                                                                <?= htmlspecialchars($service['service_name']) ?>
                                                                            </option>
                                                                        <?php endforeach; ?>
                                                                    </select>
                                                                    <div id="service_key_help" class="form-text">Choose a service to assign to the operator.</div>
                                                                </div>
                                                                <div class="mb-3">
                                                                    <label class="form-label" for="price">Price</label>
                                                                    <div class="input-group">
                                                                        <span class="input-group-text"><?= htmlspecialchars($user['currency'] ?? '₹') ?></span>
                                                                        <input type="number" class="form-control price-input" name="price" id="price" 
                                                                               step="0.01" min="0" value="0.00" required>
                                                                    </div>
                                                                </div>
                                                                <div class="mb-3 form-check">
                                                                    <input type="checkbox" class="form-check-input" name="is_active" id="is_active_new" checked>
                                                                    <label class="form-check-label" for="is_active_new">Active</label>
                                                                </div>
                                                                <button type="submit" class="btn btn-primary w-100">
                                                                    <i class="fas fa-plus me-1"></i> Assign Service
                                                                </button>
                                                            </form>
                                                        </div>
                                                    </div>
                                                <?php endif; ?>
                                            </div>

                                            <!-- Operator Details and Services -->
                                            <div class="col-md-8">
                                                <?php if (!isset($selectedOperator)): ?>
                                                    <div class="card">
                                                        <div class="card-body text-center py-5">
                                                            <div class="mb-3">
                                                                <i class="fas fa-user text-muted" style="font-size: 3rem;"></i>
                                                            </div>
                                                            <h5>Select an operator to manage services</h5>
                                                            <p class="text-muted">Choose an operator from the list to view and manage their assigned services</p>
                                                        </div>
                                                    </div>
                                                <?php else: ?>
                                                    <div class="card">
                                                        <div class="card-header d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <h6 class="mb-0"><?= htmlspecialchars($selectedOperator['full_name']) ?></h6>
                                                                <small class="text-muted">@<?= htmlspecialchars($selectedOperator['username']) ?></small>
                                                            </div>
                                                            <div>
                                                                <span class="badge bg-primary">
                                                                    <?= count($operatorServices) ?> services assigned
                                                                </span>
                                                            </div>
                                                        </div>
                                                        <div class="card-body">
                                                            <ul class="nav nav-tabs mb-4" id="servicesTab" role="tablist">
                                                                <li class="nav-item" role="presentation">
                                                                    <button class="nav-link active" id="assigned-tab" data-bs-toggle="tab" data-bs-target="#assigned" type="button" role="tab" aria-controls="assigned" aria-selected="true">
                                                                        Assigned Services (<?= count($operatorServices) ?>)
                                                                    </button>
                                                                </li>
                                                                <li class="nav-item" role="presentation">
                                                                    <button class="nav-link" id="unassigned-tab" data-bs-toggle="tab" data-bs-target="#unassigned" type="button" role="tab" aria-controls="unassigned" aria-selected="false">
                                                                        Available Services (<?= count($unassignedServices) + count($nonAssignableServices) ?>)
                                                                    </button>
                                                                </li>
                                                            </ul>

                                                            <div class="tab-content" id="servicesTabContent">
                                                                <!-- Assigned Services Tab -->
                                                                <div class="tab-pane fade show active" id="assigned" role="tabpanel" aria-labelledby="assigned-tab">
                                                                    <?php if (empty($operatorServices)): ?>
                                                                        <div class="alert alert-warning">No services assigned to this operator</div>
                                                                    <?php else: ?>
                                                                        <div class="row g-3">
                                                                            <?php foreach ($operatorServices as $service): ?>
                                                                                <div class="col-md-6">
                                                                                    <div class="card access-card assigned-service">
                                                                                        <div class="card-body">
                                                                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                                                                <h6 class="card-title mb-0"><?= htmlspecialchars($service['service_name']) ?></h6>
                                                                                                <form method="POST" class="d-inline">
                                                                                                    <input type="hidden" name="action" value="update_access">
                                                                                                    <input type="hidden" name="id" value="<?= $service['id'] ?>">
                                                                                                    <input type="hidden" name="is_active" value="<?= $service['is_active'] ? '0' : '1' ?>">
                                                                                                    <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                                                                                    <span class="badge status-toggle <?= $service['is_active'] ? 'bg-success' : 'bg-secondary' ?>" 
                                                                                                          onclick="toggleServiceStatus(this, '<?= htmlspecialchars($service['service_name']) ?>')"
                                                                                                          tabindex="0" role="button" aria-label="<?= $service['is_active'] ? 'Deactivate' : 'Activate' ?> service">
                                                                                                        <?= $service['is_active'] ? 'Active' : 'Inactive' ?>
                                                                                                    </span>
                                                                                                </form>
                                                                                            </div>
                                                                                            <div class="d-flex justify-content-between align-items-center">
                                                                                                <span class="badge service-badge bg-label-primary">
                                                                                                    <?= htmlspecialchars($service['service_key']) ?>
                                                                                                </span>
                                                                                                <div class="d-flex align-items-center">
                                                                                                    <form method="POST" class="d-flex me-2 price-form">
                                                                                                        <input type="hidden" name="action" value="update_price">
                                                                                                        <input type="hidden" name="id" value="<?= $service['id'] ?>">
                                                                                                        <input type="hidden" name="csrf_token" value="<?= $_SESSION['csrf_token'] ?>">
                                                                                                        <div class="input-group input-group-sm">
                                                                                                            <span class="input-group-text"><?= htmlspecialchars($user['currency'] ?? '₹') ?></span>
                                                                                                            <input type="number" class="form-control form-control-sm price-input" 
                                                                                                                   name="price" value="<?= number_format($service['price'], 2) ?>" 
                                                                                                                   step="0.01" min="0" required>
                                                                                                        </div>
                                                                                                        <button type="submit" class="btn btn-sm btn-success save-price-btn" style="display: none;">
                                                                                                            <i class="fas fa-check"></i>
                                                                                                        </button>
                                                                                                    </form>
                                                                                                    <button class="btn btn-sm btn-outline-danger" 
                                                                                                            onclick="confirmRemoveService('<?= $service['id'] ?>', '<?= htmlspecialchars($service['service_name']) ?>')"
                                                                                                            aria-label="Remove service" <?= !$service['is_assignable'] ? 'disabled title="This service cannot be removed"' : '' ?>>
                                                                                                        <i class="fas fa-trash"></i>
                                                                                                    </button>
                                                                                                </div>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            <?php endforeach; ?>
                                                                        </div>
                                                                    <?php endif; ?>
                                                                </div>

                                                                <!-- Unassigned Services Tab -->
                                                                <div class="tab-pane fade" id="unassigned" role="tabpanel" aria-labelledby="unassigned-tab">
                                                                    <?php if (empty($unassignedServices) && empty($nonAssignableServices)): ?>
                                                                        <div class="alert alert-success">All available services are assigned to this operator</div>
                                                                    <?php else: ?>
                                                                        <div class="row g-3">
                                                                            <?php if (!empty($unassignedServices)): ?>
                                                                                <div class="col-12">
                                                                                    <h6 class="mb-3">Assignable Services</h6>
                                                                                </div>
                                                                                <?php foreach ($unassignedServices as $service): ?>
                                                                                    <div class="col-md-6">
                                                                                        <div class="card access-card unassigned-service">
                                                                                            <div class="card-body">
                                                                                                <h6 class="card-title"><?= htmlspecialchars($service['service_name']) ?></h6>
                                                                                                <div class="d-flex justify-content-between align-items-center">
                                                                                                    <span class="badge service-badge bg-label-secondary">
                                                                                                        <?= htmlspecialchars($service['service_key']) ?>
                                                                                                    </span>
                                                                                                    <button class="btn btn-sm btn-outline-primary" 
                                                                                                            onclick="assignService('<?= $selectedOperator['id'] ?>', '<?= $service['service_key'] ?>', '<?= htmlspecialchars($service['service_name']) ?>')"
                                                                                                            aria-label="Assign service">
                                                                                                        <i class="fas fa-plus"></i> Assign
                                                                                                    </button>
                                                                                                </div>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                <?php endforeach; ?>
                                                                            <?php endif; ?>
                                                                            
                                                                            <?php if (!empty($nonAssignableServices)): ?>
                                                                                <div class="col-12 mt-4">
                                                                                    <h6 class="mb-3">Non-Assignable Services</h6>
                                                                                    <div class="alert alert-warning">
                                                                                        <i class="fas fa-info-circle me-2"></i>
                                                                                        These services cannot be assigned to operators individually
                                                                                    </div>
                                                                                </div>
                                                                                <?php foreach ($nonAssignableServices as $service): ?>
                                                                                    <div class="col-md-6">
                                                                                        <div class="card access-card non-assignable-service">
                                                                                            <div class="card-body">
                                                                                                <h6 class="card-title"><?= htmlspecialchars($service['service_name']) ?></h6>
                                                                                                <div class="d-flex justify-content-between align-items-center">
                                                                                                    <span class="badge service-badge bg-label-secondary">
                                                                                                        <?= htmlspecialchars($service['service_key']) ?>
                                                                                                    </span>
                                                                                                    <span class="badge bg-dark">Not Assignable</span>
                                                                                                </div>
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                <?php endforeach; ?>
                                                                            <?php endif; ?>
                                                                        </div>
                                                                    <?php endif; ?>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                <?php endif; ?>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Footer -->
                    <?php include_if_exists('includes/footer.php'); ?>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <?php 
    if (!include_if_exists('includes/script.php')) {
        echo '<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>';
    }
    ?>
    
    <!-- SweetAlert JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script>
        // Show SweetAlert notifications
        document.addEventListener('DOMContentLoaded', function() {
            const alert = document.querySelector('.alert-notification');
            if (alert) {
                Swal.fire({
                    icon: alert.dataset.type,
                    title: alert.dataset.message,
                    position: 'center',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    backdrop: 'rgba(0,0,0,0.4)'
                });
            }

            // Initialize Bootstrap tabs
            const tabElms = document.querySelectorAll('button[data-bs-toggle="tab"]');
            tabElms.forEach(tabEl => {
                tabEl.addEventListener('click', function() {
                    const target = this.getAttribute('data-bs-target');
                    document.querySelectorAll('.tab-pane').forEach(pane => {
                        pane.classList.remove('show', 'active');
                    });
                    document.querySelector(target).classList.add('show', 'active');
                    
                    document.querySelectorAll('.nav-link').forEach(link => {
                        link.classList.remove('active');
                    });
                    this.classList.add('active');
                });
            });
            
            // Set up price input formatting and save button visibility
            document.querySelectorAll('.price-input').forEach(input => {
                const form = input.closest('.price-form');
                const saveBtn = form.querySelector('.save-price-btn');
                const initialValue = input.value;
                
                input.addEventListener('blur', function() {
                    if (this.value && !isNaN(this.value)) {
                        this.value = parseFloat(this.value).toFixed(2);
                    }
                });
                
                input.addEventListener('input', function() {
                    if (this.value !== initialValue) {
                        saveBtn.style.display = 'block';
                    } else {
                        saveBtn.style.display = 'none';
                    }
                });
                
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    const serviceId = this.querySelector('input[name="id"]').value;
                    const serviceName = this.closest('.card').querySelector('.card-title').textContent;
                    updatePrice(e, this, serviceId, serviceName);
                });
            });
        });

        // Toggle service status with confirmation
        function toggleServiceStatus(element, serviceName) {
            const isActive = element.classList.contains('bg-success');
            Swal.fire({
                title: 'Confirm Status Change',
                text: `Are you sure you want to ${isActive ? 'deactivate' : 'activate'} "${serviceName}"?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, change it!',
                cancelButtonText: 'Cancel',
                backdrop: 'rgba(0,0,0,0.4)'
            }).then((result) => {
                if (result.isConfirmed) {
                    element.closest('form').submit();
                }
            });
        }

        // Assign service with SweetAlert
        function assignService(operatorId, serviceKey, serviceName) {
            Swal.fire({
                title: 'Assign Service',
                html: `
                    <div class="text-start">
                        <p>Assign <strong>${serviceName}</strong> to this operator?</p>
                        <div class="mb-3">
                            <label class="form-label">Price</label>
                            <div class="input-group">
                                <span class="input-group-text"><?= htmlspecialchars($user['currency'] ?? '₹') ?></span>
                                <input type="number" class="form-control" id="assignPrice" 
                                       step="0.01" min="0" value="0.00" required>
                            </div>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="assignActive" checked>
                            <label class="form-check-label" for="assignActive">Active</label>
                        </div>
                    </div>
                `,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Assign',
                cancelButtonText: 'Cancel',
                showLoaderOnConfirm: true,
                backdrop: 'rgba(0,0,0,0.4)',
                preConfirm: () => {
                    const price = document.getElementById('assignPrice').value;
                    const isActive = document.getElementById('assignActive').checked ? 1 : 0;
                    
                    if (!price || isNaN(price)) {
                        Swal.showValidationMessage('Please enter a valid price');
                        return false;
                    }

                    const formData = new FormData();
                    formData.append('action', 'assign_service');
                    formData.append('operator_id', operatorId);
                    formData.append('service_key', serviceKey);
                    formData.append('price', price);
                    formData.append('is_active', isActive);
                    formData.append('csrf_token', '<?= $_SESSION['csrf_token'] ?>');

                    return fetch(window.location.href, {
                        method: 'POST',
                        body: formData
                    }).then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to assign service');
                        }
                        return response;
                    }).catch(error => {
                        Swal.showValidationMessage(`Request failed: ${error}`);
                    });
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.reload();
                }
            });
        }

        // Remove service with confirmation
        function confirmRemoveService(serviceId, serviceName) {
            Swal.fire({
                title: 'Remove Service Access',
                html: `Are you sure you want to completely remove <strong>${serviceName}</strong> from this operator?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, remove it!',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#dc3545',
                showLoaderOnConfirm: true,
                backdrop: 'rgba(0,0,0,0.4)',
                preConfirm: () => {
                    const formData = new FormData();
                    formData.append('action', 'remove_service');
                    formData.append('id', serviceId);
                    formData.append('csrf_token', '<?= $_SESSION['csrf_token'] ?>');

                    return fetch(window.location.href, {
                        method: 'POST',
                        body: formData
                    }).then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to remove service');
                        }
                        return response;
                    }).catch(error => {
                        Swal.showValidationMessage(`Request failed: ${error}`);
                    });
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.reload();
                }
            });
        }
        
        // Update price with confirmation
        function updatePrice(event, formElement, serviceId, serviceName) {
            event.preventDefault();
            
            const priceInput = formElement.querySelector('input[name="price"]');
            const newPrice = priceInput.value;
            
            if (!newPrice || isNaN(newPrice)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Price',
                    text: 'Please enter a valid price',
                    backdrop: 'rgba(0,0,0,0.4)'
                });
                return;
            }
            
            Swal.fire({
                title: 'Update Price',
                html: `Update price for <strong>${serviceName}</strong> to <?= htmlspecialchars($user['currency'] ?? '₹') ?>${parseFloat(newPrice).toFixed(2)}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Update',
                cancelButtonText: 'Cancel',
                showLoaderOnConfirm: true,
                backdrop: 'rgba(0,0,0,0.4)',
                preConfirm: () => {
                    return fetch(window.location.href, {
                        method: 'POST',
                        body: new FormData(formElement)
                    }).then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to update price');
                        }
                        return response;
                    }).catch(error => {
                        Swal.showValidationMessage(`Request failed: ${error}`);
                    });
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.reload();
                } else {
                    // Reset the save button if cancelled
                    formElement.querySelector('.save-price-btn').style.display = 'none';
                }
            });
        }

        // Handle keyboard navigation for status toggle
        document.querySelectorAll('.status-toggle').forEach(element => {
            element.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    toggleServiceStatus(element, element.closest('.card').querySelector('.card-title').textContent);
                }
            });
        });
    </script>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>