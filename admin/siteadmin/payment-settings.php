<?php
$code = base64_decode('<?php
error_reporting(E_ALL);
ini_set('display_errors', 1);
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Initialize variables
$errors = [];
$success = '';

// WamoSync Payment Gateway Details
$wamosyncGateway = [
    'gateway_name' => 'Charge Payments',
    'api_url' => 'https://charge.wamosync.in',
    'description' => 'Fast, secure payments with lowest fees in industry',
    'benefits' => [
        '0% transaction fee (others charge 2-3%)',
        'Instant settlements',
        'Easy integration'
    ]
];

// Create upi_payments table if not exists
$pdo->exec("CREATE TABLE IF NOT EXISTS upi_payments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    upi_id VARCHAR(100) NOT NULL,
    qr_code_image VARCHAR(255) NOT NULL,
    is_default TINYINT(1) DEFAULT 0,
    active TINYINT(1) DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
)");

// Handle file upload
function handleFileUpload($file, $uploadDir = '../../assets/uploads/qrcodes/') {
    if (!file_exists($uploadDir)) {
        mkdir($uploadDir, 0777, true);
    }

    // Generate unique filename
    $extension = pathinfo($file['name'], PATHINFO_EXTENSION);
    $fileName = 'qr_' . uniqid() . '.' . $extension;
    $targetPath = $uploadDir . $fileName;

    // Validate image
    $allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
    $fileType = mime_content_type($file['tmp_name']);
    
    if (!in_array($fileType, $allowedTypes)) {
        return false;
    }

    if (move_uploaded_file($file['tmp_name'], $targetPath)) {
        return $targetPath;
    }
    return false;
}

// Handle form submissions with redirects
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['add_wamosync'])) {
        // Add WamoSync payment gateway
        $user_token = trim($_POST['user_token'] ?? '');
        
        if (empty($user_token)) {
            $_SESSION['errors'] = ['API token is required'];
        } elseif (strlen($user_token) < 20) {
            $_SESSION['errors'] = ['API token must be at least 20 characters'];
        }
        
        if (empty($_SESSION['errors'])) {
            // Check if WamoSync already exists
            $exists = $pdo->prepare("SELECT id FROM payment_settings WHERE api_url = ?");
            $exists->execute([$wamosyncGateway['api_url']]);
            
            if ($exists->rowCount() > 0) {
                $_SESSION['errors'] = ['WamoSync payment gateway already exists'];
            } else {
                // Begin transaction
                $pdo->beginTransaction();
                
                try {
                    // If setting as primary, first unset any existing primary
                    $pdo->exec("UPDATE payment_settings SET is_primary = 0");
                    
                    $stmt = $pdo->prepare("INSERT INTO payment_settings (
                        gateway_name, 
                        api_url, 
                        user_token, 
                        active, 
                        is_primary,
                        min_amt,
                        created_at,
                        updated_at
                    ) VALUES (?, ?, ?, 1, 1, 1.00, NOW(), NOW())");
                    
                    $stmt->execute([
                        $wamosyncGateway['gateway_name'],
                        $wamosyncGateway['api_url'],
                        $user_token
                    ]);
                    
                    $pdo->commit();
                    $_SESSION['success'] = 'WamoSync payment gateway added successfully and set as primary!';
                } catch (PDOException $e) {
                    $pdo->rollBack();
                    $_SESSION['errors'] = ['Failed to add WamoSync gateway: ' . $e->getMessage()];
                }
            }
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    } 
    elseif (isset($_POST['add_payment'])) {
        // Add new payment gateway
        $gateway_name = trim($_POST['gateway_name'] ?? '');
        $api_url = trim($_POST['api_url'] ?? '');
        $user_token = trim($_POST['user_token'] ?? '');
        $min_amt = isset($_POST['min_amt']) ? (float)$_POST['min_amt'] : 1.00;
        $active = isset($_POST['active']) ? 1 : 0;
        $is_primary = isset($_POST['is_primary']) ? 1 : 0;
        
        // Validate inputs
        if (empty($gateway_name)) {
            $_SESSION['errors'][] = 'Gateway name is required';
        }
        
        if (empty($api_url)) {
            $_SESSION['errors'][] = 'API URL is required';
        } elseif (!filter_var($api_url, FILTER_VALIDATE_URL)) {
            $_SESSION['errors'][] = 'Invalid API URL format';
        }
        
        if (empty($user_token)) {
            $_SESSION['errors'][] = 'User token is required';
        }
        
        if ($min_amt < 0) {
            $_SESSION['errors'][] = 'Minimum amount cannot be negative';
        }
        
        if (empty($_SESSION['errors'])) {
            $pdo->beginTransaction();
            
            try {
                // If setting as primary, first unset any existing primary
                if ($is_primary) {
                    $pdo->exec("UPDATE payment_settings SET is_primary = 0");
                }
                
                $stmt = $pdo->prepare("INSERT INTO payment_settings (
                    gateway_name, 
                    api_url, 
                    user_token, 
                    active, 
                    is_primary,
                    min_amt,
                    created_at,
                    updated_at
                ) VALUES (?, ?, ?, ?, ?, ?, NOW(), NOW())");
                
                $stmt->execute([
                    $gateway_name,
                    $api_url,
                    $user_token,
                    $active,
                    $is_primary,
                    $min_amt
                ]);
                
                $pdo->commit();
                $_SESSION['success'] = 'Payment gateway added successfully!';
            } catch (PDOException $e) {
                $pdo->rollBack();
                $_SESSION['errors'][] = 'Failed to add payment gateway: ' . $e->getMessage();
            }
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    } 
    elseif (isset($_POST['edit_payment'])) {
        // Edit existing payment gateway
        $id = (int)$_POST['id'];
        $gateway_name = trim($_POST['gateway_name'] ?? '');
        $api_url = trim($_POST['api_url'] ?? '');
        $user_token = trim($_POST['user_token'] ?? '');
        $min_amt = isset($_POST['min_amt']) ? (float)$_POST['min_amt'] : 1.00;
        $active = isset($_POST['active']) ? 1 : 0;
        
        // Validate inputs
        if (empty($gateway_name)) {
            $_SESSION['errors'][] = 'Gateway name is required';
        }
        
        if (empty($api_url)) {
            $_SESSION['errors'][] = 'API URL is required';
        } elseif (!filter_var($api_url, FILTER_VALIDATE_URL)) {
            $_SESSION['errors'][] = 'Invalid API URL format';
        }
        
        if (empty($user_token)) {
            $_SESSION['errors'][] = 'User token is required';
        }
        
        if ($min_amt < 0) {
            $_SESSION['errors'][] = 'Minimum amount cannot be negative';
        }
        
        if (empty($_SESSION['errors'])) {
            $pdo->beginTransaction();
            
            try {
                $stmt = $pdo->prepare("UPDATE payment_settings SET 
                    gateway_name = ?, 
                    api_url = ?, 
                    user_token = ?, 
                    min_amt = ?, 
                    active = ?,
                    updated_at = NOW()
                    WHERE id = ?");
                
                $stmt->execute([
                    $gateway_name,
                    $api_url,
                    $user_token,
                    $min_amt,
                    $active,
                    $id
                ]);
                
                $pdo->commit();
                $_SESSION['success'] = 'Payment gateway updated successfully!';
            } catch (PDOException $e) {
                $pdo->rollBack();
                $_SESSION['errors'][] = 'Failed to update payment gateway: ' . $e->getMessage();
            }
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    }
    elseif (isset($_POST['set_primary'])) {
        // Set payment gateway as primary
        $id = (int)$_POST['id'];
        
        $pdo->beginTransaction();
        
        try {
            // First unset any existing primary
            $pdo->exec("UPDATE payment_settings SET is_primary = 0");
            
            // Set the selected one as primary
            $stmt = $pdo->prepare("UPDATE payment_settings SET is_primary = 1 WHERE id = ?");
            $stmt->execute([$id]);
            
            $pdo->commit();
            $_SESSION['success'] = 'Primary payment gateway updated!';
        } catch (PDOException $e) {
            $pdo->rollBack();
            $_SESSION['errors'][] = 'Failed to set primary gateway: ' . $e->getMessage();
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    } 
    elseif (isset($_POST['toggle_active'])) {
        // Toggle active status
        $id = (int)$_POST['id'];
        $current_status = (int)$_POST['current_status'];
        $new_status = $current_status ? 0 : 1;
        
        try {
            $stmt = $pdo->prepare("UPDATE payment_settings SET active = ? WHERE id = ?");
            $stmt->execute([$new_status, $id]);
            $_SESSION['success'] = 'Payment gateway status updated!';
        } catch (PDOException $e) {
            $_SESSION['errors'][] = 'Failed to update status: ' . $e->getMessage();
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    }
    elseif (isset($_POST['delete_payment'])) {
        // Delete payment gateway
        $id = (int)$_POST['id'];
        
        try {
            $stmt = $pdo->prepare("DELETE FROM payment_settings WHERE id = ?");
            $stmt->execute([$id]);
            $_SESSION['success'] = 'Payment gateway deleted successfully!';
        } catch (PDOException $e) {
            $_SESSION['errors'][] = 'Failed to delete payment gateway: ' . $e->getMessage();
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    }
    elseif (isset($_POST['add_upi_payment'])) {
        // Add UPI payment method
        $upi_id = trim($_POST['upi_id'] ?? '');
        $is_default = isset($_POST['is_default']) ? 1 : 0;
        
        if (empty($upi_id)) {
            $_SESSION['errors'][] = 'UPI ID is required';
        } elseif (!preg_match('/^[a-zA-Z0-9._-]+@[a-zA-Z0-9]+$/', $upi_id)) {
            $_SESSION['errors'][] = 'Invalid UPI ID format (should be like name@upi)';
        }
        
        if (!isset($_FILES['qr_code']) || $_FILES['qr_code']['error'] !== UPLOAD_ERR_OK) {
            $_SESSION['errors'][] = 'QR code image is required';
        }
        
        if (empty($_SESSION['errors'])) {
            $qr_code_path = handleFileUpload($_FILES['qr_code']);
            if (!$qr_code_path) {
                $_SESSION['errors'][] = 'Failed to upload QR code image (only JPG/PNG/GIF allowed)';
            } else {
                $pdo->beginTransaction();
                
                try {
                    // If setting as default, first unset any existing default
                    if ($is_default) {
                        $pdo->exec("UPDATE upi_payments SET is_default = 0");
                    }
                    
                    $stmt = $pdo->prepare("INSERT INTO upi_payments (
                        upi_id, 
                        qr_code_image, 
                        is_default,
                        active,
                        created_at,
                        updated_at
                    ) VALUES (?, ?, ?, 1, NOW(), NOW())");
                    
                    $stmt->execute([
                        $upi_id,
                        $qr_code_path,
                        $is_default
                    ]);
                    
                    $pdo->commit();
                    $_SESSION['success'] = 'UPI payment method added successfully!';
                } catch (PDOException $e) {
                    // Delete uploaded file if transaction fails
                    if (isset($qr_code_path) && file_exists($qr_code_path)) {
                        unlink($qr_code_path);
                    }
                    $pdo->rollBack();
                    $_SESSION['errors'][] = 'Failed to add UPI payment: ' . $e->getMessage();
                }
            }
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    }
    elseif (isset($_POST['set_default_upi'])) {
        // Set UPI payment as default
        $id = (int)$_POST['id'];
        
        $pdo->beginTransaction();
        
        try {
            // First unset any existing default
            $pdo->exec("UPDATE upi_payments SET is_default = 0");
            
            // Set the selected one as default
            $stmt = $pdo->prepare("UPDATE upi_payments SET is_default = 1 WHERE id = ?");
            $stmt->execute([$id]);
            
            $pdo->commit();
            $_SESSION['success'] = 'Default UPI payment updated!';
        } catch (PDOException $e) {
            $pdo->rollBack();
            $_SESSION['errors'][] = 'Failed to set default UPI: ' . $e->getMessage();
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    } 
    elseif (isset($_POST['toggle_upi_active'])) {
        // Toggle UPI payment active status
        $id = (int)$_POST['id'];
        $current_status = (int)$_POST['current_status'];
        $new_status = $current_status ? 0 : 1;
        
        try {
            $stmt = $pdo->prepare("UPDATE upi_payments SET active = ? WHERE id = ?");
            $stmt->execute([$new_status, $id]);
            $_SESSION['success'] = 'UPI payment status updated!';
        } catch (PDOException $e) {
            $_SESSION['errors'][] = 'Failed to update UPI status: ' . $e->getMessage();
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    }
    elseif (isset($_POST['delete_upi_payment'])) {
        // Delete UPI payment method
        $id = (int)$_POST['id'];
        
        $pdo->beginTransaction();
        
        try {
            // First get the QR code path to delete the file
            $stmt = $pdo->prepare("SELECT qr_code_image FROM upi_payments WHERE id = ?");
            $stmt->execute([$id]);
            $result = $stmt->fetch(PDO::FETCH_ASSOC);
            
            // Delete the record
            $stmt = $pdo->prepare("DELETE FROM upi_payments WHERE id = ?");
            $stmt->execute([$id]);
            
            // Delete the file if it exists
            if ($result && !empty($result['qr_code_image']) && file_exists($result['qr_code_image'])) {
                unlink($result['qr_code_image']);
            }
            
            $pdo->commit();
            $_SESSION['success'] = 'UPI payment method deleted successfully!';
        } catch (PDOException $e) {
            $pdo->rollBack();
            $_SESSION['errors'][] = 'Failed to delete UPI payment: ' . $e->getMessage();
        }
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    }
}

// Get messages from session and clear them
$errors = $_SESSION['errors'] ?? [];
$success = $_SESSION['success'] ?? '';
unset($_SESSION['errors']);
unset($_SESSION['success']);

// Get all payment settings
$payment_settings = $pdo->query("SELECT * FROM payment_settings ORDER BY is_primary DESC, active DESC, gateway_name ASC")->fetchAll(PDO::FETCH_ASSOC);

// Get all UPI payment methods
$upi_payments = $pdo->query("SELECT * FROM upi_payments ORDER BY is_default DESC, active DESC, created_at ASC")->fetchAll(PDO::FETCH_ASSOC);

// Check if WamoSync is already configured
$wamosync_configured = false;
foreach ($payment_settings as $setting) {
    if ($setting['api_url'] === $wamosyncGateway['api_url']) {
        $wamosync_configured = true;
        break;
    }
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
        <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
          <?php include('includes/navbar.php'); ?>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <!-- Success/Error Messages -->
              <?php if (!empty($success)): ?>
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                  <?= htmlspecialchars($success) ?>
                  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
              <?php endif; ?>
              
              <?php if (!empty($errors)): ?>
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                  <ul class="mb-0">
                    <?php foreach ($errors as $error): ?>
                      <li><?= htmlspecialchars($error) ?></li>
                    <?php endforeach; ?>
                  </ul>
                  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
              <?php endif; ?>
              
              <!-- WamoSync Promotion Card -->
              <?php if (!$wamosync_configured): ?>
                <div class="card mb-4">
                  <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
                    <h5 class="mb-0" style="color: white;">Recommended Payment Gateway</h5>
                    <span class="badge bg-white text-primary">Best Choice</span>
                  </div>
                  <br>
                  <div class="card-body">
                    <div class="row">
                      <div class="col-md-8">
                        <h4><?= $wamosyncGateway['gateway_name'] ?></h4>
                        <p><?= $wamosyncGateway['description'] ?></p>
                        <ul class="list-group list-group-flush mb-3">
                          <?php foreach ($wamosyncGateway['benefits'] as $benefit): ?>
                            <li class="list-group-item bg-transparent"><i class="ti tabler-check text-success me-2"></i><?= $benefit ?></li>
                          <?php endforeach; ?>
                        </ul>
                        <a href="https://charge.wamosync.in" target="_blank" class="btn btn-outline-primary">Learn More</a>
                      </div>
                      <div class="col-md-4">
                        <div class="card border p-3 rounded">
                          <h5 class="text-center mb-3">Quick Setup</h5>
                          <form method="POST">
                            <div class="mb-3">
                              <label class="form-label">Your API Token</label>
                              <input type="text" class="form-control" name="user_token" required placeholder="Enter your Charge API token">
                              <small class="text-muted">Get this from your Charge dashboard</small>
                            </div>
                            <button type="submit" name="add_wamosync" class="btn btn-primary w-100">
                              <i class="ti tabler-check me-1"></i> Activate Charge
                            </button>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              <?php endif; ?>
              
              <!-- Online Payment Gateways Card -->
              <div class="card mb-4">
                <h5 class="card-header pb-0 text-md-start text-center d-flex justify-content-between align-items-center">
                  <span>Online Payment Gateways</span>
                  <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addPaymentModal">
                    <i class="ti tabler-plus me-1"></i> Add Gateway
                  </button>
                </h5>
                <br>
                <div class="card-body">
                  <?php if (empty($payment_settings)): ?>
                    <div class="alert alert-info">
                      No payment gateways configured yet. Add your first payment gateway.
                    </div>
                  <?php else: ?>
                    <div class="table-responsive">
                      <table class="table table-striped" id="paymentSettingsTable">
                        <thead>
                          <tr>
                            <th>ID</th>
                            <th>Gateway Name</th>
                            <th>API URL</th>
                            <th>Min Amount</th>
                            <th>Status</th>
                            <th>Primary</th>
                            <th>Created At</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          <?php foreach ($payment_settings as $setting): ?>
                            <tr>
                                <td><?= $serial = isset($serial) ? $serial + 1 : 1 ?></td>
                              <td>
                                <?= htmlspecialchars($setting['gateway_name']) ?>
                                <?php if ($setting['api_url'] === $wamosyncGateway['api_url']): ?>
                                  <span class="badge bg-primary ms-2">Recommended</span>
                                <?php endif; ?>
                              </td>
                              <td>
                                <small class="text-muted"><?= htmlspecialchars($setting['api_url']) ?></small>
                              </td>
                              <td>₹<?= number_format($setting['min_amt'], 2) ?></td>
                              <td>
                                <form method="POST" class="d-inline">
                                  <input type="hidden" name="id" value="<?= $setting['id'] ?>">
                                  <input type="hidden" name="current_status" value="<?= $setting['active'] ?>">
                                  <button type="submit" name="toggle_active" class="btn btn-sm <?= $setting['active'] ? 'btn-success' : 'btn-secondary' ?>">
                                    <?= $setting['active'] ? 'Active' : 'Inactive' ?>
                                  </button>
                                </form>
                              </td>
                              <td>
                                <?php if ($setting['is_primary']): ?>
                                  <span class="badge bg-primary">Primary</span>
                                <?php else: ?>
                                  <form method="POST" class="d-inline">
                                    <input type="hidden" name="id" value="<?= $setting['id'] ?>">
                                    <button type="submit" name="set_primary" class="btn btn-sm btn-outline-primary">
                                      Set as Primary
                                    </button>
                                  </form>
                                <?php endif; ?>
                              </td>
                              <td><?= date('d M Y H:i', strtotime($setting['created_at'])) ?></td>
                              <td>
                                <div class="d-flex gap-2">
                                  <button class="btn btn-sm btn-icon btn-outline-info" data-bs-toggle="modal" data-bs-target="#editPaymentModal" 
                                    data-id="<?= $setting['id'] ?>"
                                    data-gateway="<?= htmlspecialchars($setting['gateway_name']) ?>"
                                    data-api="<?= htmlspecialchars($setting['api_url']) ?>"
                                    data-token=""
                                    data-minamt="<?= $setting['min_amt'] ?>"
                                    data-active="<?= $setting['active'] ?>">
                                    <i class="ti tabler-edit"></i>
                                  </button>
                                  <form method="POST" onsubmit="return confirm('Are you sure you want to delete this payment gateway?')">
                                    <input type="hidden" name="id" value="<?= $setting['id'] ?>">
                                    <button type="submit" name="delete_payment" class="btn btn-sm btn-icon btn-outline-danger">
                                      <i class="ti tabler-trash"></i>
                                    </button>
                                  </form>
                                </div>
                              </td>
                            </tr>
                          <?php endforeach; ?>
                        </tbody>
                      </table>
                    </div>
                  <?php endif; ?>
                </div>
              </div>
              
              <!-- UPI Payment Methods Card -->
              <div class="card">
                <h5 class="card-header pb-0 text-md-start text-center d-flex justify-content-between align-items-center">
                  <span>Offline UPI Payment Methods</span>
                  <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUPIPaymentModal">
                    <i class="ti tabler-plus me-1"></i> Add UPI Method
                  </button>
                </h5>
                <br>
                <div class="card-body">
                  <?php if (empty($upi_payments)): ?>
                    <div class="alert alert-info">
                      No UPI payment methods configured yet. Add your first UPI method.
                    </div>
                  <?php else: ?>
                    <div class="table-responsive">
                      <table class="table table-striped" id="upiPaymentsTable">
                        <thead>
                          <tr>
                            <th>ID</th>
                            <th>QR Code</th>
                            <th>UPI ID</th>
                            <th>Status</th>
                            <th>Default</th>
                            <th>Created At</th>
                            <th>Actions</th>
                          </tr>
                        </thead>
                        <tbody>
                          <?php foreach ($upi_payments as $method): ?>
                            <tr>
                              <td><?= $serial2 = isset($serial2) ? $serial2 + 1 : 1 ?></td>
                              <td>
                                <a href="<?= htmlspecialchars($method['qr_code_image']) ?>" data-fancybox="qr-gallery">
                                  <img src="<?= htmlspecialchars($method['qr_code_image']) ?>" alt="QR Code" style="max-width: 80px; max-height: 80px;" class="img-thumbnail">
                                </a>
                              </td>
                              <td><?= htmlspecialchars($method['upi_id']) ?></td>
                              <td>
                                <form method="POST" class="d-inline">
                                  <input type="hidden" name="id" value="<?= $method['id'] ?>">
                                  <input type="hidden" name="current_status" value="<?= $method['active'] ?>">
                                  <button type="submit" name="toggle_upi_active" class="btn btn-sm <?= $method['active'] ? 'btn-success' : 'btn-secondary' ?>">
                                    <?= $method['active'] ? 'Active' : 'Inactive' ?>
                                  </button>
                                </form>
                              </td>
                              <td>
                                <?php if ($method['is_default']): ?>
                                  <span class="badge bg-primary">Default</span>
                                <?php else: ?>
                                  <form method="POST" class="d-inline">
                                    <input type="hidden" name="id" value="<?= $method['id'] ?>">
                                    <button type="submit" name="set_default_upi" class="btn btn-sm btn-outline-primary">
                                      Set as Default
                                    </button>
                                  </form>
                                <?php endif; ?>
                              </td>
                              <td><?= date('d M Y H:i', strtotime($method['created_at'])) ?></td>
                              <td>
                                <form method="POST" onsubmit="return confirm('Are you sure you want to delete this UPI payment method?')">
                                  <input type="hidden" name="id" value="<?= $method['id'] ?>">
                                  <button type="submit" name="delete_upi_payment" class="btn btn-sm btn-icon btn-outline-danger">
                                    <i class="ti tabler-trash"></i>
                                  </button>
                                </form>
                              </td>
                            </tr>
                          <?php endforeach; ?>
                        </tbody>
                      </table>
                    </div>
                  <?php endif; ?>
                </div>
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
            <?php include('includes/footer.php'); ?>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>

      <!-- Drag Target Area To SlideIn Menu On Small Screens -->
      <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->

    <!-- Add Payment Modal -->
    <div class="modal fade" id="addPaymentModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add New Payment Gateway</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <form method="POST">
            <div class="modal-body">
              <div class="row">
                <div class="col-md-6 mb-3">
                  <label class="form-label">Gateway Name <span class="text-danger">*</span></label>
                  <input type="text" class="form-control" name="gateway_name" required>
                </div>
                
                <div class="col-md-6 mb-3">
                  <label class="form-label">API URL <span class="text-danger">*</span></label>
                  <input type="url" class="form-control" name="api_url" required>
                </div>
                
                <div class="col-md-6 mb-3">
                  <label class="form-label">User Token <span class="text-danger">*</span></label>
                  <input type="text" class="form-control" name="user_token" required>
                </div>
                
                <div class="col-md-6 mb-3">
                  <label class="form-label">Minimum Amount</label>
                  <input type="number" class="form-control" name="min_amt" value="1.00" step="0.01" min="0">
                </div>
                
                <div class="col-md-6 mb-3">
                  <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" name="active" id="activeSwitch" checked>
                    <label class="form-check-label" for="activeSwitch">Active</label>
                  </div>
                </div>
                
                <div class="col-md-6 mb-3">
                  <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" name="is_primary" id="primarySwitch">
                    <label class="form-check-label" for="primarySwitch">Set as Primary Gateway</label>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" name="add_payment" class="btn btn-primary">Save Payment Gateway</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Edit Payment Modal -->
    <div class="modal fade" id="editPaymentModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Edit Payment Gateway</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <form method="POST">
            <div class="modal-body">
              <div class="row">
                <input type="hidden" name="id" id="editId">
                
                <div class="col-md-6 mb-3">
                  <label class="form-label">Gateway Name <span class="text-danger">*</span></label>
                  <input type="text" class="form-control" name="gateway_name" id="editGatewayName" required>
                </div>
                
                <div class="col-md-6 mb-3">
                  <label class="form-label">API URL <span class="text-danger">*</span></label>
                  <input type="url" class="form-control" name="api_url" id="editApiUrl" required>
                </div>
                
                <div class="col-md-6 mb-3">
                  <label class="form-label">User Token <span class="text-danger">*</span></label>
                  <input type="text" class="form-control" name="user_token" id="editUserToken" required placeholder="Enter new token to update">
                </div>
                
                <div class="col-md-6 mb-3">
                  <label class="form-label">Minimum Amount</label>
                  <input type="number" class="form-control" name="min_amt" id="editMinAmt" step="0.01" min="0">
                </div>
                
                <div class="col-md-6 mb-3">
                  <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" name="active" id="editActiveSwitch">
                    <label class="form-check-label" for="editActiveSwitch">Active</label>
                  </div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" name="edit_payment" class="btn btn-primary">Update Payment Gateway</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Add UPI Payment Modal -->
    <div class="modal fade" id="addUPIPaymentModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add UPI Payment Method</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <form method="POST" enctype="multipart/form-data">
            <div class="modal-body">
              <div class="mb-3">
                <label class="form-label">UPI ID <span class="text-danger">*</span></label>
                <input type="text" class="form-control" name="upi_id" required placeholder="e.g., name@upi">
                <small class="text-muted">Format: username@upi-provider</small>
              </div>
              
              <div class="mb-3">
                <label class="form-label">QR Code Image <span class="text-danger">*</span></label>
                <input type="file" class="form-control" name="qr_code" accept="image/jpeg,image/png,image/gif" required>
                <small class="text-muted">Upload a clear image of your UPI QR code (JPEG/PNG/GIF)</small>
              </div>
              
              <div class="mb-3">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" name="is_default" id="defaultUPISwitch">
                  <label class="form-check-label" for="defaultUPISwitch">Set as default UPI payment method</label>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" name="add_upi_payment" class="btn btn-primary">Save UPI Method</button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <?php include('includes/script.php'); ?>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fancyapps/ui@5.0/dist/fancybox/fancybox.css">
    <script src="https://cdn.jsdelivr.net/npm/@fancyapps/ui@5.0/dist/fancybox/fancybox.umd.js"></script>
    <script>
      // Initialize Fancybox for QR code images
      Fancybox.bind('[data-fancybox="qr-gallery"]', {
        // Fancybox options
      });

      // Handle edit payment modal data population
      document.querySelectorAll('[data-bs-target="#editPaymentModal"]').forEach(button => {
        button.addEventListener('click', function() {
          const modal = document.querySelector('#editPaymentModal');
          modal.querySelector('#editId').value = this.dataset.id;
          modal.querySelector('#editGatewayName').value = this.dataset.gateway;
          modal.querySelector('#editApiUrl').value = this.dataset.api;
          modal.querySelector('#editUserToken').value = '';
          modal.querySelector('#editMinAmt').value = this.dataset.minamt;
          modal.querySelector('#editActiveSwitch').checked = this.dataset.active === '1';
        });
      });

      // Initialize DataTables
      $(document).ready(function() {
        $('#paymentSettingsTable').DataTable({
          responsive: true,
          order: [[3, 'desc']],
          pageLength: 10
        });
        
        $('#upiPaymentsTable').DataTable({
          responsive: true,
          order: [[4, 'desc']],
          pageLength: 10
        });
      });
    </script>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>