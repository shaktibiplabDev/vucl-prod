<?php
$code = base64_decode('PD9waHAKcmVxdWlyZSBfX0RJUl9fIC4gJy9zZWN1cml0eS9hdXRoLnBocCc7CnJlcXVpcmVfb25jZSByZWFscGF0aChfX0RJUl9fIC4gJy8uLi8uLi9jb25maWcvZGF0YWJhc2UucGhwJyk7CgovLyBHZXQgY3VycmVudCB1c2VyIGRhdGEKJHVzZXJfaWQgPSAkX1NFU1NJT05bJ3VzZXJfaWQnXTsKJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIGlkID0gPyIpOwokc3RtdC0+ZXhlY3V0ZShbJHVzZXJfaWRdKTsKJHVzZXIgPSAkc3RtdC0+ZmV0Y2goUERPOjpGRVRDSF9BU1NPQyk7CgppZiAoISR1c2VyKSB7CiAgICBlY2hvICc8c2NyaXB0PndpbmRvdy5sb2NhdGlvbi5ocmVmID0gImxvZ291dC5waHAiOzwvc2NyaXB0Pic7CiAgICBleGl0Owp9CgovLyBIYW5kbGUgZm9ybSBzdWJtaXNzaW9uCmlmICgkX1NFUlZFUlsnUkVRVUVTVF9NRVRIT0QnXSA9PT0gJ1BPU1QnKSB7CiAgICAvLyBIYW5kbGUgcHJvZmlsZSBpbWFnZSB1cGxvYWQKICAgIGlmIChpc3NldCgkX0ZJTEVTWydwcm9maWxlX2ltYWdlJ10pICYmICRfRklMRVNbJ3Byb2ZpbGVfaW1hZ2UnXVsnZXJyb3InXSA9PT0gVVBMT0FEX0VSUl9PSykgewogICAgICAgICR1cGxvYWREaXIgPSAnLi4vLi4vYXNzZXRzL2ltZy9hdmF0YXJzLyc7CiAgICAgICAgJGFsbG93ZWRUeXBlcyA9IFsnaW1hZ2UvanBlZycsICdpbWFnZS9wbmcnLCAnaW1hZ2UvZ2lmJ107CiAgICAgICAgJG1heEZpbGVTaXplID0gODAwICogMTAyNDsgLy8gODAwS0IKICAgICAgICAKICAgICAgICAkZmlsZSA9ICRfRklMRVNbJ3Byb2ZpbGVfaW1hZ2UnXTsKICAgICAgICAKICAgICAgICAvLyBWYWxpZGF0ZSBmaWxlIHR5cGUKICAgICAgICBpZiAoIWluX2FycmF5KCRmaWxlWyd0eXBlJ10sICRhbGxvd2VkVHlwZXMpKSB7CiAgICAgICAgICAgICRlcnJvciA9ICJPbmx5IEpQRywgUE5HLCBhbmQgR0lGIGZpbGVzIGFyZSBhbGxvd2VkLiI7CiAgICAgICAgfSAKICAgICAgICAvLyBWYWxpZGF0ZSBmaWxlIHNpemUKICAgICAgICBlbHNlaWYgKCRmaWxlWydzaXplJ10gPiAkbWF4RmlsZVNpemUpIHsKICAgICAgICAgICAgJGVycm9yID0gIkZpbGUgc2l6ZSBtdXN0IGJlIGxlc3MgdGhhbiA4MDBLQi4iOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIEdlbmVyYXRlIHVuaXF1ZSBmaWxlbmFtZQogICAgICAgICAgICAkZXh0ZW5zaW9uID0gcGF0aGluZm8oJGZpbGVbJ25hbWUnXSwgUEFUSElORk9fRVhURU5TSU9OKTsKICAgICAgICAgICAgJGZpbGVuYW1lID0gJ3VzZXJfJyAuICR1c2VyX2lkIC4gJ18nIC4gdGltZSgpIC4gJy4nIC4gJGV4dGVuc2lvbjsKICAgICAgICAgICAgJGRlc3RpbmF0aW9uID0gJHVwbG9hZERpciAuICRmaWxlbmFtZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChtb3ZlX3VwbG9hZGVkX2ZpbGUoJGZpbGVbJ3RtcF9uYW1lJ10sICRkZXN0aW5hdGlvbikpIHsKICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBvbGQgcHJvZmlsZSBpbWFnZSBpZiBpdCdzIG5vdCB0aGUgZGVmYXVsdAogICAgICAgICAgICAgICAgaWYgKCR1c2VyWydwcm9maWxlX2ltYWdlJ10gIT09ICdkZWZhdWx0LnBuZycpIHsKICAgICAgICAgICAgICAgICAgICBAdW5saW5rKCR1cGxvYWREaXIgLiAkdXNlclsncHJvZmlsZV9pbWFnZSddKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgLy8gVXBkYXRlIGRhdGFiYXNlCiAgICAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIlVQREFURSB1c2VycyBTRVQgcHJvZmlsZV9pbWFnZSA9ID8gV0hFUkUgaWQgPSA/Iik7CiAgICAgICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbJGZpbGVuYW1lLCAkdXNlcl9pZF0pOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdXNlciBkYXRhCiAgICAgICAgICAgICAgICAkdXNlclsncHJvZmlsZV9pbWFnZSddID0gJGZpbGVuYW1lOwogICAgICAgICAgICAgICAgJHN1Y2Nlc3MgPSAiUHJvZmlsZSBpbWFnZSB1cGRhdGVkIHN1Y2Nlc3NmdWxseSEiOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJGVycm9yID0gIkZhaWxlZCB0byB1cGxvYWQgcHJvZmlsZSBpbWFnZS4iOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgCiAgICAvLyBIYW5kbGUgcHJvZmlsZSB1cGRhdGUKICAgIGlmIChpc3NldCgkX1BPU1RbJ2Z1bGxfbmFtZSddKSkgewogICAgICAgICRmdWxsX25hbWUgPSAkX1BPU1RbJ2Z1bGxfbmFtZSddID8/ICcnOwogICAgICAgICRlbWFpbCA9ICRfUE9TVFsnZW1haWwnXSA/PyAnJzsKICAgICAgICAkdXNlcm5hbWUgPSAkX1BPU1RbJ3VzZXJuYW1lJ10gPz8gJyc7CiAgICAgICAgCiAgICAgICAgLy8gQmFzaWMgdmFsaWRhdGlvbgogICAgICAgIGlmICghZW1wdHkoJGVtYWlsKSAmJiAhZmlsdGVyX3ZhcigkZW1haWwsIEZJTFRFUl9WQUxJREFURV9FTUFJTCkpIHsKICAgICAgICAgICAgJGVycm9yID0gIkludmFsaWQgZW1haWwgZm9ybWF0IjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgJHN0bXQgPSAkcGRvLT5wcmVwYXJlKCJVUERBVEUgdXNlcnMgU0VUIGZ1bGxfbmFtZSA9ID8sIGVtYWlsID0gPywgdXNlcm5hbWUgPSA/IFdIRVJFIGlkID0gPyIpOwogICAgICAgICAgICAgICAgJHN0bXQtPmV4ZWN1dGUoWyRmdWxsX25hbWUsICRlbWFpbCwgJHVzZXJuYW1lLCAkdXNlcl9pZF0pOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc2Vzc2lvbiBkYXRhCiAgICAgICAgICAgICAgICAkX1NFU1NJT05bJ3VzZXJuYW1lJ10gPSAkdXNlcm5hbWU7CiAgICAgICAgICAgICAgICAkX1NFU1NJT05bJ2VtYWlsJ10gPSAkZW1haWw7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggdXNlciBkYXRhCiAgICAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgaWQgPSA/Iik7CiAgICAgICAgICAgICAgICAkc3RtdC0+ZXhlY3V0ZShbJHVzZXJfaWRdKTsKICAgICAgICAgICAgICAgICR1c2VyID0gJHN0bXQtPmZldGNoKFBETzo6RkVUQ0hfQVNTT0MpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAkc3VjY2VzcyA9ICJQcm9maWxlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5ISI7CiAgICAgICAgICAgIH0gY2F0Y2ggKFBET0V4Y2VwdGlvbiAkZSkgewogICAgICAgICAgICAgICAgJGVycm9yID0gIkVycm9yIHVwZGF0aW5nIHByb2ZpbGU6ICIgLiAkZS0+Z2V0TWVzc2FnZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgCiAgICAvLyBIYW5kbGUgYWNjb3VudCBkZWxldGlvbgogICAgaWYgKGlzc2V0KCRfUE9TVFsnZGVsZXRlX2FjY291bnQnXSkgJiYgaXNzZXQoJF9QT1NUWydjb25maXJtX2RlbGV0ZSddKSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vIERlbGV0ZSBwcm9maWxlIGltYWdlIGlmIGl0J3Mgbm90IHRoZSBkZWZhdWx0CiAgICAgICAgICAgIGlmICgkdXNlclsncHJvZmlsZV9pbWFnZSddICE9PSAnZGVmYXVsdC5wbmcnKSB7CiAgICAgICAgICAgICAgICBAdW5saW5rKCcuLi8uLi9hc3NldHMvaW1nL2F2YXRhcnMvJyAuICR1c2VyWydwcm9maWxlX2ltYWdlJ10pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBEZWxldGUgdXNlciBmcm9tIGRhdGFiYXNlCiAgICAgICAgICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiREVMRVRFIEZST00gdXNlcnMgV0hFUkUgaWQgPSA/Iik7CiAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskdXNlcl9pZF0pOwoKICAgICAgICAgICAgLy8gRGVzdHJveSBzZXNzaW9uIGFuZCByZWRpcmVjdCB0byBsb2dpbgogICAgICAgICAgICBzZXNzaW9uX2Rlc3Ryb3koKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFVzZSBKYXZhU2NyaXB0IHJlZGlyZWN0IHRvIGF2b2lkIGhlYWRlciBpc3N1ZXMKICAgICAgICAgICAgZWNobyAnPHNjcmlwdD4KICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCJhY2NvdW50RGVsZXRlZCIsICJ0cnVlIik7CiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICIuLi8uLi9sb2dpbi5waHAiOwogICAgICAgICAgICA8L3NjcmlwdD4nOwogICAgICAgICAgICBleGl0OwogICAgICAgIH0gY2F0Y2ggKFBET0V4Y2VwdGlvbiAkZSkgewogICAgICAgICAgICAkZXJyb3IgPSAiRXJyb3IgZGVsZXRpbmcgYWNjb3VudDogIiAuICRlLT5nZXRNZXNzYWdlKCk7CiAgICAgICAgfQogICAgfQp9CgovLyBHZXQgcmVmZXJyZWQgdXNlcnMKJHJlZmVycmVkX3VzZXJzID0gW107CmlmICghZW1wdHkoJHVzZXJbJ3JlZmVycmFsX2NvZGUnXSkpIHsKICAgICRzdG10ID0gJHBkby0+cHJlcGFyZSgiU0VMRUNUIGlkLCB1c2VybmFtZSwgZW1haWwsIGNyZWF0ZWRfYXQgRlJPTSB1c2VycyBXSEVSRSByZWZlcnJlZF9ieSA9ID8gT1JERVIgQlkgY3JlYXRlZF9hdCBERVNDIik7CiAgICAkc3RtdC0+ZXhlY3V0ZShbJHVzZXJfaWRdKTsKICAgICRyZWZlcnJlZF91c2VycyA9ICRzdG10LT5mZXRjaEFsbChQRE86OkZFVENIX0FTU09DKTsKfQoKLy8gU3BsaXQgZnVsbCBuYW1lCiRuYW1lX3BhcnRzID0gZXhwbG9kZSgnICcsICR1c2VyWydmdWxsX25hbWUnXSwgMik7CiRmaXJzdF9uYW1lID0gJG5hbWVfcGFydHNbMF0gPz8gJyc7CiRsYXN0X25hbWUgPSAkbmFtZV9wYXJ0c1sxXSA/PyAnJzsKPz4KCjwhZG9jdHlwZSBodG1sPgo8aHRtbCBsYW5nPSJlbiIgY2xhc3M9ImxheW91dC1uYXZiYXItZml4ZWQgbGF5b3V0LW1lbnUtZml4ZWQgbGF5b3V0LWNvbXBhY3QiIGRpcj0ibHRyIiBkYXRhLXNraW49ImRlZmF1bHQiIGRhdGEtYXNzZXRzLXBhdGg9Ii4uLy4uL2Fzc2V0cy8iIGRhdGEtdGVtcGxhdGU9InZlcnRpY2FsLW1lbnUtdGVtcGxhdGUiIGRhdGEtYnMtdGhlbWU9ImxpZ2h0Ij4KICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9oZWFkLnBocCcpOyA/PgoKICA8Ym9keT4KICAgIDwhLS0gTGF5b3V0IHdyYXBwZXIgLS0+CiAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtd3JhcHBlciBsYXlvdXQtY29udGVudC1uYXZiYXIiPgogICAgICA8ZGl2IGNsYXNzPSJsYXlvdXQtY29udGFpbmVyIj4KICAgICAgICA8IS0tIE1lbnUgLS0+CiAgICAgICAgPD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvc2lkZWJhci5waHAnKTsgPz4KCiAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1tb2JpbGUtdG9nZ2xlciBkLXhsLW5vbmUgcm91bmRlZC0xIj4KICAgICAgICAgIDxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiIGNsYXNzPSJsYXlvdXQtbWVudS10b2dnbGUgbWVudS1saW5rIHRleHQtbGFyZ2UgdGV4dC1iZy1zZWNvbmRhcnkgcC0yIHJvdW5kZWQtMSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJ0aSB0YWJsZXItbWVudSBpY29uLWJhc2UiPjwvaT4KICAgICAgICAgICAgPGkgY2xhc3M9InRpIHRhYmxlci1jaGV2cm9uLXJpZ2h0IGljb24tYmFzZSI+PC9pPgogICAgICAgICAgPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gLyBNZW51IC0tPgoKICAgICAgICA8IS0tIExheW91dCBjb250YWluZXIgLS0+CiAgICAgICAgPGRpdiBjbGFzcz0ibGF5b3V0LXBhZ2UiPgogICAgICAgICAgPCEtLSBOYXZiYXIgLS0+CiAgICAgICAgICA8P3BocCBpbmNsdWRlKCdpbmNsdWRlcy9uYXZiYXIucGhwJyk7ID8+CgogICAgICAgICAgPCEtLSAvIE5hdmJhciAtLT4KCiAgICAgICAgICA8IS0tIENvbnRlbnQgd3JhcHBlciAtLT4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtd3JhcHBlciI+CiAgICAgICAgICAgIDwhLS0gQ29udGVudCAtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLXh4bCBmbGV4LWdyb3ctMSBjb250YWluZXItcC15Ij4KICAgICAgICAgICAgICA8P3BocCBpZiAoaXNzZXQoJHN1Y2Nlc3MpKTogPz4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiPjw/PSBodG1sc3BlY2lhbGNoYXJzKCRzdWNjZXNzKSA/PjwvZGl2PgogICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgIDw/cGhwIGlmIChpc3NldCgkZXJyb3IpKTogPz4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LWRhbmdlciI+PD89IGh0bWxzcGVjaWFsY2hhcnMoJGVycm9yKSA/PjwvZGl2PgogICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXYtYWxpZ24tdG9wIj4KICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXYtcGlsbHMgZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgbWItNiBnYXAtbWQtMCBnYXAtMiI+CiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGFjdGl2ZSIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyI+PGkgY2xhc3M9Imljb24tYmFzZSB0aSB0YWJsZXItdXNlcnMgaWNvbi1zbSBtZS0xXzUiPjwvaT4gQWNjb3VudDwvYT4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJzZWN1cml0eS1zZXR0aW5ncy5waHAiPjxpIGNsYXNzPSJpY29uLWJhc2UgdGkgdGFibGVyLWxvY2sgaWNvbi1zbSBtZS0xXzUiPjwvaT4gU2VjdXJpdHk8L2E+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8IS0tIFByb2ZpbGUgQ2FyZCAtLT4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBtYi02Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4IGFsaWduLWl0ZW1zLXN0YXJ0IGFsaWduLWl0ZW1zLXNtLWNlbnRlciBnYXAtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi8uLi9hc3NldHMvaW1nL2F2YXRhcnMvPD89IGh0bWxzcGVjaWFsY2hhcnMoJHVzZXJbJ3Byb2ZpbGVfaW1hZ2UnXSA/PyAnZGVmYXVsdC5wbmcnKSA/PiIgYWx0PSJ1c2VyLWF2YXRhciIgY2xhc3M9ImQtYmxvY2sgdy1weC0xMDAgaC1weC0xMDAgcm91bmRlZCIgaWQ9InVwbG9hZGVkQXZhdGFyIiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidXR0b24td3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gaWQ9InByb2ZpbGVJbWFnZUZvcm0iIG1ldGhvZD0iUE9TVCIgZW5jdHlwZT0ibXVsdGlwYXJ0L2Zvcm0tZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJwcm9maWxlX2ltYWdlIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IG1lLTMgbWItNCIgdGFiaW5kZXg9IjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2siPlVwbG9hZCBuZXcgcGhvdG88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJpY29uLWJhc2UgdGkgdGFibGVyLXVwbG9hZCBkLWJsb2NrIGQtc20tbm9uZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZmlsZSIgaWQ9InByb2ZpbGVfaW1hZ2UiIG5hbWU9InByb2ZpbGVfaW1hZ2UiIGNsYXNzPSJhY2NvdW50LWZpbGUtaW5wdXQiIGhpZGRlbiBhY2NlcHQ9ImltYWdlL3BuZywgaW1hZ2UvanBlZywgaW1hZ2UvZ2lmIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1sYWJlbC1zZWNvbmRhcnkgYWNjb3VudC1pbWFnZS1yZXNldCBtYi00IiBpZD0icmVzZXRQcm9maWxlSW1hZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1iYXNlIHRpIHRhYmxlci1yZXNldCBkLWJsb2NrIGQtc20tbm9uZSI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2siPlJlc2V0PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+QWxsb3dlZCBKUEcsIFBORyBvciBHSUYuIE1heCBzaXplIG9mIDgwMEs8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkgcHQtNCI+CiAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBpZD0iZm9ybUFjY291bnRTZXR0aW5ncyIgbWV0aG9kPSJQT1NUIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGd5LTQgZ3gtNiBtYi02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBmb3JtLWNvbnRyb2wtdmFsaWRhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJmaXJzdE5hbWUiIGNsYXNzPSJmb3JtLWxhYmVsIj5GaXJzdCBOYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0IiBpZD0iZmlyc3ROYW1lIiBuYW1lPSJmaXJzdE5hbWUiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkZmlyc3RfbmFtZSkgPz4iIHJlcXVpcmVkIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgZm9ybS1jb250cm9sLXZhbGlkYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGFzdE5hbWUiIGNsYXNzPSJmb3JtLWxhYmVsIj5MYXN0IE5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiIG5hbWU9Imxhc3ROYW1lIiBpZD0ibGFzdE5hbWUiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkbGFzdF9uYW1lKSA/PiIgcmVxdWlyZWQgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJ1c2VybmFtZSIgY2xhc3M9ImZvcm0tbGFiZWwiPlVzZXJuYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0IiBpZD0idXNlcm5hbWUiIG5hbWU9InVzZXJuYW1lIiB2YWx1ZT0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJHVzZXJbJ3VzZXJuYW1lJ10pID8+IiByZXF1aXJlZCAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImVtYWlsIiBjbGFzcz0iZm9ybS1sYWJlbCI+RS1tYWlsPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJlbWFpbCIgaWQ9ImVtYWlsIiBuYW1lPSJlbWFpbCIgdmFsdWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCR1c2VyWydlbWFpbCddKSA/PiIgcmVxdWlyZWQgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJHVzZXJbJ3VzZXJfdHlwZSddID09PSAnYWRtaW4nICYmICFlbXB0eSgkdXNlclsnZGlzdHJpYnV0b3JfaWQnXSkpOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZGlzdHJpYnV0b3IiIGNsYXNzPSJmb3JtLWxhYmVsIj5NeSBEaXN0cmlidXRvcjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRpc3RyaWJ1dG9yX2lkID0gJHVzZXJbJ2Rpc3RyaWJ1dG9yX2lkJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RtdCA9ICRwZG8tPnByZXBhcmUoIlNFTEVDVCBmdWxsX25hbWUgRlJPTSB1c2VycyBXSEVSRSBpZCA9ID8iKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdG10LT5leGVjdXRlKFskZGlzdHJpYnV0b3JfaWRdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkaXN0cmlidXRvciA9ICRzdG10LT5mZXRjaChQRE86OkZFVENIX0FTU09DKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkaXN0cmlidXRvcl9uYW1lID0gJGRpc3RyaWJ1dG9yID8gJGRpc3RyaWJ1dG9yWydmdWxsX25hbWUnXSA6ICdVbmtub3duIERpc3RyaWJ1dG9yJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImRpc3RyaWJ1dG9yIiB2YWx1ZT0iPD89IGh0bWxzcGVjaWFsY2hhcnMoJGRpc3RyaWJ1dG9yX25hbWUpID8+IiByZWFkb25seSAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCFlbXB0eSgkdXNlclsncmVmZXJyYWxfY29kZSddKSk6ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icmVmZXJyYWxDb2RlIiBjbGFzcz0iZm9ybS1sYWJlbCI+UmVmZXJyYWwgQ29kZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InJlZmVycmFsQ29kZSIgdmFsdWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCR1c2VyWydyZWZlcnJhbF9jb2RlJ10pID8+IiByZWFkb25seSAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Imxhc3RMb2dpbiIgY2xhc3M9ImZvcm0tbGFiZWwiPkxhc3QgTG9naW48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJsYXN0TG9naW4iIHZhbHVlPSI8Pz0gJHVzZXJbJ2xhc3RfbG9naW4nXSA/IGh0bWxzcGVjaWFsY2hhcnMoZGF0ZSgnTSBqLCBZIGc6aSBBJywgc3RydG90aW1lKCR1c2VyWydsYXN0X2xvZ2luJ10pKSkgOiAnTmV2ZXInID8+IiByZWFkb25seSAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Im1lbWJlclNpbmNlIiBjbGFzcz0iZm9ybS1sYWJlbCI+TWVtYmVyIFNpbmNlPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0ibWVtYmVyU2luY2UiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycyhkYXRlKCdNIGosIFknLCBzdHJ0b3RpbWUoJHVzZXJbJ2NyZWF0ZWRfYXQnXSkpKSA/PiIgcmVhZG9ubHkgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IG1lLTMiPlNhdmUgY2hhbmdlczwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0icmVzZXQiIGNsYXNzPSJidG4gYnRuLWxhYmVsLXNlY29uZGFyeSI+Q2FuY2VsPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZnVsbF9uYW1lIiB2YWx1ZT0iIj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPCEtLSBSZWZlcnJhbCBTZWN0aW9uIC0tPgogICAgICAgICAgICAgICAgICA8P3BocCBpZiAoIWVtcHR5KCR1c2VyWydyZWZlcnJhbF9jb2RlJ10pKTogPz4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCBtYi02Ij4KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImNhcmQtaGVhZGVyIj5Zb3VyIFJlZmVycmFsIE5ldHdvcms8L2g1PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtYi0yIj5Zb3VyIFJlZmVycmFsIExpbms8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJyZWZlcnJhbExpbmsiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygnaHR0cHM6Ly8nIC4gJF9TRVJWRVJbJ0hUVFBfSE9TVCddIC4gJy9yZWdpc3Rlci5waHA/cmVmPScgLiAkdXNlclsncmVmZXJyYWxfY29kZSddKSA/PiIgcmVhZG9ubHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSIgdHlwZT0iYnV0dG9uIiBpZD0iY29weVJlZmVycmFsTGluayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iaWNvbi1iYXNlIHRpIHRhYmxlci1jb3B5Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtbXV0ZWQiPlNoYXJlIHRoaXMgbGluayB0byBlYXJuIGNvbW1pc3Npb25zPC9zbWFsbD4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICA8P3BocCBpZiAoIWVtcHR5KCRyZWZlcnJlZF91c2VycykpOiA/PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0ibWItMyI+UGVvcGxlIFlvdSd2ZSBSZWZlcnJlZCAoPD89IGNvdW50KCRyZWZlcnJlZF91c2VycykgPz4pPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtcmVzcG9uc2l2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+VXNlcm5hbWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5FbWFpbDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkpvaW5lZCBPbjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBmb3JlYWNoICgkcmVmZXJyZWRfdXNlcnMgYXMgJHJlZmVycmVkKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gaHRtbHNwZWNpYWxjaGFycygkcmVmZXJyZWRbJ3VzZXJuYW1lJ10pID8+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89IGh0bWxzcGVjaWFsY2hhcnMoJHJlZmVycmVkWydlbWFpbCddKSA/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/PSBodG1sc3BlY2lhbGNoYXJzKGRhdGUoJ00gaiwgWScsIHN0cnRvdGltZSgkcmVmZXJyZWRbJ2NyZWF0ZWRfYXQnXSkpKSA/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGZvcmVhY2g7ID8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbHNlOiA/PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtaW5mbyBtdC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgWW91IGhhdmVuJ3QgcmVmZXJyZWQgYW55b25lIHlldC4gU2hhcmUgeW91ciByZWZlcnJhbCBsaW5rIHRvIGdldCBzdGFydGVkIQogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgPCEtLSBEZWxldGUgQWNjb3VudCBTZWN0aW9uIC0tPgogICAgICAgICAgICAgICAgICA8P3BocCBpZiAoJHVzZXJbJ3VzZXJfdHlwZSddICE9PSAnYWRtaW4nKTogPz4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJjYXJkLWhlYWRlciI+RGVsZXRlIEFjY291bnQ8L2g1PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi02IGNvbC0xMiBtYi0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtd2FybmluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJhbGVydC1oZWFkaW5nIG1iLTEiPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgeW91ciBhY2NvdW50PzwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTAiPlRoaXMgd2lsbCBwZXJtYW5lbnRseSByZW1vdmUgYWxsIHlvdXIgZGF0YSBhbmQgY2Fubm90IGJlIHVuZG9uZS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIGlkPSJkZWxldGVBY2NvdW50Rm9ybSIgbWV0aG9kPSJQT1NUIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1jaGVjayBteS04Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY2hlY2staW5wdXQiIHR5cGU9ImNoZWNrYm94IiBuYW1lPSJjb25maXJtX2RlbGV0ZSIgaWQ9ImNvbmZpcm1fZGVsZXRlIiByZXF1aXJlZCAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9ybS1jaGVjay1sYWJlbCIgZm9yPSJjb25maXJtX2RlbGV0ZSI+SSBjb25maXJtIEkgd2FudCB0byBwZXJtYW5lbnRseSBkZWxldGUgbXkgYWNjb3VudDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiBkYXRhLWJzLXRvZ2dsZT0ibW9kYWwiIGRhdGEtYnMtdGFyZ2V0PSIjZGVsZXRlQWNjb3VudE1vZGFsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICBEZWxldGUgQWNjb3VudCBQZXJtYW5lbnRseQogICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvZm9vdGVyLnBocCcpOyA/PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPCEtLSBEZWxldGUgQWNjb3VudCBNb2RhbCAtLT4KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJkZWxldGVBY2NvdW50TW9kYWwiIHRhYmluZGV4PSItMSIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIiByb2xlPSJkb2N1bWVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPgogICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIj5Db25maXJtIEFjY291bnQgRGVsZXRpb248L2g1PgogICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0bi1jbG9zZSIgZGF0YS1icy1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjwvYnV0dG9uPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij4KICAgICAgICAgICAgPHA+QXJlIHlvdSBhYnNvbHV0ZWx5IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHlvdXIgYWNjb3VudD8gVGhpcyBhY3Rpb24gY2Fubm90IGJlIHVuZG9uZS48L3A+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWRhbmdlciI+QWxsIHlvdXIgZGF0YSB3aWxsIGJlIHBlcm1hbmVudGx5IHJlbW92ZWQuPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImJ0biBidG4tbGFiZWwtc2Vjb25kYXJ5IiBkYXRhLWJzLWRpc21pc3M9Im1vZGFsIj5DYW5jZWw8L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIG5hbWU9ImRlbGV0ZV9hY2NvdW50IiBmb3JtPSJkZWxldGVBY2NvdW50Rm9ybSIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIj5EZWxldGUgTXkgQWNjb3VudDwvYnV0dG9uPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvc2NyaXB0LnBocCcpOyA/PgogICAgPHNjcmlwdD4KICAgICAgLy8gQ29tYmluZSBmaXJzdC9sYXN0IG5hbWUgaW50byBmdWxsX25hbWUgYmVmb3JlIHN1Ym1pdAogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9ybUFjY291bnRTZXR0aW5ncycpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uKGUpIHsKICAgICAgICBjb25zdCBmaXJzdE5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlyc3ROYW1lJykudmFsdWU7CiAgICAgICAgY29uc3QgbGFzdE5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGFzdE5hbWUnKS52YWx1ZTsKICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPSJmdWxsX25hbWUiXScpLnZhbHVlID0gZmlyc3ROYW1lICsgJyAnICsgbGFzdE5hbWU7CiAgICAgIH0pOwogICAgICAKICAgICAgLy8gQ29weSByZWZlcnJhbCBsaW5rIHRvIGNsaXBib2FyZAogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29weVJlZmVycmFsTGluaycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgY29uc3QgcmVmZXJyYWxMaW5rID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlZmVycmFsTGluaycpOwogICAgICAgIHJlZmVycmFsTGluay5zZWxlY3QoKTsKICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpOwogICAgICAgIAogICAgICAgIC8vIFNob3cgdG9hc3Qgbm90aWZpY2F0aW9uCiAgICAgICAgY29uc3QgdG9hc3QgPSBuZXcgYm9vdHN0cmFwLlRvYXN0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3B5VG9hc3QnKSk7CiAgICAgICAgdG9hc3Quc2hvdygpOwogICAgICB9KTsKICAgICAgCiAgICAgIC8vIEhhbmRsZSBwcm9maWxlIGltYWdlIHVwbG9hZAogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvZmlsZV9pbWFnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICAgIGlmICh0aGlzLmZpbGVzICYmIHRoaXMuZmlsZXNbMF0pIHsKICAgICAgICAgIC8vIFZhbGlkYXRlIGZpbGUgc2l6ZQogICAgICAgICAgaWYgKHRoaXMuZmlsZXNbMF0uc2l6ZSA+IDgwMCAqIDEwMjQpIHsKICAgICAgICAgICAgYWxlcnQoJ0ZpbGUgc2l6ZSBtdXN0IGJlIGxlc3MgdGhhbiA4MDBLQicpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICAKICAgICAgICAgIC8vIFZhbGlkYXRlIGZpbGUgdHlwZQogICAgICAgICAgY29uc3QgdmFsaWRUeXBlcyA9IFsnaW1hZ2UvanBlZycsICdpbWFnZS9wbmcnLCAnaW1hZ2UvZ2lmJ107CiAgICAgICAgICBpZiAoIXZhbGlkVHlwZXMuaW5jbHVkZXModGhpcy5maWxlc1swXS50eXBlKSkgewogICAgICAgICAgICBhbGVydCgnT25seSBKUEcsIFBORywgYW5kIEdJRiBmaWxlcyBhcmUgYWxsb3dlZCcpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CiAgICAgICAgICAKICAgICAgICAgIC8vIFN1Ym1pdCB0aGUgZm9ybQogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2ZpbGVJbWFnZUZvcm0nKS5zdWJtaXQoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICAKICAgICAgLy8gSGFuZGxlIHByb2ZpbGUgaW1hZ2UgcmVzZXQKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc2V0UHJvZmlsZUltYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICBpZiAoY29uZmlybSgnUmVzZXQgdG8gZGVmYXVsdCBwcm9maWxlIGltYWdlPycpKSB7CiAgICAgICAgICBmZXRjaCgndXBkYXRlX3Byb2ZpbGVfaW1hZ2UucGhwJywgewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYm9keTogJ3Jlc2V0X2ltYWdlPTEnCiAgICAgICAgICB9KQogICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKQogICAgICAgICAgLnRoZW4oZGF0YSA9PiB7CiAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndXBsb2FkZWRBdmF0YXInKS5zcmMgPSAnLi4vLi4vYXNzZXRzL2ltZy9hdmF0YXJzL2RlZmF1bHQucG5nJzsKICAgICAgICAgICAgICBjb25zdCB0b2FzdCA9IG5ldyBib290c3RyYXAuVG9hc3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvcHlUb2FzdCcpKTsKICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29weVRvYXN0JykucXVlcnlTZWxlY3RvcignLnRvYXN0LWJvZHknKS50ZXh0Q29udGVudCA9ICdQcm9maWxlIGltYWdlIHJlc2V0IHRvIGRlZmF1bHQnOwogICAgICAgICAgICAgIHRvYXN0LnNob3coKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBhbGVydCgnRXJyb3I6ICcgKyBkYXRhLm1lc3NhZ2UpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgPC9zY3JpcHQ+CiAgICAKICAgIDwhLS0gVG9hc3QgTm90aWZpY2F0aW9ucyAtLT4KICAgIDxkaXYgY2xhc3M9InBvc2l0aW9uLWZpeGVkIGJvdHRvbS0wIGVuZC0wIHAtMyIgc3R5bGU9InotaW5kZXg6IDExIj4KICAgICAgPCEtLSBDb3B5IFN1Y2Nlc3MgVG9hc3QgLS0+CiAgICAgIDxkaXYgaWQ9ImNvcHlUb2FzdCIgY2xhc3M9InRvYXN0IiByb2xlPSJhbGVydCIgYXJpYS1saXZlPSJhc3NlcnRpdmUiIGFyaWEtYXRvbWljPSJ0cnVlIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0b2FzdC1oZWFkZXIiPgogICAgICAgICAgPGkgY2xhc3M9Imljb24tYmFzZSB0aSB0YWJsZXItY2hlY2sgbWUtMiI+PC9pPgogICAgICAgICAgPHN0cm9uZyBjbGFzcz0ibWUtYXV0byI+U3VjY2Vzczwvc3Ryb25nPgogICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJidG4tY2xvc2UiIGRhdGEtYnMtZGlzbWlzcz0idG9hc3QiIGFyaWEtbGFiZWw9IkNsb3NlIj48L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJ0b2FzdC1ib2R5Ij4KICAgICAgICAgIFJlZmVycmFsIGxpbmsgY29waWVkIHRvIGNsaXBib2FyZCEKICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2JvZHk+CjwvaHRtbD4=');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>