<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';

// Initialize errors 
$errors = [];

// Withdrawal Requests 
$stmt = $pdo->prepare("
  SELECT 
    wr.id,
    u.username,
    wr.amount,
    wr.created_at,
    wr.status
  FROM withdrawal_requests wr
  LEFT JOIN users u ON u.id = wr.user_id
  WHERE wr.status = 'pending'
  AND u.status = 'active' 
  ORDER BY wr.created_at DESC");
$stmt->execute();

$withdrawal_requests = $stmt->fetchAll(PDO::FETCH_ASSOC);

$withdrawal_requests = array_map(function($request) {
  $request['link'] = '/admin/siteadmin/withdraw.php?username='. $request['username'] . '&status='. $request['status'];
  return $request;
}, $withdrawal_requests);

// Leaderboards

$stmt = $pdo->prepare("
  SELECT 
    u.id, 
    u.username, 
    u.full_name, 
    u.user_type, 
    u.referral_code, 
    u.distributor_code,
    COUNT(r.id) as connection_count
  FROM users u
  LEFT JOIN users r ON r.distributor_id = u.id AND r.referred_by IS NULL
  WHERE u.status = 'active' 
  AND u.user_type = 'distributor'
  AND u.user_type NOT IN ('admin', 'operator')
  GROUP BY u.id, u.username, u.full_name, u.user_type, u.referral_code, u.distributor_code
  ORDER BY connection_count DESC
");

$stmt->execute();
$distributor_leaderboard = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Application Analytics
$stmt = $pdo->prepare('
  SELECT
    SUM(CASE WHEN status = "pending" THEN 1 ELSE 0 END) as total_pending,
    SUM(CASE WHEN status = "processing" THEN 1 ELSE 0 END) as total_processing
  FROM child_enroll
  WHERE status IN ("pending", "processing")');

$stmt->execute();
$child_enroll_track = $stmt->fetch(PDO::FETCH_ASSOC);

$stmt = $pdo->prepare('
  SELECT
    SUM(CASE WHEN status = "pending" THEN 1 ELSE 0 END) as total_pending,
    SUM(CASE WHEN status = "processing" THEN 1 ELSE 0 END) as total_processing
  FROM address_update
  WHERE status IN ("pending", "processing")');

  $stmt->execute();
  $address_update_track = $stmt->fetch(PDO::FETCH_ASSOC);

  $stmt = $pdo->prepare('
  SELECT
    SUM(CASE WHEN status = "pending" THEN 1 ELSE 0 END) as total_pending,
    SUM(CASE WHEN status = "processing" THEN 1 ELSE 0 END) as total_processing
  FROM dob_update
  WHERE status IN ("pending", "processing")');

  $stmt->execute();
  $dob_update_track = $stmt->fetch(PDO::FETCH_ASSOC);

  $stmt = $pdo->prepare('
  SELECT
    SUM(CASE WHEN status = "pending" THEN 1 ELSE 0 END) as total_pending,
    SUM(CASE WHEN status = "processing" THEN 1 ELSE 0 END) as total_processing
  FROM name_update
  WHERE status IN ("pending", "processing")');

  $stmt->execute();
  $name_update_track = $stmt->fetch(PDO::FETCH_ASSOC);

  $stmt = $pdo->prepare('
  SELECT
    SUM(CASE WHEN status = "pending" THEN 1 ELSE 0 END) as total_pending,
    SUM(CASE WHEN status = "processing" THEN 1 ELSE 0 END) as total_processing
  FROM mobile_email_updates
  WHERE status IN ("pending", "processing")');

  $stmt->execute();
  $mobile_email_updates_track = $stmt->fetch(PDO::FETCH_ASSOC);

  $all_applications_track = [
    'pending' => 0,
    'processing' => 0
  ];

  // List all your track arrays
  $trackArrays = [
      $child_enroll_track,
      $address_update_track,
      $dob_update_track,
      $name_update_track,
      $mobile_email_updates_track
  ];

  foreach ($trackArrays as $track) {
      $all_applications_track['pending'] += $track['total_pending'] ?? 0;
      $all_applications_track['processing'] += $track['total_processing'] ?? 0;
  }

  $percentage_processing = 0;
  If($all_applications_track['pending'] + $all_applications_track['processing'] > 0) {
    $percentage_processing = ($all_applications_track['processing'] / ($all_applications_track['pending'] + $all_applications_track['processing'])) * 100;
    $percentage_processing = round($percentage_processing, 2);
  }

  // Calculate financial totals
  $financialData = [
    'total_deposits' => 0,
    'total_withdrawals' => 0,
    'total_bonuses' => 0,
    'total_pending' => 0,
    'total_failed' => 0
  ];

  $startDate = date('Y-m-1');
  $endDate = date('Y-m-d');

  try {
    // Get total deposits
    $stmt = $pdo->prepare("SELECT SUM(amount) as total FROM transactions 
                          WHERE type = 'deposit' AND status = 'completed'
                          AND created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $financialData['total_deposits'] = $stmt->fetchColumn() ?: 0;

    // Get total withdrawals
    $stmt = $pdo->prepare("SELECT SUM(amount) as total FROM transactions 
                          WHERE type = 'withdraw' AND status = 'completed'
                          AND created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $financialData['total_withdrawals'] = $stmt->fetchColumn() ?: 0;

    // Get total bonuses
    $stmt = $pdo->prepare("SELECT SUM(amount) as total FROM transactions 
                          WHERE type = 'bonus' AND status = 'completed'
                          AND created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $financialData['total_bonuses'] = $stmt->fetchColumn() ?: 0;

    // Get pending transactions
    $stmt = $pdo->prepare("SELECT SUM(amount) as total FROM transactions 
                          WHERE status = 'pending'
                          AND created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $financialData['total_pending'] = $stmt->fetchColumn() ?: 0;

    // Get failed transactions
    $stmt = $pdo->prepare("SELECT SUM(amount) as total FROM transactions 
                          WHERE status = 'failed' OR status = 'cancelled'
                          AND created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $financialData['total_failed'] = $stmt->fetchColumn() ?: 0;

    // Calculate profit (deposits - withdrawals)
    $financialData['total_profit'] = $financialData['total_deposits'] - $financialData['total_withdrawals'];

  } catch (PDOException $e) {
    $error = "Database error: " . $e->getMessage();
  }
?>
<!doctype html>

<html
  lang="en"
  class="layout-navbar-fixed layout-menu-fixed layout-compact"
  dir="ltr"
  data-skin="default"
  data-assets-path="../../assets/"
  data-template="vertical-menu-template"
  data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
         <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
           <?php include('includes/navbar.php'); ?>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="row g-6">
                <!-- Earning Reports -->
                <div class="col-md-6">
                  <div class="card h-100">
                    <div class="card-header pb-0 d-flex justify-content-between">
                      <div class="card-title mb-0">
                        <h5 class="mb-1">Earning Reports</h5>
                        <p class="card-subtitle">Monthly Earnings Overview</p>
                      </div>
                      <div class="dropdown">
                        <button
                          class="btn btn-text-secondary rounded-pill text-body-secondary border-0 p-2 me-n1"
                          type="button"
                          id="earningReportsId"
                          data-bs-toggle="dropdown"
                          aria-haspopup="true"
                          aria-expanded="false">
                          <i class="icon-base ti tabler-dots-vertical icon-md text-body-secondary"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="earningReportsId">
                          <a class="deposit.php" href="javascript:void(0);">View More</a>
                        </div>
                      </div>
                    </div>
                    <div class="card-body">
                      <div class="row align-items-center g-md-8">
                        <div class="col-12 col-md-5 d-flex flex-column">
                          <div class="d-flex gap-2 align-items-center mb-3 flex-wrap">
                            <h2 class="mb-0"><?= htmlspecialchars($user['currency']) ?> <?= $financialData['total_deposits'] ?></h2>
                          </div>
                          <small class="text-body">Total Deposit</small>
                        </div>
                        <div class="col-12 col-md-7 ps-xl-8">
                          <div id="weeklyEarningReports"></div>
                        </div>
                      </div>
                      <div class="border rounded p-5 mt-5">
                        <div class="row gap-4 gap-sm-0 d-flex justify-content-center">
                          <div class="col-12 col-sm-4">
                            <div class="d-flex gap-2 align-items-center">
                              <div class="badge rounded bg-label-info p-1">
                                <i class="icon-base ti tabler-chart-pie-2 icon-18px"></i>
                              </div>
                              <h6 class="mb-0 fw-normal">Profit</h6>
                            </div>
                            <h4 class="my-2"><?= htmlspecialchars($user['currency']) ?> <?= $financialData['total_profit'] ?></h4>
                            <div class="progress w-75" style="height: 4px">
                              <div
                                class="progress-bar bg-info"
                                role="progressbar"
                                style="width: 50%"
                                aria-valuenow="50"
                                aria-valuemin="0"
                                aria-valuemax="100"></div>
                            </div>
                          </div>
                          <div class="col-12 col-sm-4">
                            <div class="d-flex gap-2 align-items-center">
                              <div class="badge rounded bg-label-danger p-1">
                                <i class="icon-base ti tabler-brand-paypal icon-18px"></i>
                              </div>
                              <h6 class="mb-0 fw-normal">Expense</h6>
                            </div>
                            <h4 class="my-2"><?= htmlspecialchars($user['currency']) ?> <?= $financialData['total_withdrawals'] ?></h4>
                            <div class="progress w-75" style="height: 4px">
                              <div
                                class="progress-bar bg-danger"
                                role="progressbar"
                                style="width: 65%"
                                aria-valuenow="65"
                                aria-valuemin="0"
                                aria-valuemax="100"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <!--/ Earning Reports -->

                <!-- Applications Tracker -->
                <div class="col-12 col-md-6">
                  <div class="card h-100">
                    <div class="card-header d-flex justify-content-between">
                      <div class="card-title mb-0">
                        <h5 class="mb-1">Applications Tracker</h5>
                        <p class="card-subtitle"><?php date_default_timezone_set('Asia/Kolkata'); echo date('d-m-Y H:i:s'); ?></p>
                      </div>
                      <div class="dropdown">
                        <button
                          class="btn btn-text-secondary rounded-pill text-body-secondary border-0 p-2 me-n1"
                          type="button"
                          id="supportTrackerMenu"
                          data-bs-toggle="dropdown"
                          aria-haspopup="true"
                          aria-expanded="false">
                          <i class="icon-base ti tabler-dots-vertical icon-md text-body-secondary"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="supportTrackerMenu">
                          <a class="dropdown-item" href="javascript:void(0);">View More</a>
                          <a class="dropdown-item" href="javascript:void(0);">Delete</a>
                        </div>
                      </div>
                    </div>
                    <div class="card-body row">
                      <div class="d-flex align-items-center col-12 col-sm-4">
                        <ul class="p-0 m-0">
                          <li class="d-flex gap-4 align-items-center mb-lg-3 pb-1">
                            <div class="badge rounded bg-label-primary p-1_5">
                              <i class="icon-base ti tabler-ticket icon-md"></i>
                            </div>
                            <div>
                              <h6 class="mb-0 text-nowrap">Pending Applications</h6>
                              <small class="text-body-secondary"><?= $all_applications_track['pending'] ?></small>
                            </div>
                          </li>
                          <li class="d-flex gap-4 align-items-center mb-lg-3 pb-1">
                            <div class="badge rounded bg-label-info p-1_5">
                              <i class="icon-base ti tabler-circle-check icon-md"></i>
                            </div>
                            <div>
                              <h6 class="mb-0 text-nowrap">Processing Applications</h6>
                              <small class="text-body-secondary"><?= $all_applications_track['processing'] ?></small>
                            </div>
                          </li>
                        </ul>
                      </div>
                      <div class="col-12 col-md-8">
                        <div id="application-tracker"></div>
                      </div>
                    </div>
                  </div>
                </div>
                <!--/ Support Tracker -->

                <!-- Shortcut List -->
                <div class="col-xxl-4 col-md-6 col-12">
                  <div class="card h-100">
                    <div class="card-header d-flex justify-content-between">
                      <div class="card-title mb-0">
                        <h5 class="mb-1">Shortcuts</h5>
                      </div>
                      <div class="dropdown">
                        <button
                          class="btn btn-text-secondary rounded-pill text-body-secondary border-0 p-2 me-n1"
                          type="button"
                          id="sourceVisits"
                          data-bs-toggle="dropdown"
                          aria-haspopup="true"
                          aria-expanded="false">
                          <i class="icon-base ti tabler-dots-vertical icon-md text-body-secondary"></i>
                        </button>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="sourceVisits">
                          <a class="dropdown-item" href="javascript:void(0);">Refresh</a>
                          <a class="dropdown-item" href="javascript:void(0);">Download</a>
                          <a class="dropdown-item" href="javascript:void(0);">View All</a>
                        </div>
                      </div>
                    </div>
                    <div class="card-body">
                      <ul class="list-unstyled mb-0 d-flex flex-wrap">
                        <li class="shortcut-item w-100 py-2">
                          <a href="withdraw.php" class="d-flex justify-content-between px-2 py-3 rounded-2 links-bg-hover">
                            <div class="d-flex gap-2 align-items-center">
                              <i class="icon-base ti tabler-wallet icon-2xl text-primary"></i>
                              <div>Withdrawl Requests</div>
                            </div>
                            <i class="icon-base ti tabler-chevron-right icon-md"></i>
                          </a>
                        </li>
                        <li class="shortcut-item w-100 py-2">
                          <a href="child-data.php" class="d-flex justify-content-between px-2 py-3 rounded-2 links-bg-hover">
                            <div class="d-flex gap-2 align-items-center">
                              <i class="icon-base ti tabler-baby-carriage icon-2xl text-primary"></i>
                              <div>Child Data</div>
                            </div>
                            
                            <i class="icon-base ti tabler-chevron-right icon-md"></i>
                          </a>
                        </li>
                        <li class="shortcut-item w-100 py-2">
                          <a href="contact-data.php" class="d-flex justify-content-between px-2 py-3 rounded-2 links-bg-hover">
                            <div class="d-flex gap-2 align-items-center">
                              <i class="icon-base ti tabler-device-mobile icon-2xl text-primary"></i>
                              <div>MOB/Email Data</div>
                            </div>
                            <i class="icon-base ti tabler-chevron-right icon-md"></i>
                          </a>
                        </li>
                        <li class="shortcut-item w-100 py-2">
                          <a href="dob-data.php" class="d-flex justify-content-between px-2 py-3 rounded-2 links-bg-hover">
                            <div class="d-flex gap-2 align-items-center">
                              <i class="icon-base ti tabler-calendar-event icon-2xl text-primary"></i>
                              <div>D.O.B Data</div>
                            </div>
                            <i class="icon-base ti tabler-chevron-right icon-md"></i>
                          </a>
                        </li>
                        <li class="shortcut-item w-100 py-2">
                          <a href="name-data.php" class="d-flex justify-content-between px-2 py-3 rounded-2 links-bg-hover">
                            <div class="d-flex gap-2 align-items-center">
                              <i class="icon-base ti tabler-user icon-2xl text-primary"></i>
                              <div>Name Data</div>
                            </div>
                            <i class="icon-base ti tabler-chevron-right icon-md"></i>
                          </a>
                        </li>
                        <li class="shortcut-item w-100 py-2">
                          <a href="address-data.php" class="d-flex justify-content-between px-2 py-3 rounded-2 links-bg-hover">
                            <div class="d-flex gap-2 align-items-center">
                              <i class="icon-base ti tabler-home icon-2xl text-primary"></i>
                              <div>Address Data</div>
                            </div>
                            <i class="icon-base ti tabler-chevron-right icon-md"></i>
                          </a>
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
                <!--/ shortcut List -->

                <!-- Withdrawl Requests Table -->
                <div class="col-xxl-8">
                  <div class="card mb-4">
                    <h5 class="card-header">Distributor Leaderboard</h5>
                    <div class="card-body">
                      <div class="table-responsive text-nowrap">
                        <table class="dt-responsive-leaderboard table">
                          <thead>
                            <tr>
                              <th>SL No</th>
                              <th>User</th>
                              <th>Full Name</th>
                              <th>Dist Code</th>
                              <th>Connections</th>
                            </tr>
                          </thead>
                          <tbody>
                            <?php foreach($distributor_leaderboard as $distributor): ?>
                            <tr>
                              <td><?php echo $distributor['id'];?></td>
                              <td><?php echo $distributor['username'];?></td>
                              <td><?php echo $distributor['full_name'];?></td>
                              <td><?php echo $distributor['distributor_code'];?></td>
                              <td><?php echo $distributor['connection_count'];?></td>
                            </tr>
                            <?php endforeach;?>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
                <!--/ withdrawl request table -->

                <!-- Withdrawl Requests Table -->
                <div class="col-xxl-12">
                  <div class="card mb-4">
                    <h5 class="card-header">Pending Withdrawl Requests</h5>
                    <div class="card-body">
                      <div class="table-responsive text-nowrap">
                        <table class="dt-responsive-withdraw table">
                          <thead>
                            <tr>
                              <th>ID</th>
                              <th>User</th>
                              <th>Status</th>
                              <th>Amount</th>
                              <th>Date</th>
                            </tr>
                          </thead>
                          <tbody>
                            <?php foreach($withdrawal_requests as $withdrawal_request): ?>
                            <tr>
                              <td><?php echo $withdrawal_request['id'];?></td>
                              <td><?php echo $withdrawal_request['username'];?></td>
                                <td>
                                <?php
                                  $status = $withdrawal_request['status'];
                                  $badgeClass = 'bg-secondary';
                                  if ($status === 'pending') $badgeClass = 'bg-warning';
                                  elseif ($status === 'approved') $badgeClass = 'bg-success';
                                  elseif ($status === 'rejected') $badgeClass = 'bg-danger';
                                  elseif ($status === 'processing') $badgeClass = 'bg-info';
                                ?>
                                <span class="badge <?= $badgeClass; ?>">
                                  <?= ucfirst($status); ?>
                                </span>
                                </td>
                              <td><?= htmlspecialchars($user['currency']) ?> <?php echo $withdrawal_request['amount'];?></td>
                              <td><?= date('d M, Y', strtotime($withdrawal_request['created_at']))?></td>
                            </tr>
                            <?php endforeach;?>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
                <!--/ withdrawl request table -->
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
             <?php include('includes/footer.php'); ?>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>

      <!-- Drag Target Area To SlideIn Menu On Small Screens -->
      <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->
     <?php include('includes/script.php'); ?>
    <style>
      .links-bg-hover:hover  {
        background-color: rgba(255, 255, 255, 0.05);
      }
    </style>
     <script>
      const dt_responsive_table_leaderboard = document.querySelector('.dt-responsive-leaderboard');
      if (dt_responsive_table_leaderboard) {
          let dt_responsive_leaderboard = new DataTable(dt_responsive_table_leaderboard, {
              responsive: true,
              layout: {
              topStart: {
                  rowClass: 'row my-0 justify-content-between',
                  features: [
                      'pageLength'
                  ],
                  pageLength: {
                      menu: [10, 25, 50, 100],
                      text: 'Show _MENU_ entries'
                  }
              },
              bottomStart: {
                  rowClass: 'row mx-3 justify-content-between',
                  features: ['info']
              },
              bottomEnd: 'paging'
              },
              language: {
              paginate: {
                  next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
                  previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
                  first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                  last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
              },
              search: '',
              searchPlaceholder: 'Search records...',
              lengthMenu: 'Show _MENU_ entries'
              },
              columnDefs: [{
                  responsivePriority: 1,
                  targets: 1
              }, // Application ID
              {
                  responsivePriority: 2,
                  targets: 2
              }, // Full Name
              {
                  responsivePriority: 3,
                  targets: -1
              } // Actions
              ]
          });
      }

      const dt_responsive_table_withdraw = document.querySelector('.dt-responsive-withdraw');
      if (dt_responsive_table_withdraw) {
          let dt_responsive_withdraw = new DataTable(dt_responsive_table_withdraw, {
              responsive: true,
              layout: {
              topStart: {
                  rowClass: 'row my-0 justify-content-between',
                  features: [
                      'pageLength'
                  ],
                  pageLength: {
                      menu: [10, 25, 50, 100],
                      text: 'Show _MENU_ entries'
                  }
              },
              bottomStart: {
                  rowClass: 'row mx-3 justify-content-between',
                  features: ['info']
              },
              bottomEnd: 'paging'
              },
              language: {
              paginate: {
                  next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
                  previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
                  first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                  last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
              },
              search: '',
              searchPlaceholder: 'Search records...',
              lengthMenu: 'Show _MENU_ entries'
              },
              columnDefs: [{
                  responsivePriority: 1,
                  targets: 1
              }, // Application ID
              {
                  responsivePriority: 2,
                  targets: 2
              }, // Full Name
              {
                  responsivePriority: 3,
                  targets: -1
              } // Actions
              ]
          });
      }

      // Application Tracker - Radial Bar Chart
      // --------------------------------------------------------------------
      const supportTrackerEl = document.querySelector('#application-tracker'),
        supportTrackerOptions = {
          series: [<?= htmlspecialchars($percentage_processing) ?>],
          labels: ['Percentage Taken'],
          chart: {
            height: 337,
            type: 'radialBar'
          },
          plotOptions: {
            radialBar: {
              offsetY: 10,
              startAngle: -140,
              endAngle: 130,
              hollow: {
                size: '65%'
              },
              track: {
                background: window.Helpers.getCssVar('paper-bg'),
                strokeWidth: '100%'
              },
              dataLabels: {
                name: {
                  offsetY: -20,
                  color: window.Helpers.getCssVar('secondary-color'),
                  fontSize: '13px',
                  fontWeight: '400',
                  fontFamily: window.Helpers.getCssVar('font-family-base')
                },
                value: {
                  offsetY: 10,
                  color: window.Helpers.getCssVar('heading-color'),
                  fontSize: '38px',
                  fontWeight: '400',
                  fontFamily: window.Helpers.getCssVar('font-family-base')
                }
              }
            }
          },
          colors: [config.colors.primary],
          fill: {
            type: 'gradient',
            gradient: {
              shade: 'dark',
              shadeIntensity: 0.5,
              gradientToColors: [config.colors.primary],
              inverseColors: true,
              opacityFrom: 1,
              opacityTo: 0.6,
              stops: [30, 70, 100]
            }
          },
          stroke: {
            dashArray: 10
          },
          grid: {
            padding: {
              top: -20,
              bottom: 5
            }
          },
          states: {
            hover: {
              filter: {
                type: 'none'
              }
            },
            active: {
              filter: {
                type: 'none'
              }
            }
          },
          responsive: [
            {
              breakpoint: 1025,
              options: {
                chart: {
                  height: 330
                }
              }
            },
            {
              breakpoint: 769,
              options: {
                chart: {
                  height: 280
                }
              }
            }
          ]
        };
      if (typeof supportTrackerEl !== undefined && supportTrackerEl !== null) {
        const supportTracker = new ApexCharts(supportTrackerEl, supportTrackerOptions);
        supportTracker.render();
      }
     </script>
  </body>
</html>
');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>