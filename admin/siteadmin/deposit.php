<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once(__DIR__ . '/../../config/database.php');

// Initialize variables
$error = null;
$records_per_page = 10; // Number of records per page
$page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
$page = max(1, $page); // Ensure page is at least 1
$offset = ($page - 1) * $records_per_page;

// Date range handling (default to current month)
$startDate = isset($_GET['start_date']) ? $_GET['start_date'] : date('Y-m-01');
$endDate = isset($_GET['end_date']) ? $_GET['end_date'] : date('Y-m-t');

// Handle export requests
if (isset($_GET['export'])) {
    try {
        // Get all deposit data for export
        $stmt = $pdo->prepare("SELECT d.id, u.username, u.email, d.amount, d.order_id, d.status, d.payment_method, d.created_at
                              FROM deposits d
                              JOIN users u ON d.user_id = u.id
                              WHERE d.created_at BETWEEN ? AND ?
                              ORDER BY d.created_at DESC");
        $stmt->execute([$startDate, $endDate . ' 23:59:59']);
        $exportData = $stmt->fetchAll(PDO::FETCH_ASSOC);

        // Set headers for CSV download
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="deposits_export_' . date('Y-m-d') . '.csv"');
        
        // Open output stream
        $output = fopen('php://output', 'w');
        
        // Add CSV headers
        fputcsv($output, ['ID', 'Username', 'Email', 'Amount', 'Order ID', 'Status', 'Payment Method', 'Date']);
        
        // Add data rows
        foreach ($exportData as $row) {
            fputcsv($output, [
                $row['id'],
                $row['username'],
                $row['email'],
                $row['amount'],
                $row['order_id'],
                ucfirst($row['status']),
                ucfirst($row['payment_method']),
                date('M d, Y h:i A', strtotime($row['created_at']))
            ]);
        }
        
        fclose($output);
        exit();
        
    } catch (PDOException $e) {
        $error = "Export failed: " . $e->getMessage();
    }
}

// Calculate financial totals
$financialData = [
    'total_deposits' => 0,
    'total_pending' => 0,
    'total_failed' => 0
];

try {
    // Get total deposits
    $stmt = $pdo->prepare("SELECT SUM(amount) as total FROM deposits
                          WHERE status = 'completed'
                          AND created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $financialData['total_deposits'] = $stmt->fetchColumn() ?: 0;

    // Get pending deposits
    $stmt = $pdo->prepare("SELECT SUM(amount) as total FROM deposits
                          WHERE status = 'pending'
                          AND created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $financialData['total_pending'] = $stmt->fetchColumn() ?: 0;

    // Get failed/cancelled deposits
    $stmt = $pdo->prepare("SELECT SUM(amount) as total FROM deposits
                          WHERE status IN ('failed', 'cancelled')
                          AND created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $financialData['total_failed'] = $stmt->fetchColumn() ?: 0;

} catch (PDOException $e) {
    $error = "Database error: " . $e->getMessage();
}

// Get total number of deposits for pagination
try {
    $stmt = $pdo->prepare("SELECT COUNT(*) FROM deposits d
                          JOIN users u ON d.user_id = u.id
                          WHERE d.created_at BETWEEN ? AND ?");
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $total_records = $stmt->fetchColumn();
    $total_pages = ceil($total_records / $records_per_page);
} catch (PDOException $e) {
    $error = "Database error: " . $e->getMessage();
}

// Get deposit listings with pagination
$deposits = [];
try {
    // Make sure both are integers
    $records_per_page = (int)$records_per_page;
    $offset = (int)$offset;

    // Inject integers directly (safe because of casting)
    $sql = "SELECT d.*, u.username, u.email
            FROM deposits d
            JOIN users u ON d.user_id = u.id
            WHERE d.created_at BETWEEN ? AND ?
            ORDER BY d.created_at DESC
            LIMIT $records_per_page OFFSET $offset";

    $stmt = $pdo->prepare($sql);
    $stmt->execute([$startDate, $endDate . ' 23:59:59']);
    $deposits = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error = "Database error: " . $e->getMessage();
}

?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr"
  data-skin="default" data-assets-path="../../assets/"
  data-template="vertical-menu-template" data-bs-theme="light">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Admin Finance Dashboard</title>
    <?php include('includes/head.php'); ?>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
    /* Admin Dashboard Styles */
    .stat-card {
        transition: all 0.3s ease;
        border-radius: 10px;
        overflow: hidden;
        height: 100%;
    }
    
    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    
    .stat-icon {
        font-size: 2rem;
        opacity: 0.7;
    }
    
    .badge-status {
        padding: 5px 10px;
        border-radius: 20px;
        font-weight: 500;
    }
    
    .table-responsive {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }
    
    /* Form enhancements */
    .form-control:focus {
        border-color: #7367F0;
        box-shadow: 0 0 0 0.2rem rgba(115, 103, 240, 0.25);
    }
    
    /* Pagination styles */
    .pagination {
        justify-content: center;
        margin-top: 20px;
    }
    
    .pagination .page-link {
        color: #7367F0;
        border-radius: 5px;
        margin: 0 3px;
    }
    
    .pagination .page-item.active .page-link {
        background-color: #7367F0;
        border-color: #7367F0;
    }
    
    .pagination .page-item.disabled .page-link {
        color: #6c757d;
    }
    
    /* Print-specific styles */
    @media print {
        body * {
            visibility: hidden;
        }
        .print-section, .print-section * {
            visibility: visible;
        }
        .print-section {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
        }
        .no-print {
            display: none !important;
        }
        .table-responsive {
            box-shadow: none;
        }
    }
    </style>
</head>
<body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <!-- Menu -->
            <?php include('includes/sidebar.php'); ?>
            <div class="layout-page">
                <!-- Navbar -->
                <?php include('includes/navbar.php'); ?>
                <!-- Content wrapper -->
                <div class="content-wrapper">
                    <!-- Content -->
                    <div class="container-xxl flex-grow-1 container-p-y">
                        <h4 class="fw-bold py-3 mb-4">
                            <span class="text-muted fw-light">Admin /</span> Finance Dashboard
                        </h4>
                        <!-- Date Range Picker -->
                        <div class="card mb-4 no-print">
                            <div class="card-body">
                                <form method="get" class="row g-3">
                                    <div class="col-md-4">
                                        <label for="start_date" class="form-label">From Date</label>
                                        <input type="date" class="form-control" id="start_date" name="start_date"
                                               value="<?= htmlspecialchars($startDate) ?>">
                                    </div>
                                    <div class="col-md-4">
                                        <label for="end_date" class="form-label">To Date</label>
                                        <input type="date" class="form-control" id="end_date" name="end_date"
                                               value="<?= htmlspecialchars($endDate) ?>">
                                    </div>
                                    <div class="col-md-4 d-flex align-items-end">
                                        <button type="submit" class="btn btn-primary me-2">
                                            <i class="fas fa-filter me-2"></i>Filter
                                        </button>
                                        <a href="?" class="btn btn-outline-secondary">
                                            <i class="fas fa-sync-alt me-2"></i>Reset
                                        </a>
                                    </div>
                                </form>
                            </div>
                        </div>
                        <!-- Stats Cards -->
                        <div class="row mb-4 no-print">
                            <div class="col-md-6 col-lg-4 mb-4">
                                <div class="card stat-card bg-primary text-white h-100">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h5 class="card-title mb-0">Total Deposits</h5>
                                            <div class="stat-icon">
                                                <i class="fas fa-money-bill-wave"></i>
                                            </div>
                                        </div>
                                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($financialData['total_deposits'], 2) ?></h3>
                                        <small class="text-white-50">All completed deposits</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 col-lg-4 mb-4">
                                <div class="card stat-card bg-warning text-white h-100">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h5 class="card-title mb-0">Pending Deposits</h5>
                                            <div class="stat-icon">
                                                <i class="fas fa-clock"></i>
                                            </div>
                                        </div>
                                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($financialData['total_pending'], 2) ?></h3>
                                        <small class="text-white-50">All pending deposits</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 col-lg-4 mb-4">
                                <div class="card stat-card bg-danger text-white h-100">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <h5 class="card-title mb-0">Failed/Cancelled</h5>
                                            <div class="stat-icon">
                                                <i class="fas fa-times"></i>
                                            </div>
                                        </div>
                                        <h3 class="card-text mb-auto"><?= htmlspecialchars($user['currency']) ?> <?= number_format($financialData['total_failed'], 2) ?></h3>
                                        <small class="text-white-50">Failed or cancelled deposits</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Deposit Transactions -->
                        <div class="card mb-4 print-section">
                            <h5 class="card-header bg-transparent">
                                <i class="fas fa-list me-2"></i>Deposit Transactions (<?= $total_records ?>)
                                <span class="float-end no-print">
                                    <small><?= date('M d, Y', strtotime($startDate)) ?> to <?= date('M d, Y', strtotime($endDate)) ?></small>
                                </span>
                            </h5>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>ID</th>
                                                <th>User</th>
                                                <th>Amount</th>
                                                <th>Order ID</th>
                                                <th>Status</th>
                                                <th>Payment Method</th>
                                                <th>Date</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <?php if (empty($deposits)): ?>
                                                <tr>
                                                    <td colspan="7" class="text-center py-4">No deposits found for the selected period</td>
                                                </tr>
                                            <?php else: ?>
                                                <?php foreach ($deposits as $key => $deposit): ?>
                                                    <tr>
                                                        <td><?= (($page - 1) * $records_per_page) + $key + 1 ?></td>
                                                        <td>
                                                            <div><?= htmlspecialchars($deposit['username']) ?></div>
                                                            <small class="text-muted"><?= htmlspecialchars($deposit['email']) ?></small>
                                                        </td>
                                                        <td><?= htmlspecialchars($user['currency']) ?> <?= number_format($deposit['amount'], 2) ?></td>
                                                        <td><?= htmlspecialchars($deposit['order_id']) ?></td>
                                                        <td>
                                                            <?php
                                                            $statusClass = '';
                                                            switch ($deposit['status']) {
                                                                case 'completed': $statusClass = 'bg-success'; break;
                                                                case 'pending': $statusClass = 'bg-warning'; break;
                                                                case 'failed': $statusClass = 'bg-danger'; break;
                                                                case 'cancelled': $statusClass = 'bg-secondary'; break;
                                                            }
                                                            ?>
                                                            <span class="badge badge-status <?= $statusClass ?>">
                                                                <?= ucfirst($deposit['status']) ?>
                                                            </span>
                                                        </td>
                                                        <td><?= ucfirst($deposit['payment_method']) ?></td>
                                                        <td><?= date('M d, Y h:i A', strtotime($deposit['created_at'])) ?></td>
                                                    </tr>
                                                <?php endforeach; ?>
                                            <?php endif; ?>
                                        </tbody>
                                    </table>
                                </div>
                                <!-- Pagination -->
                                <?php if ($total_pages > 1): ?>
                                    <nav aria-label="Page navigation" class="no-print">
                                        <ul class="pagination">
                                            <li class="page-item <?= $page <= 1 ? 'disabled' : '' ?>">
                                                <a class="page-link" href="?start_date=<?= urlencode($startDate) ?>&end_date=<?= urlencode($endDate) ?>&page=<?= $page - 1 ?>" aria-label="Previous">
                                                    <span aria-hidden="true">&laquo;</span>
                                                </a>
                                            </li>
                                            <?php for ($i = 1; $i <= $total_pages; $i++): ?>
                                                <li class="page-item <?= $i === $page ? 'active' : '' ?>">
                                                    <a class="page-link" href="?start_date=<?= urlencode($startDate) ?>&end_date=<?= urlencode($endDate) ?>&page=<?= $i ?>"><?= $i ?></a>
                                                </li>
                                            <?php endfor; ?>
                                            <li class="page-item <?= $page >= $total_pages ? 'disabled' : '' ?>">
                                                <a class="page-link" href="?start_date=<?= urlencode($startDate) ?>&end_date=<?= urlencode($endDate) ?>&page=<?= $page + 1 ?>" aria-label="Next">
                                                    <span aria-hidden="true">&raquo;</span>
                                                </a>
                                            </li>
                                        </ul>
                                    </nav>
                                <?php endif; ?>
                            </div>
                        </div>
                        <!-- Quick Actions -->
                        <div class="row no-print">
                            <div class="col-md-6 mb-4">
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title"><i class="fas fa-bolt me-2"></i>Quick Actions</h5>
                                        <div class="d-grid gap-2">
                                            <a href="?export=1&start_date=<?= urlencode($startDate) ?>&end_date=<?= urlencode($endDate) ?>" class="btn btn-outline-primary">
                                                <i class="fas fa-download me-2"></i> Export Data
                                            </a>
                                            <button class="btn btn-outline-secondary" onclick="window.print()">
                                                <i class="fas fa-print me-2"></i> Print Report
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Footer -->
                    <?php include('includes/footer.php'); ?>
                </div>
            </div>
        </div>
        <!-- Overlay -->
        <div class="layout-overlay layout-menu-toggle"></div>
    </div>
    <?php include('includes/script.php'); ?>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize date range picker
        const startDateInput = document.getElementById('start_date');
        const endDateInput = document.getElementById('end_date');
        
        // Set max date for end date to today
        endDateInput.max = new Date().toISOString().split('T')[0];
        
        // Update end date min when start date changes
        startDateInput.addEventListener('change', function() {
            endDateInput.min = this.value;
            if (endDateInput.value < this.value) {
                endDateInput.value = this.value;
            }
        });
        // Show error if exists
        <?php if ($error): ?>
            Swal.fire({
                title: 'Error',
                text: '<?= addslashes($error) ?>',
                icon: 'error',
                confirmButtonText: 'OK',
                confirmButtonColor: '#7367F0',
                customClass: {
                    confirmButton: 'btn btn-primary'
                }
            });
        <?php endif; ?>
    });
    </script>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>