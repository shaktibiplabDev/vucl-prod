<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Function to build referral tree
function buildReferralTree($pdo, $userId = null, $level = 0, $maxLevel = 5) {
    try {
        if ($level >= $maxLevel) return null;
        
        $tree = [];
        
        if ($userId) {
            $stmt = $pdo->prepare("
                SELECT id, username, full_name, user_type, created_at, referral_code, distributor_code 
                FROM users 
                WHERE id = ? 
                AND user_type NOT IN ('admin', 'operator')
                AND status = 'active'
            ");
            $stmt->execute([$userId]);
            $user = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if (!$user) return null;
            
            $tree['user'] = $user;
        } else {
            $stmt = $pdo->prepare("
                SELECT id, username, full_name, user_type, created_at, referral_code, distributor_code 
                FROM users 
                WHERE user_type = 'distributor' 
                AND status = 'active'
                AND user_type NOT IN ('admin', 'operator')
            ");
            $stmt->execute();
            $distributors = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            foreach ($distributors as $distributor) {
                $subTree = buildReferralTree($pdo, $distributor['id'], $level + 1, $maxLevel);
                if ($subTree) {
                    $tree[] = $subTree;
                }
            }
            
            return $tree;
        }
        
        $stmt = $pdo->prepare("
            SELECT u.id, u.username, u.full_name, u.user_type, u.created_at, u.referral_code, u.distributor_code 
            FROM users u 
            WHERE u.referred_by = ? 
            AND u.status = 'active'
            AND u.user_type NOT IN ('admin', 'operator')
        ");
        $stmt->execute([$userId]);
        $directReferrals = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        $myReferrals = $directReferrals;
        if ($user['user_type'] == 'distributor') {
            $stmt = $pdo->prepare("
                SELECT u.id, u.username, u.full_name, u.user_type, u.created_at, u.referral_code, u.distributor_code 
                FROM users u 
                WHERE u.distributor_id = ? 
                AND u.referred_by IS NULL
                AND u.status = 'active'
                AND u.user_type NOT IN ('admin', 'operator')
            ");
            $stmt->execute([$userId]);
            $distributorConnections = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $myReferrals = array_merge($directReferrals, $distributorConnections);
        }
        
        foreach ($myReferrals as $referral) {
            $subTree = buildReferralTree($pdo, $referral['id'], $level + 1, $maxLevel);
            if ($subTree) {
                $tree['referrals'][] = $subTree;
            }
        }
        
        return $tree;
    } catch (PDOException $e) {
        error_log("Error building referral tree: " . $e->getMessage());
        return null;
    }
}

// Calculate referral counts
function calculateReferralCounts($pdo) {
    try {
        $directReferralSql = "
            SELECT u.id, u.username, u.full_name, u.user_type, u.referral_code, u.distributor_code,
            COUNT(r.id) as referral_count
            FROM users u
            LEFT JOIN users r ON r.referred_by = u.id 
            WHERE u.status = 'active'
            AND u.user_type NOT IN ('admin', 'operator')
            GROUP BY u.id, u.username, u.full_name, u.user_type, u.referral_code, u.distributor_code
            ORDER BY u.user_type, referral_count DESC
        ";
        
        $distributorSql = "
            SELECT u.id, u.username, u.full_name, u.user_type, u.referral_code, u.distributor_code,
            COUNT(r.id) as connection_count
            FROM users u
            LEFT JOIN users r ON r.distributor_id = u.id AND r.referred_by IS NULL
            WHERE u.status = 'active' 
            AND u.user_type = 'distributor'
            AND u.user_type NOT IN ('admin', 'operator')
            GROUP BY u.id, u.username, u.full_name, u.user_type, u.referral_code, u.distributor_code
            ORDER BY connection_count DESC
        ";
        
        $directReferrals = $pdo->query($directReferralSql)->fetchAll(PDO::FETCH_ASSOC);
        $distributorConnections = $pdo->query($distributorSql)->fetchAll(PDO::FETCH_ASSOC);
        
        $referralCounts = [];
        foreach ($directReferrals as $user) {
            $userId = $user['id'];
            $referralCounts[$userId] = [
                'id' => $userId,
                'username' => $user['username'],
                'full_name' => $user['full_name'],
                'user_type' => $user['user_type'],
                'referral_code' => $user['referral_code'],
                'distributor_code' => $user['distributor_code'],
                'direct_referrals' => $user['referral_count'],
                'distributor_connections' => 0,
                'total_referrals' => $user['referral_count']
            ];
        }
        
        foreach ($distributorConnections as $user) {
            $userId = $user['id'];
            if (isset($referralCounts[$userId])) {
                $referralCounts[$userId]['distributor_connections'] = $user['connection_count'];
                $referralCounts[$userId]['total_referrals'] += $user['connection_count'];
            } else {
                $referralCounts[$userId] = [
                    'id' => $userId,
                    'username' => $user['username'],
                    'full_name' => $user['full_name'],
                    'user_type' => $user['user_type'],
                    'referral_code' => $user['referral_code'],
                    'distributor_code' => $user['distributor_code'],
                    'direct_referrals' => 0,
                    'distributor_connections' => $user['connection_count'],
                    'total_referrals' => $user['connection_count']
                ];
            }
        }
        
        usort($referralCounts, function($a, $b) {
            if ($a['user_type'] != $b['user_type']) {
                return $a['user_type'] == 'distributor' ? -1 : 1;
            }
            return $b['total_referrals'] - $a['total_referrals'];
        });
        
        return array_values($referralCounts);
    } catch (PDOException $e) {
        error_log("Error calculating referral counts: " . $e->getMessage());
        return [];
    }
}

try {
    $referralTree = buildReferralTree($pdo);
    $referralCounts = calculateReferralCounts($pdo);
} catch (Exception $e) {
    error_log("Error initializing referral data: " . $e->getMessage());
    $referralTree = [];
    $referralCounts = [];
}

// Function to render tree as HTML
function renderTree($node, $isRoot = false) {
    if ($isRoot) {
        echo '<div class="family-tree-container"><ul class="family-tree">';
        foreach ($node as $distributor) {
            if ($distributor) {
                renderTreeNode($distributor);
            }
        }
        echo '</ul></div>';
    } elseif ($node) {
        renderTreeNode($node);
    }
}

function renderTreeNode($node) {
    $userTypeClass = $node['user']['user_type'] === 'distributor' ? 'distributor' : 'retailer';
    $icon = $node['user']['user_type'] === 'distributor' ? 'fa-user-tie' : 'fa-user';
    $hasChildren = !empty($node['referrals']);
    
    echo '<li class="family-tree-node">';
    echo '<div class="tree-node ' . $userTypeClass . '" ' . ($hasChildren ? 'data-has-children="true"' : '') . '>';
    if ($hasChildren) {
        echo '<span class="tree-toggle"><i class="fas fa-chevron-down"></i></span>';
    } else {
        echo '<span class="tree-toggle no-children"></span>';
    }
    echo '<i class="fas ' . $icon . ' me-1"></i>';
    echo htmlspecialchars($node['user']['username']);
    
    if (!empty($node['user']['distributor_code'])) {
        echo ' <small class="text-muted">Code: ' . htmlspecialchars($node['user']['distributor_code']) . '</small>';
    } elseif (!empty($node['user']['referral_code'])) {
        echo ' <small class="text-muted">Ref: ' . htmlspecialchars($node['user']['referral_code']) . '</small>';
    }
    
    echo ' <small class="text-muted">(' . date('d M Y', strtotime($node['user']['created_at'])) . ')</small>';
    echo '</div>';
    
    if ($hasChildren) {
        echo '<ul class="tree-sublist">';
        foreach ($node['referrals'] as $referral) {
            if ($referral) {
                renderTreeNode($referral);
            }
        }
        echo '</ul>';
    }
    echo '</li>';
}
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="fas fa-bars"></i>
            <i class="fas fa-chevron-right"></i>
          </a>
        </div>

        <div class="layout-page">
          <?php include('includes/navbar.php'); ?>

          <div class="content-wrapper">
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="row">
                <div class="col-12">
                  <div class="card mb-4">
                    <h5 class="card-header pb-0 text-md-start text-center">Referral Network Tree</h5>
                    <div class="card-body">
                      <div class="row mb-3">
                        <div class="col-md-6">
                          <div class="d-flex align-items-center flex-wrap">
                            <div class="legend-box distributor me-2"></div>
                            <span>Distributor</span>
                            <div class="legend-box retailer mx-2 ms-3"></div>
                            <span>Retailer</span>
                          </div>
                        </div>
                        <div class="col-md-6 text-md-end">
                          <button class="btn btn-sm btn-outline-secondary" id="expandAll">
                            <i class="fas fa-expand me-1"></i> Expand All
                          </button>
                          <button class="btn btn-sm btn-outline-secondary ms-2" id="collapseAll">
                            <i class="fas fa-compress me-1"></i> Collapse All
                          </button>
                          <button class="btn btn-sm btn-outline-primary ms-2" id="centerTree">
                            <i class="fas fa-crosshairs me-1"></i> Center Tree
                          </button>
                          <button class="btn btn-sm btn-outline-success ms-2" id="zoomIn">
                            <i class="fas fa-search-plus me-1"></i>
                          </button>
                          <button class="btn btn-sm btn-outline-warning ms-2" id="zoomOut">
                            <i class="fas fa-search-minus me-1"></i>
                          </button>
                        </div>
                      </div>
                      
                      <?php if (empty($referralTree)): ?>
                        <div class="alert alert-warning">No referral data available.</div>
                      <?php else: ?>
                        <div id="tree-container" style="width: 100%; height: 600px; border: 1px solid #ddd; border-radius: 4px; overflow: hidden; position: relative;">
                          <div id="tree-wrapper" style="width: 100%; height: 100%; position: relative; transform-origin: 0 0; cursor: grab;">
                            <?php renderTree($referralTree, true); ?>
                          </div>
                        </div>
                      <?php endif; ?>
                    </div>
                  </div>
                </div>
                
                <div class="col-12">
                  <div class="card">
                    <h5 class="card-header">Referral Summary</h5>
                    <div class="card-body">
                      <div class="table-responsive">
                        <table class="table table-bordered table-hover">
                          <thead>
                            <tr>
                              <th>User</th>
                              <th>Type</th>
                              <th>Code</th>
                              <th class="text-center">Direct Referrals</th>
                              <th class="text-center">Distributor Connections</th>
                              <th class="text-center">Total Network</th>
                            </tr>
                          </thead>
                          <tbody>
                            <?php if (empty($referralCounts)): ?>
                              <tr><td colspan="6" class="text-center">No referral data available</td></tr>
                            <?php else: ?>
                              <?php foreach ($referralCounts as $user): ?>
                              <tr>
                                <td>
                                  <div class="d-flex align-items-center">
                                    <i class="fas <?php echo $user['user_type'] === 'distributor' ? 'fa-user-tie text-primary' : 'fa-user text-success'; ?> me-2"></i>
                                    <div>
                                      <span class="fw-semibold"><?php echo htmlspecialchars($user['username']); ?></span>
                                      <div class="small text-muted"><?php echo htmlspecialchars($user['full_name']); ?></div>
                                    </div>
                                  </div>
                                </td>
                                <td>
                                  <span class="badge bg-<?php echo $user['user_type'] === 'distributor' ? 'primary' : 'success'; ?>">
                                    <?php echo ucfirst($user['user_type']); ?>
                                  </span>
                                </td>
                                <td>
                                  <?php if (!empty($user['distributor_code'])): ?>
                                    <span class="badge bg-secondary"><?php echo htmlspecialchars($user['distributor_code']); ?></span>
                                  <?php elseif (!empty($user['referral_code'])): ?>
                                    <span class="badge bg-light text-dark"><?php echo htmlspecialchars($user['referral_code']); ?></span>
                                  <?php else: ?>
                                    -
                                  <?php endif; ?>
                                </td>
                                <td class="text-center"><?php echo $user['direct_referrals']; ?></td>
                                <td class="text-center"><?php echo $user['distributor_connections']; ?></td>
                                <td class="text-center">
                                  <span class="fw-bold"><?php echo $user['total_referrals']; ?></span>
                                </td>
                              </tr>
                              <?php endforeach; ?>
                            <?php endif; ?>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <?php include('includes/footer.php'); ?>
            <div class="content-backdrop fade"></div>
          </div>
        </div>
      </div>

      <div class="layout-overlay layout-menu-toggle"></div>
      <div class="drag-target"></div>
    </div>

    <?php include('includes/script.php'); ?>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize draggable tree
        if (document.querySelector('.family-tree-container')) {
          initializeDraggableTree();
        }

        // Tree toggle functionality
        const toggles = document.querySelectorAll('.tree-toggle');
        const nodes = document.querySelectorAll('.tree-node[data-has-children="true"]');
        const expandAll = document.getElementById('expandAll');
        const collapseAll = document.getElementById('collapseAll');
        const centerTree = document.getElementById('centerTree');
        const zoomIn = document.getElementById('zoomIn');
        const zoomOut = document.getElementById('zoomOut');

        toggles.forEach(toggle => {
          toggle.addEventListener('click', function(e) {
            e.stopPropagation();
            const parentNode = this.closest('.tree-node');
            const sublist = parentNode.nextElementSibling;
            
            if (sublist && sublist.classList.contains('tree-sublist')) {
              sublist.classList.toggle('active');
              this.querySelector('i').classList.toggle('fa-chevron-down');
              this.querySelector('i').classList.toggle('fa-chevron-right');
            }
          });
        });

        nodes.forEach(node => {
          node.addEventListener('click', function(e) {
            if (!e.target.closest('.tree-toggle')) {
              const toggle = this.querySelector('.tree-toggle');
              toggle.click();
            }
          });
        });

        expandAll.addEventListener('click', function() {
          document.querySelectorAll('.tree-sublist').forEach(sublist => {
            sublist.classList.add('active');
          });
          document.querySelectorAll('.tree-toggle i').forEach(icon => {
            icon.classList.remove('fa-chevron-right');
            icon.classList.add('fa-chevron-down');
          });
        });

        collapseAll.addEventListener('click', function() {
          document.querySelectorAll('.tree-sublist').forEach(sublist => {
            sublist.classList.remove('active');
          });
          document.querySelectorAll('.tree-toggle i').forEach(icon => {
            icon.classList.remove('fa-chevron-down');
            icon.classList.add('fa-chevron-right');
          });
        });

        // Expand first level by default
        document.querySelectorAll('.family-tree > li > .tree-node').forEach(node => {
          const sublist = node.nextElementSibling;
          if (sublist && sublist.classList.contains('tree-sublist')) {
            sublist.classList.add('active');
            node.querySelector('.tree-toggle i').classList.remove('fa-chevron-right');
            node.querySelector('.tree-toggle i').classList.add('fa-chevron-down');
          }
        });
      });

      function initializeDraggableTree() {
        const container = document.getElementById('tree-container');
        const wrapper = document.getElementById('tree-wrapper');
        let scale = 1;
        let posX = 0;
        let posY = 0;
        let isDragging = false;
        let startX, startY;
        
        // Make the wrapper draggable
        wrapper.style.transform = `translate(${posX}px, ${posY}px) scale(${scale})`;
        wrapper.style.transformOrigin = '0 0';
        
        // Mouse down event
        wrapper.addEventListener('mousedown', (e) => {
          if (e.target.closest('.tree-node') || e.target.closest('.tree-toggle')) {
            return; // Don't drag if clicking on a node or toggle
          }
          isDragging = true;
          startX = e.clientX - posX;
          startY = e.clientY - posY;
          wrapper.style.cursor = 'grabbing';
          e.preventDefault();
        });
        
        // Mouse move event
        document.addEventListener('mousemove', (e) => {
          if (!isDragging) return;
          posX = e.clientX - startX;
          posY = e.clientY - startY;
          wrapper.style.transform = `translate(${posX}px, ${posY}px) scale(${scale})`;
        });
        
        // Mouse up event
        document.addEventListener('mouseup', () => {
          isDragging = false;
          wrapper.style.cursor = 'grab';
        });
        
        // Mouse leave container
        container.addEventListener('mouseleave', () => {
          isDragging = false;
          wrapper.style.cursor = 'grab';
        });
        
        // Zoom in
        document.getElementById('zoomIn').addEventListener('click', () => {
          scale += 0.1;
          wrapper.style.transform = `translate(${posX}px, ${posY}px) scale(${scale})`;
        });
        
        // Zoom out
        document.getElementById('zoomOut').addEventListener('click', () => {
          if (scale > 0.5) {
            scale -= 0.1;
            wrapper.style.transform = `translate(${posX}px, ${posY}px) scale(${scale})`;
          }
        });
        
        // Center tree
        document.getElementById('centerTree').addEventListener('click', () => {
          scale = 1;
          posX = 0;
          posY = 0;
          wrapper.style.transform = `translate(${posX}px, ${posY}px) scale(${scale})`;
        });
        
        // Touch events for mobile
        let touchStartX, touchStartY, touchStartPosX, touchStartPosY;
        
        wrapper.addEventListener('touchstart', (e) => {
          if (e.target.closest('.tree-node') || e.target.closest('.tree-toggle')) {
            return;
          }
          const touch = e.touches[0];
          touchStartX = touch.clientX;
          touchStartY = touch.clientY;
          touchStartPosX = posX;
          touchStartPosY = posY;
          e.preventDefault();
        }, { passive: false });
        
        wrapper.addEventListener('touchmove', (e) => {
          if (!touchStartX || !touchStartY) return;
          const touch = e.touches[0];
          posX = touchStartPosX + (touch.clientX - touchStartX);
          posY = touchStartPosY + (touch.clientY - touchStartY);
          wrapper.style.transform = `translate(${posX}px, ${posY}px) scale(${scale})`;
          e.preventDefault();
        }, { passive: false });
        
        wrapper.addEventListener('touchend', () => {
          touchStartX = null;
          touchStartY = null;
        });
      }
    </script>
    <style>
      .family-tree-container {
        overflow: auto;
        padding: 15px;
        margin-bottom: 15px;
        min-height: 300px;
        -webkit-overflow-scrolling: touch;
      }

      .family-tree {
        list-style: none;
        padding: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        min-width: fit-content;
        min-height: fit-content;
      }

      .family-tree-node {
        position: relative;
        margin: 5px 0;
        text-align: center;
        min-width: fit-content;
      }

      .tree-node {
        display: inline-flex;
        align-items: center;
        padding: 8px 12px;
        margin: 4px;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        max-width: 280px;
        text-align: left;
        font-size: 0.9rem;
        color: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        white-space: nowrap;
      }

      .tree-node:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
      }

      .tree-toggle {
        margin-right: 5px;
        width: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: transform 0.2s;
      }

      .tree-toggle i {
        font-size: 0.8rem;
        transition: transform 0.2s;
      }

      .tree-toggle.no-children {
        width: 20px;
        display: inline-block;
      }

      .tree-sublist {
        list-style: none;
        padding: 10px 0 0 0;
        margin: 5px 0;
        display: none;
        position: relative;
        width: 100%;
        transition: all 0.3s ease;
      }

      .tree-sublist.active {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 15px;
      }

      .tree-sublist:before {
        content: '';
        position: absolute;
        top: 0;
        left: 50%;
        width: 1px;
        height: 10px;
        background: #ccc;
      }

      .family-tree-node > .tree-node + .tree-sublist {
        position: relative;
      }

      .family-tree-node > .tree-node + .tree-sublist > .family-tree-node:before {
        content: '';
        position: absolute;
        top: -10px;
        left: 0;
        right: 0;
        height: 1px;
        background: #ccc;
      }

      .family-tree-node > .tree-node + .tree-sublist > .family-tree-node:after {
        content: '';
        position: absolute;
        top: -10px;
        left: 50%;
        width: 1px;
        height: 10px;
        background: #ccc;
      }

      .tree-node.distributor {
        background-color: #7367f0;
        border: 1px solid #7367f0;
      }

      .tree-node.retailer {
        background-color: #28c76f;
        border: 1px solid #28c76f;
      }

      .tree-node i.fas {
        font-size: 0.9rem;
      }

      .tree-node.distributor i.fas,
      .tree-node.retailer i.fas {
        color: #fff;
      }

      .legend-box {
        display: inline-block;
        width: 14px;
        height: 14px;
        border-radius: 3px;
      }

      .legend-box.distributor {
        background-color: #7367f0;
        border: 1px solid #7367f0;
      }

      .legend-box.retailer {
        background-color: #28c76f;
        border: 1px solid #28c76f;
      }

      .text-muted {
        opacity: 0.7;
      }

      #tree-container {
        background-color: #2F3349;
        touch-action: none;
      }

      #tree-wrapper {
        transition: transform 0.1s ease-out;
      }

      @media (max-width: 768px) {
        .tree-node {
          max-width: 220px;
          padding: 6px 10px;
          font-size: 0.85rem;
        }

        .tree-sublist {
          gap: 8px;
        }

        .family-tree-container {
          padding: 10px;
        }
        
        .col-md-6.text-md-end {
          margin-top: 10px;
        }
      }
    </style>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>