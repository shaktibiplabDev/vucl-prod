<?php
$code = base64_decode('<?php
require __DIR__ . '/security/auth.php';
require_once realpath(__DIR__ . '/../../config/database.php');

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Ban/Unban user
    if (isset($_POST['ban_action'])) {
        $userId = (int)$_POST['user_id'];
        $action = $_POST['ban_action']; // 'ban' or 'unban'
        
        $isBanned = $action === 'ban' ? '1' : '0';
        $stmt = $pdo->prepare("UPDATE users SET isbanned = ? WHERE id = ?");
        $stmt->execute([$isBanned, $userId]);
        
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    }
    
    // Delete user
    if (isset($_POST['delete_action'])) {
        $userId = (int)$_POST['user_id'];
        
        $stmt = $pdo->prepare("DELETE FROM users WHERE id = ? AND user_type = 'retailer'");
        $stmt->execute([$userId]);
        
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    }
    
    // Update wallet
    if (isset($_POST['wallet_action'])) {
        $userId = (int)$_POST['user_id'];
        $action = $_POST['wallet_action']; // 'add', 'deduct', or 'set'
        $walletType = $_POST['wallet_type']; // 'main', 'bonus', or 'both'
        $amount = (float)$_POST['amount'];
        
        // Get current balances
        $stmt = $pdo->prepare("SELECT wallet, bonus_wallet FROM users WHERE id = ?");
        $stmt->execute([$userId]);
        $current = $stmt->fetch(PDO::FETCH_ASSOC);
        
        // Calculate new balances
        $newWallet = $current['wallet'];
        $newBonusWallet = $current['bonus_wallet'];
        
        if ($walletType === 'main' || $walletType === 'both') {
            if ($action === 'add') {
                $newWallet += $amount;
            } elseif ($action === 'deduct') {
                $newWallet = max(0, $newWallet - $amount);
            } else { // set
                $newWallet = $amount;
            }
        }
        
        if ($walletType === 'bonus' || $walletType === 'both') {
            if ($action === 'add') {
                $newBonusWallet += $amount;
            } elseif ($action === 'deduct') {
                $newBonusWallet = max(0, $newBonusWallet - $amount);
            } else { // set
                $newBonusWallet = $amount;
            }
        }
        
        // Update database
        $stmt = $pdo->prepare("UPDATE users SET wallet = ?, bonus_wallet = ? WHERE id = ?");
        $stmt->execute([$newWallet, $newBonusWallet, $userId]);
        
        header("Location: ".$_SERVER['PHP_SELF']);
        exit();
    }
}

// Initialize filters
$statusFilter = $_GET['status'] ?? '';
$dateFrom = $_GET['date_from'] ?? '';
$dateTo = $_GET['date_to'] ?? '';
$searchTerm = $_GET['search'] ?? '';

// Build the base query
$query = "SELECT 
            id,
            username,
            email,
            full_name,
            wallet,
            bonus_wallet,
            currency,
            status,
            isbanned,
            distributor_id,
            referral_code,
            created_at,
            last_login
          FROM users
          WHERE user_type = 'retailer'";

// Add WHERE conditions based on filters
$conditions = [];
$params = [];

if (!empty($statusFilter)) {
  $conditions[] = "status = ?";
  $params[] = $statusFilter;
}

if (!empty($dateFrom)) {
  $conditions[] = "created_at >= ?";
  $params[] = $dateFrom . ' 00:00:00';
}

if (!empty($dateTo)) {
  $conditions[] = "created_at <= ?";
  $params[] = $dateTo . ' 23:59:59';
}

if (!empty($searchTerm)) {
  $conditions[] = "(username LIKE ? OR email LIKE ? OR full_name LIKE ?)";
  $params[] = '%' . $searchTerm . '%';
  $params[] = '%' . $searchTerm . '%';
  $params[] = '%' . $searchTerm . '%';
}

if (!empty($conditions)) {
  $query .= " AND " . implode(" AND ", $conditions);
}

$query .= " ORDER BY created_at ASC";

// Prepare and execute the query
$stmt = $pdo->prepare($query);
$stmt->execute($params);
$retailers = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Get distinct status values for filter dropdown
$statuses = $pdo->query("SELECT DISTINCT status FROM users")->fetchAll(PDO::FETCH_COLUMN);
?>

<!doctype html>
<html lang="en" class="layout-navbar-fixed layout-menu-fixed layout-compact" dir="ltr" data-skin="default" data-assets-path="../../assets/" data-template="vertical-menu-template" data-bs-theme="light">
  <?php include('includes/head.php'); ?>

  <body>
    <!-- Layout wrapper -->
    <div class="layout-wrapper layout-content-navbar">
      <div class="layout-container">
        <!-- Menu -->
        <?php include('includes/sidebar.php'); ?>

        <div class="menu-mobile-toggler d-xl-none rounded-1">
          <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large text-bg-secondary p-2 rounded-1">
            <i class="ti tabler-menu icon-base"></i>
            <i class="ti tabler-chevron-right icon-base"></i>
          </a>
        </div>
        <!-- / Menu -->

        <!-- Layout container -->
        <div class="layout-page">
          <!-- Navbar -->
          <?php include('includes/navbar.php'); ?>

          <!-- / Navbar -->

          <!-- Content wrapper -->
          <div class="content-wrapper">
            <!-- Content -->
            <div class="container-xxl flex-grow-1 container-p-y">
              <div class="card">
                <h5 class="card-header pb-0 text-md-start text-center">Retailers Management</h5>

                <!-- Filter Section -->
                <div class="card-body border-bottom">
                  <form method="GET" class="row g-3">
                    <div class="col-md-4">
                      <label class="form-label">Search</label>
                      <input type="text" name="search" class="form-control" placeholder="Search by name, username or email" value="<?= htmlspecialchars($searchTerm) ?>">
                    </div>

                    <div class="col-md-2">
                      <label class="form-label">Status</label>
                      <select name="status" class="form-select">
                        <option value="">All Statuses</option>
                        <?php foreach ($statuses as $status): ?>
                          <option value="<?= $status ?>" <?= $status === $statusFilter ? 'selected' : '' ?>>
                            <?= ucfirst($status) ?>
                          </option>
                        <?php endforeach; ?>
                      </select>
                    </div>

                    <div class="col-md-3">
                      <label class="form-label">Date From</label>
                      <input type="date" name="date_from" class="form-control" value="<?= htmlspecialchars($dateFrom) ?>">
                    </div>

                    <div class="col-md-3">
                      <label class="form-label">Date To</label>
                      <input type="date" name="date_to" class="form-control" value="<?= htmlspecialchars($dateTo) ?>">
                    </div>

                    <div class="col-md-1 d-flex align-items-end">
                      <button type="submit" class="btn btn-primary">
                        <i class="ti tabler-filter me-1"></i> Filter
                      </button>
                    </div>
                  </form>
                </div>

                <div class="card-datatable">
                  <table class="dt-responsive table table-bordered" id="retailersTable">
                    <thead>
                      <tr>
                        <th>SL No</th>
                        <th>Username</th>
                        <th>Full Name</th>
                        <th>Email</th>
                        <th>Wallet Balance</th>
                        <th>Status</th>
                        <th>Registered On</th>
                        <th>Last Login</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <?php foreach ($retailers as $index => $retailer): ?>
                        <tr>
                          <td><?= $index + 1 ?></td>
                          <td><?= htmlspecialchars($retailer['username']) ?></td>
                          <td><?= htmlspecialchars($retailer['full_name']) ?></td>
                          <td><?= htmlspecialchars($retailer['email']) ?></td>
                          <td>
                            <?= htmlspecialchars($retailer['currency']) ?>
                            <?= number_format($retailer['wallet'] + $retailer['bonus_wallet'], 2) ?>
                            <small class="text-muted">(Main: <?= number_format($retailer['wallet'], 2) ?>, Bonus: <?= number_format($retailer['bonus_wallet'], 2) ?>)</small>
                          </td>
                          <td>
                            <?php
                            $statusClass = '';
                            $statusText = '';
                            
                            if ($retailer['isbanned'] === '1') {
                              $statusClass = 'bg-label-danger';
                              $statusText = 'Banned';
                            } else {
                              switch (strtolower($retailer['status'])) {
                                case 'active':
                                  $statusClass = 'bg-label-success';
                                  $statusText = 'Active';
                                  break;
                                case 'inactive':
                                  $statusClass = 'bg-label-warning';
                                  $statusText = 'Inactive';
                                  break;
                                default:
                                  $statusClass = 'bg-label-secondary';
                                  $statusText = ucfirst($retailer['status']);
                              }
                            }
                            ?>
                            <span class="badge <?= $statusClass ?>">
                              <?= $statusText ?>
                            </span>
                          </td>
                          <td><?= date('d M Y', strtotime($retailer['created_at'])) ?></td>
                          <td>
                            <?= $retailer['last_login'] ? date('d M Y, h:i A', strtotime($retailer['last_login'])) : 'Never' ?>
                          </td>
                          <td>
                            <div class="d-flex gap-2">
                              <button class="btn btn-sm btn-outline-primary view-btn"
                                data-id="<?= htmlspecialchars($retailer['id']) ?>"
                                data-username="<?= htmlspecialchars($retailer['username']) ?>"
                                data-email="<?= htmlspecialchars($retailer['email']) ?>"
                                data-full-name="<?= htmlspecialchars($retailer['full_name']) ?>"
                                data-wallet="<?= htmlspecialchars($retailer['wallet']) ?>"
                                data-bonus-wallet="<?= htmlspecialchars($retailer['bonus_wallet']) ?>"
                                data-currency="<?= htmlspecialchars($retailer['currency']) ?>"
                                data-status="<?= htmlspecialchars($retailer['status']) ?>"
                                data-isbanned="<?= htmlspecialchars($retailer['isbanned']) ?>"
                                data-distributor-id="<?= htmlspecialchars($retailer['distributor_id']) ?>"
                                data-referral-code="<?= htmlspecialchars($retailer['referral_code']) ?>"
                                data-created-at="<?= date('d M Y, h:i A', strtotime($retailer['created_at'])) ?>"
                                data-last-login="<?= $retailer['last_login'] ? date('d M Y, h:i A', strtotime($retailer['last_login'])) : 'Never' ?>">
                                <i class="ti tabler-eye me-1"></i> View
                              </button>
                              
                              <?php if ($retailer['isbanned'] === '0'): ?>
                                <button class="btn btn-sm btn-outline-danger ban-btn" data-id="<?= htmlspecialchars($retailer['id']) ?>">
                                  <i class="ti tabler-user-off me-1"></i> Ban
                                </button>
                              <?php else: ?>
                                <button class="btn btn-sm btn-outline-success unban-btn" data-id="<?= htmlspecialchars($retailer['id']) ?>">
                                  <i class="ti tabler-user-check me-1"></i> Unban
                                </button>
                              <?php endif; ?>
                              
                              <button class="btn btn-sm btn-outline-secondary wallet-btn" data-id="<?= htmlspecialchars($retailer['id']) ?>">
                                <i class="ti tabler-wallet me-1"></i> Wallet
                              </button>
                              
                              <button class="btn btn-sm btn-outline-danger delete-btn" data-id="<?= htmlspecialchars($retailer['id']) ?>">
                                <i class="ti tabler-trash me-1"></i> Delete
                              </button>
                            </div>
                          </td>
                        </tr>
                      <?php endforeach; ?>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            <!-- / Content -->

            <!-- Footer -->
            <?php include('includes/footer.php'); ?>
            <!-- / Footer -->

            <div class="content-backdrop fade"></div>
          </div>
          <!-- Content wrapper -->
        </div>
        <!-- / Layout page -->
      </div>

      <!-- Overlay -->
      <div class="layout-overlay layout-menu-toggle"></div>

      <!-- Drag Target Area To SlideIn Menu On Small Screens -->
      <div class="drag-target"></div>
    </div>
    <!-- / Layout wrapper -->
    
    <!-- View Modal -->
    <div class="modal fade" id="viewModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Retailer Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="row mb-3">
              <div class="col-md-6">
                <p><strong>ID:</strong> <span id="modalId"></span></p>
                <p><strong>Username:</strong> <span id="modalUsername"></span></p>
                <p><strong>Full Name:</strong> <span id="modalFullName"></span></p>
                <p><strong>Email:</strong> <span id="modalEmail"></span></p>
                <p><strong>Referral Code:</strong> <span id="modalReferralCode"></span></p>
              </div>
              <div class="col-md-6">
                <p><strong>Wallet Balance:</strong> <span id="modalWallet"></span></p>
                <p><strong>Bonus Wallet:</strong> <span id="modalBonusWallet"></span></p>
                <p><strong>Status:</strong> <span id="modalStatus"></span></p>
                <p><strong>Registered On:</strong> <span id="modalCreatedAt"></span></p>
                <p><strong>Last Login:</strong> <span id="modalLastLogin"></span></p>
              </div>
            </div>
            
            <div class="row">
              <div class="col-md-6">
                <h6>Wallet Information</h6>
                <div class="border p-3 rounded">
                  <div class="mb-2">
                    <strong>Main Wallet:</strong> 
                    <span id="modalMainWalletAmount"></span>
                  </div>
                  <div class="mb-2">
                    <strong>Bonus Wallet:</strong> 
                    <span id="modalBonusWalletAmount"></span>
                  </div>
                  <div class="mb-2">
                    <strong>Total Balance:</strong> 
                    <span id="modalTotalBalance"></span>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <h6>Account Status</h6>
                <div class="border p-3 rounded">
                  <div class="mb-2">
                    <strong>Account Status:</strong> 
                    <span id="modalAccountStatus"></span>
                  </div>
                  <div class="mb-2">
                    <strong>Ban Status:</strong> 
                    <span id="modalBanStatus"></span>
                  </div>
                  <div class="mb-2">
                    <strong>Distributor ID:</strong> 
                    <span id="modalDistributorId"></span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Wallet Update Modal -->
    <div class="modal fade" id="walletModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Update Wallet Balance</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <form method="POST">
            <div class="modal-body">
              <input type="hidden" name="user_id" id="walletUserId">
              
              <div class="mb-3">
                <label class="form-label">Current Main Wallet Balance</label>
                <input type="text" class="form-control" id="currentWallet" readonly>
              </div>
              
              <div class="mb-3">
                <label class="form-label">Current Bonus Wallet Balance</label>
                <input type="text" class="form-control" id="currentBonusWallet" readonly>
              </div>
              
              <div class="mb-3">
                <label class="form-label">Action</label>
                <select class="form-select" name="wallet_action" required>
                  <option value="">Select Action</option>
                  <option value="add">Add Funds</option>
                  <option value="deduct">Deduct Funds</option>
                  <option value="set">Set Exact Amount</option>
                </select>
              </div>
              
              <div class="mb-3">
                <label class="form-label">Wallet Type</label>
                <select class="form-select" name="wallet_type" required>
                  <option value="">Select Wallet</option>
                  <option value="main">Main Wallet</option>
                  <option value="bonus">Bonus Wallet</option>
                  <option value="both">Both Wallets</option>
                </select>
              </div>
              
              <div class="mb-3">
                <label class="form-label">Amount</label>
                <input type="number" class="form-control" name="amount" step="0.01" min="0" required>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-primary">Update Wallet</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Ban Confirmation Modal -->
    <div class="modal fade" id="banModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Confirm Ban Action</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <form method="POST">
            <div class="modal-body">
              <input type="hidden" name="user_id" id="banUserId">
              <input type="hidden" name="ban_action" id="banAction">
              
              <p id="banConfirmationText">Are you sure you want to ban this user?</p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-danger">Confirm</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Confirm Deletion</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <form method="POST">
            <div class="modal-body">
              <input type="hidden" name="user_id" id="deleteUserId">
              <input type="hidden" name="delete_action" value="delete">
              
              <p>Are you sure you want to delete this retailer? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-label-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-danger">Delete Permanently</button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <?php include('includes/script.php'); ?>
    <script>
      const dt_responsive_table = document.querySelector('.dt-responsive');
      if (dt_responsive_table) {
        let dt_responsive = new DataTable(dt_responsive_table, {
          responsive: true,
          layout: {
            topStart: {
              rowClass: 'row mx-3 my-0 justify-content-between',
              features: [{
                pageLength: {
                  menu: [10, 25, 50, 100],
                  text: 'Show _MENU_ entries'
                }
              }]
            },
            topEnd: {
              search: {
                placeholder: 'Search records...'
              }
            },
            bottomStart: {
              rowClass: 'row mx-3 justify-content-between',
              features: ['info']
            },
            bottomEnd: 'paging'
          },
          language: {
            paginate: {
              next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
              previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
              first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
              last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
            },
            search: '',
            searchPlaceholder: 'Search records...',
            lengthMenu: 'Show _MENU_ entries'
          },
          dom: '<"top"lf>rt<"bottom"ip>',
          columnDefs: [{
              responsivePriority: 1,
              targets: 1
            }, // Username
            {
              responsivePriority: 2,
              targets: 2
            }, // Full Name
            {
              responsivePriority: 3,
              targets: -1
            } // Actions
          ]
        });
      }

      // View button click handler
      document.querySelectorAll('.view-btn').forEach(button => {
        button.addEventListener('click', function() {
          const modal = new bootstrap.Modal(document.getElementById('viewModal'));
          
          // Set modal content
          document.getElementById('modalId').textContent = this.dataset.id;
          document.getElementById('modalUsername').textContent = this.dataset.username;
          document.getElementById('modalFullName').textContent = this.dataset.fullName;
          document.getElementById('modalEmail').textContent = this.dataset.email;
          document.getElementById('modalReferralCode').textContent = this.dataset.referralCode || 'N/A';
          document.getElementById('modalCreatedAt').textContent = this.dataset.createdAt;
          document.getElementById('modalLastLogin').textContent = this.dataset.lastLogin;
          document.getElementById('modalDistributorId').textContent = this.dataset.distributorId || 'N/A';
          
          // Format wallet amounts
          const currency = this.dataset.currency;
          const walletAmount = parseFloat(this.dataset.wallet).toFixed(2);
          const bonusWalletAmount = parseFloat(this.dataset.bonusWallet).toFixed(2);
          const totalAmount = (parseFloat(this.dataset.wallet) + parseFloat(this.dataset.bonusWallet)).toFixed(2);
          
          document.getElementById('modalWallet').textContent = `${currency} ${walletAmount}`;
          document.getElementById('modalBonusWallet').textContent = `${currency} ${bonusWalletAmount}`;
          document.getElementById('modalMainWalletAmount').textContent = `${currency} ${walletAmount}`;
          document.getElementById('modalBonusWalletAmount').textContent = `${currency} ${bonusWalletAmount}`;
          document.getElementById('modalTotalBalance').textContent = `${currency} ${totalAmount}`;
          
          // Set status with badge
          const statusSpan = document.getElementById('modalStatus');
          const accountStatusSpan = document.getElementById('modalAccountStatus');
          const banStatusSpan = document.getElementById('modalBanStatus');
          
          statusSpan.innerHTML = '';
          accountStatusSpan.innerHTML = '';
          banStatusSpan.innerHTML = '';
          
          // Account status badge
          const accountBadge = document.createElement('span');
          accountBadge.className = `badge ${this.dataset.status === 'active' ? 'bg-label-success' : 'bg-label-warning'}`;
          accountBadge.textContent = this.dataset.status.charAt(0).toUpperCase() + this.dataset.status.slice(1);
          accountStatusSpan.appendChild(accountBadge);
          
          // Ban status badge
          const banBadge = document.createElement('span');
          banBadge.className = `badge ${this.dataset.isbanned === '1' ? 'bg-label-danger' : 'bg-label-success'}`;
          banBadge.textContent = this.dataset.isbanned === '1' ? 'Banned' : 'Not Banned';
          banStatusSpan.appendChild(banBadge);
          
          // Combined status
          const combinedBadge = document.createElement('span');
          if (this.dataset.isbanned === '1') {
            combinedBadge.className = 'badge bg-label-danger';
            combinedBadge.textContent = 'Banned';
          } else {
            combinedBadge.className = `badge ${this.dataset.status === 'active' ? 'bg-label-success' : 'bg-label-warning'}`;
            combinedBadge.textContent = this.dataset.status.charAt(0).toUpperCase() + this.dataset.status.slice(1);
          }
          statusSpan.appendChild(combinedBadge);
          
          modal.show();
        });
      });
      
      // Wallet button click handler
      document.querySelectorAll('.wallet-btn').forEach(button => {
        button.addEventListener('click', function() {
          const modal = new bootstrap.Modal(document.getElementById('walletModal'));
          const userId = this.dataset.id;
          
          // Find the retailer data from the table row
          const row = this.closest('tr');
          const wallet = row.cells[4].textContent.trim();
          
          // Extract wallet amounts (this is a simplified approach - you might need to adjust based on your actual HTML)
          const walletParts = wallet.match(/(\d+\.\d+)/g);
          const mainWallet = walletParts ? walletParts[0] : '0.00';
          const bonusWallet = walletParts && walletParts.length > 1 ? walletParts[1] : '0.00';
          
          // Set modal values
          document.getElementById('walletUserId').value = userId;
          document.getElementById('currentWallet').value = mainWallet;
          document.getElementById('currentBonusWallet').value = bonusWallet;
          
          modal.show();
        });
      });
      
      // Ban button click handler
      document.querySelectorAll('.ban-btn').forEach(button => {
        button.addEventListener('click', function() {
          const modal = new bootstrap.Modal(document.getElementById('banModal'));
          const userId = this.dataset.id;
          
          document.getElementById('banUserId').value = userId;
          document.getElementById('banAction').value = 'ban';
          document.getElementById('banConfirmationText').textContent = 'Are you sure you want to ban this retailer?';
          
          modal.show();
        });
      });
      
      // Unban button click handler
      document.querySelectorAll('.unban-btn').forEach(button => {
        button.addEventListener('click', function() {
          const modal = new bootstrap.Modal(document.getElementById('banModal'));
          const userId = this.dataset.id;
          
          document.getElementById('banUserId').value = userId;
          document.getElementById('banAction').value = 'unban';
          document.getElementById('banConfirmationText').textContent = 'Are you sure you want to unban this retailer?';
          
          modal.show();
        });
      });
      
      // Delete button click handler
      document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', function() {
          const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
          const userId = this.dataset.id;
          
          document.getElementById('deleteUserId').value = userId;
          
          modal.show();
        });
      });
    </script>
    <style>
      .badge.bg-label-success {
        background-color: rgba(40, 199, 111, 0.12) !important;
        color: #28c76f !important;
      }
      .badge.bg-label-warning {
        background-color: rgba(255, 159, 67, 0.12) !important;
        color: #ff9f43 !important;
      }
      .badge.bg-label-danger {
        background-color: rgba(234, 84, 85, 0.12) !important;
        color: #ea5455 !important;
      }
      .badge.bg-label-secondary {
        background-color: rgba(130, 134, 139, 0.12) !important;
        color: #82868b !important;
      }
      
      .action-buttons .btn {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
      }
      
      .dt-responsive .dropdown-menu {
        min-width: 8rem;
      }
      
      .dt-responsive .dropdown-item {
        padding: 0.375rem 1rem;
        font-size: 0.875rem;
      }
    </style>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>