<?php
$code = base64_decode('<?php
session_start();
require_once __DIR__ . '/config/database.php';
require_once __DIR__ . '/includes/email.php';

// Initialize variables
$email = $password = $confirm_password = $otp_code = "";
$error = $success = "";
$step = isset($_SESSION['reset_step']) ? $_SESSION['reset_step'] : 1;

// Function to generate OTP
function generateOTP($length = 6) {
    $digits = '0123456789';
    $otp = '';
    for ($i = 0; $i < $length; $i++) {
        $otp .= $digits[rand(0, strlen($digits) - 1)];
    }
    return $otp;
}

// Process form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['request_reset'])) {
        // Step 1: Request password reset
        $email = trim($_POST["email"]);
        
        if (empty($email)) {
            $error = "Please enter your email address.";
        } else {
            // Check if email exists in database
            $stmt = $pdo->prepare("SELECT id, email, full_name FROM users WHERE email = ? AND user_type = 'retailer'");
            $stmt->execute([$email]);
            
            if ($stmt->rowCount() == 1) {
                $user = $stmt->fetch(PDO::FETCH_ASSOC);
                
                // Generate OTP
                $otp = generateOTP();
                $otp_expiry = time() + 300; // 5 minutes expiry
                
                // Store in session
                $_SESSION['reset_user_id'] = $user['id'];
                $_SESSION['reset_email'] = $user['email'];
                $_SESSION['reset_otp'] = $otp;
                $_SESSION['reset_otp_expiry'] = $otp_expiry;
                $_SESSION['reset_step'] = 2;
                
                // Send OTP via email
                $subject = "Your Password Reset Verification Code";
                $message = "Hello " . htmlspecialchars($user['full_name']) . ",\n\n";
                $message .= "Your password reset verification code is: $otp\n\n";
                $message .= "This code will expire in 5 minutes.\n\n";
                $message .= "If you didn't request this password reset, please ignore this email.\n";
                sendEmail($user['email'], $subject, $message);
                
                $success = "We've sent a verification code to your email address.";
            } else {
                $error = "No retailer account found with that email address.";
            }
        }
    } 
    elseif (isset($_POST['verify_otp'])) {
        // Step 2: Verify OTP
        $otp_code = trim($_POST["otp_code"]);
        
        if (empty($otp_code)) {
            $error = "Please enter the verification code.";
        } else {
            // Verify OTP from session
            if (isset($_SESSION['reset_otp']) && $_SESSION['reset_otp'] == $otp_code && 
                isset($_SESSION['reset_otp_expiry']) && time() < $_SESSION['reset_otp_expiry']) {
                
                // OTP verified, proceed to password reset
                $_SESSION['reset_step'] = 3;
                $success = "Verification successful. Please set your new password.";
            } else {
                $error = "Invalid or expired verification code. Please try again.";
            }
        }
    }
    elseif (isset($_POST['reset_password'])) {
        // Step 3: Reset password
        $password = trim($_POST["password"]);
        $confirm_password = trim($_POST["confirm_password"]);
        
        if (empty($password)) {
            $error = "Please enter a new password.";
        } elseif (strlen($password) < 8) {
            $error = "Password must be at least 8 characters long.";
        } elseif ($password !== $confirm_password) {
            $error = "Passwords do not match.";
        } else {
            // Update password in database
            $hashed_password = password_hash($password, PASSWORD_DEFAULT);
            $stmt = $pdo->prepare("UPDATE users SET password = ? WHERE id = ?");
            $stmt->execute([$hashed_password, $_SESSION['reset_user_id']]);
            
            // Send confirmation email
            $subject = "Your Password Has Been Reset";
            $message = "Your password has been successfully reset.\n\n";
            $message .= "If you didn't request this change, please contact support immediately.\n";
            sendEmail($_SESSION['reset_email'], $subject, $message);
            
            // Clear reset session
            unset($_SESSION['reset_user_id']);
            unset($_SESSION['reset_email']);
            unset($_SESSION['reset_otp']);
            unset($_SESSION['reset_otp_expiry']);
            unset($_SESSION['reset_step']);
            
            // Set success message and redirect
            $_SESSION['password_reset_success'] = "Your password has been reset successfully. You can now login with your new password.";
            header("Location: login.php");
            exit();
        }
    }
}

// Resend OTP
if (isset($_GET['resend']) && $_GET['resend'] == '1' && isset($_SESSION['reset_user_id'])) {
    // Generate new OTP
    $otp = generateOTP();
    $otp_expiry = time() + 300; // 5 minutes expiry
    
    // Update session
    $_SESSION['reset_otp'] = $otp;
    $_SESSION['reset_otp_expiry'] = $otp_expiry;
    
    // Get user data
    $stmt = $pdo->prepare("SELECT email, full_name FROM users WHERE id = ?");
    $stmt->execute([$_SESSION['reset_user_id']]);
    $user = $stmt->fetch();
    
    // Send new OTP via email
    $subject = "Your New Verification Code";
    $message = "Hello " . htmlspecialchars($user['full_name']) . ",\n\n";
    $message .= "Your new verification code is: $otp\n\n";
    $message .= "This code will expire in 5 minutes.\n";
    sendEmail($user['email'], $subject, $message);
    
    $success = "We've sent a new verification code to your email address.";
}
?>
<!doctype html>
<html lang="en" class="layout-wide customizer-hide" dir="ltr" data-skin="default" data-assets-path="assets/" data-template="vertical-menu-template" data-bs-theme="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />
    <title>Forgot Password | Retailer Portal</title>
    <meta name="description" content="" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="assets/img/favicon/favicon.ico" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&ampdisplay=swap" rel="stylesheet" />
    
    <!-- Icons -->
    <link rel="stylesheet" href="assets/vendor/fonts/iconify-icons.css" />
    
    <!-- Core CSS -->
    <link rel="stylesheet" href="assets/vendor/libs/node-waves/node-waves.css" />
    <link rel="stylesheet" href="assets/vendor/libs/pickr/pickr-themes.css" />
    <link rel="stylesheet" href="assets/vendor/css/core.css" />
    <link rel="stylesheet" href="assets/css/demo.css" />
    
    <!-- Vendor CSS -->
    <link rel="stylesheet" href="assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.css" />
    <link rel="stylesheet" href="assets/vendor/libs/sweetalert2/sweetalert2.css" />
    <link rel="stylesheet" href="assets/vendor/libs/@form-validation/form-validation.css" />
    
    <!-- Page CSS -->
    <link rel="stylesheet" href="assets/vendor/css/pages/page-auth.css" />
    
    <!-- Helpers -->
    <script src="assets/vendor/js/helpers.js"></script>
    <script src="assets/vendor/js/template-customizer.js"></script>
    <script src="assets/js/config.js"></script>
    
    <style>
        .login-container { max-width: 450px; margin: 0 auto; }
        .otp-input {
            letter-spacing: 2rem;
            font-size: 2rem;
            text-align: center;
            padding-left: 1.5rem;
        }
        .btn-resend {
            color: #696cff;
            background: none;
            border: none;
            cursor: pointer;
        }
        .btn-resend:hover {
            text-decoration: underline;
        }
        .login-notice {
            text-align: center;
            margin-top: 1rem;
            font-size: 0.875rem;
            color: #6c757d;
        }
        .progress-steps {
            display: flex;
            justify-content: space-between;
            margin-bottom: 2rem;
            position: relative;
        }
        .progress-steps:before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 2px;
            background: #e9ecef;
            z-index: 1;
            transform: translateY(-50%);
        }
        .step {
            position: relative;
            z-index: 2;
            text-align: center;
            width: 30%;
        }
        .step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #e9ecef;
            color: #6c757d;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 0.5rem;
            font-weight: bold;
        }
        .step.active .step-number {
            background: #696cff;
            color: white;
        }
        .step.completed .step-number {
            background: #71dd37;
            color: white;
        }
        .step-label {
            font-size: 0.875rem;
            color: #6c757d;
        }
        .step.active .step-label,
        .step.completed .step-label {
            color: #696cff;
            font-weight: 500;
        }
    </style>
</head>

<body>
    <div class="container-xxl">
        <div class="authentication-wrapper authentication-basic container-p-y">
            <div class="authentication-inner py-6 login-container">
                <div class="card">
                    <div class="card-body">
                        <!-- Logo -->
                        <div class="app-brand justify-content-center mb-6">
                            <a href="index.html" class="app-brand-link">
                                <span class="app-brand-logo demo">
                                    <span class="text-primary">
                                        <svg width="32" height="22" viewBox="0 0 32 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M0.00172773 0V6.85398C0.00172773 6.85398 -0.133178 9.01207 1.98092 10.8388L13.6912 21.9964L19.7809 21.9181L18.8042 9.88248L16.4951 7.17289L9.23799 0H0.00172773Z" fill="currentColor" />
                                            <path opacity="0.06" fill-rule="evenodd" clip-rule="evenodd" d="M7.69824 16.4364L12.5199 3.23696L16.5541 7.25596L7.69824 16.4364Z" fill="#161616" />
                                            <path opacity="0.06" fill-rule="evenodd" clip-rule="evenodd" d="M8.07751 15.9175L13.9419 4.63989L16.5849 7.28475L8.07751 15.9175Z" fill="#161616" />
                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M7.77295 16.3566L23.6563 0H32V6.88383C32 6.88383 31.8262 9.17836 30.6591 10.4057L19.7824 22H13.6938L7.77295 16.3566Z" fill="currentColor" />
                                        </svg>
                                    </span>
                                </span>
                                <span class="app-brand-text demo text-heading fw-bold">Retailer Portal</span>
                            </a>
                        </div>
                        <!-- /Logo -->
                        
                        <h4 class="mb-1">Forgot Password?</h4>
                        <p class="mb-6">Follow these steps to reset your password</p>

                        <!-- Progress Steps -->
                        <div class="progress-steps">
                            <div class="step <?php echo $step >= 1 ? ($step > 1 ? 'completed' : 'active') : ''; ?>">
                                <div class="step-number">1</div>
                                <div class="step-label">Verify Email</div>
                            </div>
                            <div class="step <?php echo $step >= 2 ? ($step > 2 ? 'completed' : 'active') : ''; ?>">
                                <div class="step-number">2</div>
                                <div class="step-label">Enter OTP</div>
                            </div>
                            <div class="step <?php echo $step >= 3 ? 'active' : ''; ?>">
                                <div class="step-number">3</div>
                                <div class="step-label">New Password</div>
                            </div>
                        </div>

                        <?php if (!empty($error)): ?>
                            <div class="alert alert-danger mb-4"><?php echo $error; ?></div>
                        <?php endif; ?>
                        
                        <?php if (!empty($success)): ?>
                            <div class="alert alert-success mb-4"><?php echo $success; ?></div>
                        <?php endif; ?>

                        <!-- Step 1: Request Password Reset -->
                        <?php if ($step == 1): ?>
                            <form id="requestResetForm" method="POST">
                                <div class="mb-4">
                                    <label for="email" class="form-label">Email Address</label>
                                    <input
                                        type="email"
                                        class="form-control"
                                        id="email"
                                        name="email"
                                        placeholder="Enter your registered email"
                                        value="<?php echo htmlspecialchars($email); ?>"
                                        required
                                        autofocus />
                                </div>
                                
                                <div class="mb-4">
                                    <button class="btn btn-primary d-grid w-100" type="submit" name="request_reset">
                                        Send Verification Code
                                    </button>
                                </div>
                            </form>
                            
                            <p class="login-notice">
                                Remember your password? <a href="login.php">Login here</a>
                            </p>
                        <?php endif; ?>
                        
                        <!-- Step 2: Verify OTP -->
                        <?php if ($step == 2): ?>
                            <form id="verifyOtpForm" method="POST">
                                <div class="mb-4 text-center">
                                    <i class="icon-base ti tabler-mail-check icon-40px text-primary mb-3"></i>
                                    <h4>Enter Verification Code</h4>
                                    <p>We've sent a 6-digit code to <?php echo htmlspecialchars($_SESSION['reset_email']); ?></p>
                                </div>
                                
                                <div class="mb-4">
                                    <input 
                                        type="text" 
                                        name="otp_code" 
                                        id="otpCode" 
                                        class="form-control otp-input" 
                                        maxlength="6" 
                                        placeholder="000000" 
                                        required 
                                        autofocus>
                                </div>
                                
                                <div class="mb-4">
                                    <button class="btn btn-primary d-grid w-100" type="submit" name="verify_otp">
                                        Verify Code
                                    </button>
                                </div>
                                
                                <div class="text-center">
                                    <button type="button" class="btn-resend" onclick="window.location.href='?resend=1'">
                                        Resend Code
                                    </button>
                                </div>
                            </form>
                        <?php endif; ?>
                        
                        <!-- Step 3: Reset Password -->
                        <?php if ($step == 3): ?>
                            <form id="resetPasswordForm" method="POST">
                                <div class="mb-4">
                                    <label for="password" class="form-label">New Password</label>
                                    <div class="input-group input-group-merge">
                                        <input
                                            type="password"
                                            id="password"
                                            class="form-control"
                                            name="password"
                                            placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;"
                                            required
                                            minlength="8"
                                            autocomplete="new-password" />
                                        <span class="input-group-text cursor-pointer"><i class="icon-base ti tabler-eye-off"></i></span>
                                    </div>
                                    <div class="form-text">Must be at least 8 characters</div>
                                </div>
                                
                                <div class="mb-4">
                                    <label for="confirm_password" class="form-label">Confirm New Password</label>
                                    <div class="input-group input-group-merge">
                                        <input
                                            type="password"
                                            id="confirm_password"
                                            class="form-control"
                                            name="confirm_password"
                                            placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;"
                                            required
                                            minlength="8"
                                            autocomplete="new-password" />
                                        <span class="input-group-text cursor-pointer"><i class="icon-base ti tabler-eye-off"></i></span>
                                    </div>
                                </div>
                                
                                <div class="mb-4">
                                    <button class="btn btn-primary d-grid w-100" type="submit" name="reset_password">
                                        Reset Password
                                    </button>
                                </div>
                            </form>
                        <?php endif; ?>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Core JS -->
    <script src="assets/vendor/libs/jquery/jquery.js"></script>
    <script src="assets/vendor/libs/popper/popper.js"></script>
    <script src="assets/vendor/js/bootstrap.js"></script>
    <script src="assets/vendor/libs/node-waves/node-waves.js"></script>
    <script src="assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.js"></script>
    <script src="assets/vendor/js/menu.js"></script>
    
    <!-- Vendor JS -->
    <script src="assets/vendor/libs/sweetalert2/sweetalert2.js"></script>
    
    <!-- Main JS -->
    <script src="assets/js/main.js"></script>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Show SweetAlerts for errors
        <?php if (!empty($error)): ?>
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: '<?php echo addslashes($error); ?>',
                confirmButtonColor: '#696cff',
            });
        <?php endif; ?>
        
        // Show SweetAlerts for success
        <?php if (!empty($success)): ?>
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: '<?php echo addslashes($success); ?>',
                confirmButtonColor: '#696cff',
            });
        <?php endif; ?>
        
        // Password toggle functionality
        document.querySelectorAll('.input-group-text i').forEach(function(icon) {
            icon.addEventListener('click', function() {
                const input = this.closest('.input-group').querySelector('input');
                const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                input.setAttribute('type', type);
                
                // Toggle icon class
                this.classList.toggle('tabler-eye-off');
                this.classList.toggle('tabler-eye');
            });
        });
        
        // OTP input formatting
        const otpInput = document.getElementById('otpCode');
        if (otpInput) {
            otpInput.addEventListener('input', function(e) {
                this.value = this.value.replace(/[^0-9]/g, '');
                if (this.value.length > 6) {
                    this.value = this.value.slice(0, 6);
                }
            });
        }
        
        // Password match validation
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('confirm_password');
        const resetForm = document.getElementById('resetPasswordForm');
        
        if (resetForm && passwordInput && confirmPasswordInput) {
            resetForm.addEventListener('submit', function(e) {
                if (passwordInput.value !== confirmPasswordInput.value) {
                    e.preventDefault();
                    Swal.fire({
                        icon: 'error',
                        title: 'Passwords Mismatch',
                        text: 'The passwords you entered do not match. Please try again.',
                        confirmButtonColor: '#696cff',
                    });
                    confirmPasswordInput.focus();
                }
            });
        }
        
        // Form validation
        const forms = ['requestResetForm', 'verifyOtpForm', 'resetPasswordForm'];
        forms.forEach(formId => {
            const form = document.getElementById(formId);
            if (form) {
                form.addEventListener('submit', function() {
                    const submitBtn = form.querySelector('button[type="submit"]');
                    if (submitBtn) {
                        submitBtn.disabled = true;
                        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status"></span> Processing...';
                    }
                });
            }
        });
    });
    </script>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>