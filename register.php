<?php
$code = base64_decode('<?php

require_once __DIR__ . '/config/database.php';

$error = '';
$success = '';
$preset_distributor_code = '';
$preset_referral_code = '';

// Handle referral link codes (?ref=FRIENDCODE automatically gets distributor from friend)
if (isset($_GET['ref'])) {
    $friend_code = trim($_GET['ref']);
    
    // Get friend's details and their distributor
    $stmt = $pdo->prepare("SELECT u.referral_code, u.distributor_code 
                          FROM users u 
                          WHERE u.referral_code = ? AND u.user_type = 'retailer'");
    $stmt->execute([$friend_code]);
    
    if ($stmt->rowCount() > 0) {
        $friend = $stmt->fetch();
        $preset_referral_code = $friend['referral_code'];
        $preset_distributor_code = $friend['distributor_code'];
    }
} 
// Direct distributor link
elseif (isset($_GET['distributor'])) {
    $preset_distributor_code = trim($_GET['distributor']);
}

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = trim($_POST['username'] ?? '');
    $email = trim($_POST['email'] ?? '');
    $password = $_POST['password'] ?? '';
    $terms = isset($_POST['terms']) ? true : false;
    $distributor_code = trim($_POST['distributor_code'] ?? $preset_distributor_code);
    $referral_code = trim($_POST['referral_code'] ?? $preset_referral_code);

    // Validate inputs
    $validation_errors = [];
    
    if (empty($username)) $validation_errors[] = "Username is required";
    if (empty($email)) $validation_errors[] = "Email is required";
    if (empty($password)) $validation_errors[] = "Password is required";
    if (empty($distributor_code)) $validation_errors[] = "Distributor code is required";
    if (!$terms) $validation_errors[] = "You must agree to the terms";
    
    if (!empty($validation_errors)) {
        $error = implode("<br>", $validation_errors);
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $error = "Invalid email format";
    } elseif (strlen($password) < 8) {
        $error = "Password must be at least 8 characters";
    } elseif (!preg_match('/[A-Z]/', $password) || !preg_match('/[a-z]/', $password) || !preg_match('/[0-9]/', $password)) {
        $error = "Password must contain uppercase, lowercase letters and numbers";
    } else {
        try {
            $pdo->beginTransaction();

            // Check if username or email exists
            $stmt = $pdo->prepare("SELECT id FROM users WHERE username = ? OR email = ?");
            $stmt->execute([$username, $email]);
            
            if ($stmt->rowCount() > 0) {
                throw new Exception("Username or email already exists");
            }

            // Validate distributor code (must be from a distributor)
            $stmt = $pdo->prepare("SELECT id FROM users WHERE distributor_code = ? AND user_type = 'distributor'");
            $stmt->execute([$distributor_code]);
            
            if ($stmt->rowCount() === 0) {
                throw new Exception("Invalid distributor code");
            }
            $distributor_id = $stmt->fetchColumn();

            // Validate referral code if provided (must be from a retailer)
            $referred_by = null;
            if (!empty($referral_code)) {
                $stmt = $pdo->prepare("SELECT id FROM users WHERE referral_code = ? AND user_type = 'retailer'");
                $stmt->execute([$referral_code]);
                
                if ($stmt->rowCount() === 0) {
                    throw new Exception("Invalid referral code");
                }
                $referred_by = $stmt->fetchColumn();
            }

            // Hash password
            $hashed_password = password_hash($password, PASSWORD_DEFAULT);
            
            // Generate retailer's own referral code
            $retailer_referral_code = 'RTL-' . strtoupper(substr(md5(uniqid($username, true)), 0, 6));
            
            // Insert new retailer
            $stmt = $pdo->prepare("INSERT INTO users (
                username, email, password, full_name, user_type, status,
                referral_code, distributor_id, distributor_code, referred_by,
                created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())");
            
            $stmt->execute([
                $username,
                $email,
                $hashed_password,
                $username, // Using username as full_name initially
                'retailer',
                'active',
                $retailer_referral_code,
                $distributor_id,
                $distributor_code,
                $referred_by
            ]);

            $pdo->commit();
            
            $success = "Registration successful! Redirecting to login...";
            header("Refresh: 3; url=login.php");
            
        } catch (Exception $e) {
            $pdo->rollBack();
            $error = $e->getMessage();
        }
    }
}
?>
<!doctype html>
<html lang="en" class="layout-wide customizer-hide" dir="ltr" data-skin="default" data-assets-path="assets/" data-template="vertical-menu-template" data-bs-theme="light">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />

    <title>Register Page | Work Portal</title>

    <meta name="description" content="" />

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="assets/img/favicon/favicon.ico" />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&ampdisplay=swap" rel="stylesheet" />

    <link rel="stylesheet" href="assets/vendor/fonts/iconify-icons.css" />

    <!-- Core CSS -->
    <link rel="stylesheet" href="assets/vendor/libs/node-waves/node-waves.css" />
    <link rel="stylesheet" href="assets/vendor/libs/pickr/pickr-themes.css" />
    <link rel="stylesheet" href="assets/vendor/css/core.css" />
    <link rel="stylesheet" href="assets/css/demo.css" />

    <!-- Vendors CSS -->
    <link rel="stylesheet" href="assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.css" />

    <!-- Vendor -->
    <link rel="stylesheet" href="assets/vendor/libs/@form-validation/form-validation.css" />

    <!-- Page CSS -->
    <link rel="stylesheet" href="assets/vendor/css/pages/page-auth.css" />

    <!-- Helpers -->
    <script src="assets/vendor/js/helpers.js"></script>
    <script src="assets/vendor/js/template-customizer.js"></script>
    <script src="assets/js/config.js"></script>
    
    <style>
      .referral-info {
        background-color: #f8f9fa;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 16px;
      }
      .referral-info strong {
        color: #685DD8;
      }
    </style>
  </head>

  <body>
    <!-- Content -->
    <div class="container-xxl">
      <div class="authentication-wrapper authentication-basic container-p-y">
        <div class="authentication-inner py-6">
          <!-- Register Card -->
          <div class="card">
            <div class="card-body">
              <!-- Logo -->
              <div class="app-brand justify-content-center mb-6">
                <a href="index.html" class="app-brand-link">
                  <span class="app-brand-logo demo">
                    <span class="text-primary">
                      <svg width="32" height="22" viewBox="0 0 32 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M0.00172773 0V6.85398C0.00172773 6.85398 -0.133178 9.01207 1.98092 10.8388L13.6912 21.9964L19.7809 21.9181L18.8042 9.88248L16.4951 7.17289L9.23799 0H0.00172773Z" fill="currentColor" />
                        <path opacity="0.06" fill-rule="evenodd" clip-rule="evenodd" d="M7.69824 16.4364L12.5199 3.23696L16.5541 7.25596L7.69824 16.4364Z" fill="#161616" />
                        <path opacity="0.06" fill-rule="evenodd" clip-rule="evenodd" d="M8.07751 15.9175L13.9419 4.63989L16.5849 7.28475L8.07751 15.9175Z" fill="#161616" />
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M7.77295 16.3566L23.6563 0H32V6.88383C32 6.88383 31.8262 9.17836 30.6591 10.4057L19.7824 22H13.6938L7.77295 16.3566Z" fill="currentColor" />
                      </svg>
                    </span>
                  </span>
                  <span class="app-brand-text demo text-heading fw-bold">Work Portal</span>
                </a>
              </div>
              <!-- /Logo -->
              
              <?php if ($error): ?>
                <div class="alert alert-danger"><?= htmlspecialchars($error) ?></div>
              <?php endif; ?>
              
              <?php if ($success): ?>
                <div class="alert alert-success"><?= htmlspecialchars($success) ?></div>
              <?php endif; ?>
              
              <h4 class="mb-1">Adventure starts here 🚀</h4>
              <p class="mb-6">Make your app management easy and fun!</p>

              <?php if (!empty($preset_distributor_code)): ?>
              <div class="referral-info">
                You're registering with distributor: <strong><?= htmlspecialchars($preset_distributor_code) ?></strong>
                <?php if (!empty($preset_referral_code)): ?>
                  <br>Referred by friend: <strong><?= htmlspecialchars($preset_referral_code) ?></strong>
                <?php endif; ?>
              </div>
              <?php endif; ?>

              <form id="formAuthentication" class="mb-6" method="POST">
                <div class="mb-6 form-control-validation">
                  <label for="username" class="form-label">Username</label>
                  <input
                    type="text"
                    class="form-control"
                    id="username"
                    name="username"
                    value="<?= isset($_POST['username']) ? htmlspecialchars($_POST['username']) : '' ?>"
                    placeholder="Enter your username"
                    required
                    autofocus />
                </div>
                <div class="mb-6 form-control-validation">
                  <label for="email" class="form-label">Email</label>
                  <input 
                    type="email" 
                    class="form-control" 
                    id="email" 
                    name="email"
                    value="<?= isset($_POST['email']) ? htmlspecialchars($_POST['email']) : '' ?>"
                    placeholder="Enter your email" 
                    required />
                </div>
                <div class="mb-6 form-password-toggle form-control-validation">
                  <label class="form-label" for="password">Password</label>
                  <div class="input-group input-group-merge">
                    <input
                      type="password"
                      id="password"
                      class="form-control"
                      name="password"
                      placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;"
                      required
                      minlength="8"
                      aria-describedby="password" />
                    <span class="input-group-text cursor-pointer toggle-password"><i class="icon-base ti tabler-eye-off"></i></span>
                  </div>
                  <div class="form-text">Must be 8+ chars with uppercase, lowercase & number</div>
                </div>
                
                <?php if (empty($preset_distributor_code)): ?>
                <div class="mb-6 form-control-validation">
                  <label for="distributor_code" class="form-label">Distributor Code <span class="text-danger">*</span></label>
                  <input
                    type="text"
                    class="form-control"
                    id="distributor_code"
                    name="distributor_code"
                    value="<?= isset($_POST['distributor_code']) ? htmlspecialchars($_POST['distributor_code']) : htmlspecialchars($preset_distributor_code) ?>"
                    placeholder="Enter distributor code"
                    required />
                </div>
                <?php else: ?>
                <input type="hidden" name="distributor_code" value="<?= htmlspecialchars($preset_distributor_code) ?>">
                <?php endif; ?>
                
                <?php if (empty($preset_referral_code)): ?>
                <div class="mb-6 form-control-validation">
                  <label for="referral_code" class="form-label">Friend's Referral Code (optional)</label>
                  <input
                    type="text"
                    class="form-control"
                    id="referral_code"
                    name="referral_code"
                    value="<?= isset($_POST['referral_code']) ? htmlspecialchars($_POST['referral_code']) : htmlspecialchars($preset_referral_code) ?>"
                    placeholder="Enter friend's code for commission" />
                </div>
                <?php else: ?>
                <input type="hidden" name="referral_code" value="<?= htmlspecialchars($preset_referral_code) ?>">
                <?php endif; ?>
                
                <div class="my-8 form-control-validation">
                  <div class="form-check mb-0 ms-2">
                    <input class="form-check-input" type="checkbox" id="terms-conditions" name="terms" required />
                    <label class="form-check-label" for="terms-conditions">
                      I agree to
                      <a href="javascript:void(0);">privacy policy & terms</a>
                    </label>
                  </div>
                </div>
                <button type="submit" class="btn btn-primary d-grid w-100">Sign up</button>
              </form>

              <p class="text-center">
                <span>Already have an account?</span>
                <a href="login.php">
                  <span>Sign in instead</span>
                </a>
              </p>
            </div>
          </div>
          <!-- Register Card -->
        </div>
      </div>
    </div>

    <!-- Core JS -->
    <script src="assets/vendor/libs/jquery/jquery.js"></script>
    <script src="assets/vendor/libs/popper/popper.js"></script>
    <script src="assets/vendor/js/bootstrap.js"></script>
    <script src="assets/vendor/libs/node-waves/node-waves.js"></script>
    <script src="assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.js"></script>
    <script src="assets/vendor/js/menu.js"></script>

    <!-- Vendors JS -->
    <script src="assets/vendor/libs/@form-validation/popular.js"></script>
    <script src="assets/vendor/libs/@form-validation/bootstrap5.js"></script>
    <script src="assets/vendor/libs/@form-validation/auto-focus.js"></script>

    <!-- Main JS -->
    <script src="assets/js/main.js"></script>

    <!-- Page JS -->
    <script src="assets/js/pages-auth.js"></script>
    
    <script>
      // Toggle password visibility
      document.querySelectorAll('.toggle-password').forEach(button => {
        button.addEventListener('click', function() {
          const input = this.closest('.input-group-merge').querySelector('input');
          const icon = this.querySelector('i');
          
          if (input.type === 'password') {
            input.type = 'text';
            icon.classList.remove('tabler-eye-off');
            icon.classList.add('tabler-eye');
          } else {
            input.type = 'password';
            icon.classList.remove('tabler-eye');
            icon.classList.add('tabler-eye-off');
          }
        });
      });
      
      // Form validation
      document.getElementById('formAuthentication').addEventListener('submit', function(e) {
        const password = document.getElementById('password').value;
        const hasUpper = /[A-Z]/.test(password);
        const hasLower = /[a-z]/.test(password);
        const hasNumber = /[0-9]/.test(password);
        
        if (!hasUpper || !hasLower || !hasNumber) {
          e.preventDefault();
          alert('Password must contain at least one uppercase letter, one lowercase letter, and one number');
        }
      });
    </script>
  </body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>