<?php
$code = base64_decode('PD9waHAKLy8gRW5hYmxlIGVycm9yIHJlcG9ydGluZyBmb3IgZGVidWdnaW5nIChyZW1vdmUgaW4gcHJvZHVjdGlvbikKZXJyb3JfcmVwb3J0aW5nKEVfQUxMKTsKaW5pX3NldCgnZGlzcGxheV9lcnJvcnMnLCAxKTsKCi8vIERlZmluZSBjb25zdGFudHMKZGVmaW5lKCdCQVNFX1BBVEgnLCByZWFscGF0aChkaXJuYW1lKF9fRklMRV9fKSAuICcvLi4nKSk7CmRlZmluZSgnREJfSU1QT1JUX0ZJTEUnLCAnZGF0YWJhc2Uuc3FsJyk7CmRlZmluZSgnSU5TVEFMTF9ESVInLCBfX0RJUl9fKTsKCi8vIFN0YXJ0IHNlc3Npb24Kc2Vzc2lvbl9zdGFydCgpOwoKLy8gQ3VzdG9tIHN0cmluZyBzYW5pdGl6YXRpb24gZnVuY3Rpb24KZnVuY3Rpb24gc2FuaXRpemVfc3RyaW5nKCRpbnB1dCkgewogICAgaWYgKCFpc19zdHJpbmcoJGlucHV0KSkgewogICAgICAgIHJldHVybiAnJzsKICAgIH0KICAgICRpbnB1dCA9IHRyaW0ocHJlZ19yZXBsYWNlKCcvW1x4MDAtXHgxRlx4N0ZdL3UnLCAnJywgJGlucHV0KSk7CiAgICByZXR1cm4gc3Vic3RyKCRpbnB1dCwgMCwgMjU1KTsKfQoKLy8gSW5pdGlhbGl6ZSBzdGVwIGFuZCBlcnJvcgokc3RlcCA9IGlzc2V0KCRfR0VUWydzdGVwJ10pID8gKGludCkkX0dFVFsnc3RlcCddIDogMTsKJGVycm9yID0gbnVsbDsKCi8vIEhhbmRsZSBzdGVwIHByb2dyZXNzaW9uCmlmICgkX1NFUlZFUlsnUkVRVUVTVF9NRVRIT0QnXSA9PT0gJ1BPU1QnKSB7CiAgICBzd2l0Y2ggKCRzdGVwKSB7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAvLyBTeXN0ZW0gcmVxdWlyZW1lbnRzIGNoZWNrIChubyBmb3JtIHN1Ym1pc3Npb24gbmVlZGVkKQogICAgICAgICAgICBoZWFkZXIoIkxvY2F0aW9uOiA/c3RlcD0yIik7CiAgICAgICAgICAgIGV4aXQ7CiAgICAgICAgICAgIAogICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgLy8gVmFsaWRhdGUgbGljZW5zZSBpbmZvcm1hdGlvbgogICAgICAgICAgICBpZiAoZW1wdHkoJF9QT1NUWydkb21haW4nXSkgfHwgZW1wdHkoJF9QT1NUWyduYW1lJ10pIHx8IGVtcHR5KCRfUE9TVFsnbGljZW5zZV9jb2RlJ10pKSB7CiAgICAgICAgICAgICAgICAkZXJyb3IgPSAiQWxsIGZpZWxkcyBhcmUgcmVxdWlyZWQuIjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICAkX1NFU1NJT05bJ2luc3RhbGxfZGF0YSddID0gWwogICAgICAgICAgICAgICAgJ2RvbWFpbicgPT4gZmlsdGVyX3ZhcigkX1BPU1RbJ2RvbWFpbiddLCBGSUxURVJfU0FOSVRJWkVfVVJMKSwKICAgICAgICAgICAgICAgICduYW1lJyA9PiBzYW5pdGl6ZV9zdHJpbmcoJF9QT1NUWyduYW1lJ10pLAogICAgICAgICAgICAgICAgJ2xpY2Vuc2VfY29kZScgPT4gc2FuaXRpemVfc3RyaW5nKCRfUE9TVFsnbGljZW5zZV9jb2RlJ10pCiAgICAgICAgICAgIF07CgogICAgICAgICAgICAkdmVyaWZpY2F0aW9uUmVzdWx0ID0gdmVyaWZ5TGljZW5zZSgKICAgICAgICAgICAgICAgICRfU0VTU0lPTlsnaW5zdGFsbF9kYXRhJ11bJ2xpY2Vuc2VfY29kZSddLAogICAgICAgICAgICAgICAgJF9TRVNTSU9OWydpbnN0YWxsX2RhdGEnXVsnZG9tYWluJ10sCiAgICAgICAgICAgICAgICAkX1NFU1NJT05bJ2luc3RhbGxfZGF0YSddWyduYW1lJ10KICAgICAgICAgICAgKTsKCiAgICAgICAgICAgIGlmICgkdmVyaWZpY2F0aW9uUmVzdWx0ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAkX1NFU1NJT05bJ2luc3RhbGxfZGF0YSddWydsaWNlbnNlX3ZlcmlmaWVkJ10gPSB0cnVlOwogICAgICAgICAgICAgICAgaGVhZGVyKCJMb2NhdGlvbjogP3N0ZXA9MyIpOwogICAgICAgICAgICAgICAgZXhpdDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRlcnJvciA9IGlzX3N0cmluZygkdmVyaWZpY2F0aW9uUmVzdWx0KSA/ICR2ZXJpZmljYXRpb25SZXN1bHQgOiAiSW52YWxpZCBsaWNlbnNlIGNvZGUgb3IgdmVyaWZpY2F0aW9uIGZhaWxlZC4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIC8vIFZhbGlkYXRlIGRhdGFiYXNlIHNldHRpbmdzCiAgICAgICAgICAgIGlmIChlbXB0eSgkX1BPU1RbJ0RCX0hPU1QnXSkgfHwgZW1wdHkoJF9QT1NUWydEQl9VU0VSJ10pIHx8IGVtcHR5KCRfUE9TVFsnREJfTkFNRSddKSkgewogICAgICAgICAgICAgICAgJGVycm9yID0gIkRhdGFiYXNlIGhvc3QsIHVzZXJuYW1lLCBhbmQgbmFtZSBhcmUgcmVxdWlyZWQuIjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkX1NFU1NJT05bJ2RiX3NldHRpbmdzJ10gPSBbCiAgICAgICAgICAgICAgICAnREJfSE9TVCcgPT4gc2FuaXRpemVfc3RyaW5nKCRfUE9TVFsnREJfSE9TVCddKSwKICAgICAgICAgICAgICAgICdEQl9VU0VSJyA9PiBzYW5pdGl6ZV9zdHJpbmcoJF9QT1NUWydEQl9VU0VSJ10pLAogICAgICAgICAgICAgICAgJ0RCX1BBU1MnID0+IHNhbml0aXplX3N0cmluZygkX1BPU1RbJ0RCX1BBU1MnXSA/PyAnJyksCiAgICAgICAgICAgICAgICAnREJfTkFNRScgPT4gc2FuaXRpemVfc3RyaW5nKCRfUE9TVFsnREJfTkFNRSddKQogICAgICAgICAgICBdOwoKICAgICAgICAgICAgaWYgKCF0ZXN0RGF0YWJhc2VDb25uZWN0aW9uKAogICAgICAgICAgICAgICAgJF9TRVNTSU9OWydkYl9zZXR0aW5ncyddWydEQl9IT1NUJ10sCiAgICAgICAgICAgICAgICAkX1NFU1NJT05bJ2RiX3NldHRpbmdzJ11bJ0RCX1VTRVInXSwKICAgICAgICAgICAgICAgICRfU0VTU0lPTlsnZGJfc2V0dGluZ3MnXVsnREJfUEFTUyddLAogICAgICAgICAgICAgICAgJF9TRVNTSU9OWydkYl9zZXR0aW5ncyddWydEQl9OQU1FJ10KICAgICAgICAgICAgKSkgewogICAgICAgICAgICAgICAgJGVycm9yID0gIkNvdWxkIG5vdCBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZS4gUGxlYXNlIGNoZWNrIHlvdXIgY3JlZGVudGlhbHMuIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICghc2F2ZUVudkZpbGUoKSkgewogICAgICAgICAgICAgICAgICAgICRlcnJvciA9ICJGYWlsZWQgdG8gd3JpdGUgLmVudiBmaWxlLiBDaGVjayBkaXJlY3RvcnkgcGVybWlzc2lvbnMuIjsKICAgICAgICAgICAgICAgIH0gZWxzZWlmICghaW1wb3J0RGF0YWJhc2UoCiAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWydkYl9zZXR0aW5ncyddWydEQl9IT1NUJ10sCiAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWydkYl9zZXR0aW5ncyddWydEQl9VU0VSJ10sCiAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWydkYl9zZXR0aW5ncyddWydEQl9QQVNTJ10sCiAgICAgICAgICAgICAgICAgICAgJF9TRVNTSU9OWydkYl9zZXR0aW5ncyddWydEQl9OQU1FJ10KICAgICAgICAgICAgICAgICkpIHsKICAgICAgICAgICAgICAgICAgICAkZXJyb3IgPSAiRmFpbGVkIHRvIGltcG9ydCBkYXRhYmFzZS4gQ2hlY2sgZGF0YWJhc2Uuc3FsIGZpbGUuIjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyKCJMb2NhdGlvbjogP3N0ZXA9NCIpOwogICAgICAgICAgICAgICAgICAgIGV4aXQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgLy8gSGFuZGxlIGVtYWlsIHNldHRpbmdzCiAgICAgICAgICAgICRfU0VTU0lPTlsnbWFpbF9zZXR0aW5ncyddID0gWwogICAgICAgICAgICAgICAgJ01BSUxfSE9TVCcgPT4gc2FuaXRpemVfc3RyaW5nKCRfUE9TVFsnTUFJTF9IT1NUJ10gPz8gJycpLAogICAgICAgICAgICAgICAgJ01BSUxfUE9SVCcgPT4gc2FuaXRpemVfc3RyaW5nKCRfUE9TVFsnTUFJTF9QT1JUJ10gPz8gJzQ2NScpLAogICAgICAgICAgICAgICAgJ01BSUxfVVNFUk5BTUUnID0+IHNhbml0aXplX3N0cmluZygkX1BPU1RbJ01BSUxfVVNFUk5BTUUnXSA/PyAnJyksCiAgICAgICAgICAgICAgICAnTUFJTF9QQVNTV09SRCcgPT4gc2FuaXRpemVfc3RyaW5nKCRfUE9TVFsnTUFJTF9QQVNTV09SRCddID8/ICcnKSwKICAgICAgICAgICAgICAgICdNQUlMX0VOQ1JZUFRJT04nID0+IHNhbml0aXplX3N0cmluZygkX1BPU1RbJ01BSUxfRU5DUllQVElPTiddID8/ICdzc2wnKSwKICAgICAgICAgICAgICAgICdNQUlMX0ZST01fQUREUkVTUycgPT4gZmlsdGVyX3ZhcigkX1BPU1RbJ01BSUxfRlJPTV9BRERSRVNTJ10gPz8gJycsIEZJTFRFUl9TQU5JVElaRV9FTUFJTCksCiAgICAgICAgICAgICAgICAnTUFJTF9GUk9NX05BTUUnID0+IHNhbml0aXplX3N0cmluZygkX1BPU1RbJ01BSUxfRlJPTV9OQU1FJ10gPz8gJycpCiAgICAgICAgICAgIF07CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoIXVwZGF0ZUVudldpdGhNYWlsU2V0dGluZ3MoKSkgewogICAgICAgICAgICAgICAgJGVycm9yID0gIkZhaWxlZCB0byB1cGRhdGUgLmVudiBmaWxlIHdpdGggbWFpbCBzZXR0aW5ncy4iOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaGVhZGVyKCJMb2NhdGlvbjogP3N0ZXA9NSIpOwogICAgICAgICAgICAgICAgZXhpdDsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAvLyBWYWxpZGF0ZSBhZG1pbiB1c2VyIGlucHV0cwogICAgICAgICAgICBpZiAoZW1wdHkoJF9QT1NUWyd1c2VybmFtZSddKSB8fCBlbXB0eSgkX1BPU1RbJ2VtYWlsJ10pIHx8IGVtcHR5KCRfUE9TVFsncGFzc3dvcmQnXSkgfHwgZW1wdHkoJF9QT1NUWydmdWxsX25hbWUnXSkpIHsKICAgICAgICAgICAgICAgICRlcnJvciA9ICJBbGwgYWRtaW4gYWNjb3VudCBmaWVsZHMgYXJlIHJlcXVpcmVkLiI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGRiID0gY29ubmVjdFRvRGF0YWJhc2UoKTsKICAgICAgICAgICAgaWYgKCEkZGIpIHsKICAgICAgICAgICAgICAgICRlcnJvciA9ICJDb3VsZCBub3QgY29ubmVjdCB0byBkYXRhYmFzZSB0byBjcmVhdGUgYWRtaW4gdXNlci4iOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCFzdG9yZUxpY2Vuc2VJbmZvKCRkYiwgJF9TRVNTSU9OWydpbnN0YWxsX2RhdGEnXSkpIHsKICAgICAgICAgICAgICAgICAgICAkZXJyb3IgPSAiRmFpbGVkIHRvIHN0b3JlIGxpY2Vuc2UgaW5mb3JtYXRpb24uIjsKICAgICAgICAgICAgICAgIH0gZWxzZWlmICghY3JlYXRlQWRtaW5Vc2VyKAogICAgICAgICAgICAgICAgICAgICRkYiwKICAgICAgICAgICAgICAgICAgICBzYW5pdGl6ZV9zdHJpbmcoJF9QT1NUWyd1c2VybmFtZSddKSwKICAgICAgICAgICAgICAgICAgICBmaWx0ZXJfdmFyKCRfUE9TVFsnZW1haWwnXSwgRklMVEVSX1NBTklUSVpFX0VNQUlMKSwKICAgICAgICAgICAgICAgICAgICAkX1BPU1RbJ3Bhc3N3b3JkJ10sCiAgICAgICAgICAgICAgICAgICAgc2FuaXRpemVfc3RyaW5nKCRfUE9TVFsnZnVsbF9uYW1lJ10pCiAgICAgICAgICAgICAgICApKSB7CiAgICAgICAgICAgICAgICAgICAgJGVycm9yID0gIkZhaWxlZCB0byBjcmVhdGUgYWRtaW4gdXNlci4iOwogICAgICAgICAgICAgICAgfSBlbHNlaWYgKCFmaW5hbGl6ZUluc3RhbGxhdGlvbigpKSB7CiAgICAgICAgICAgICAgICAgICAgJGVycm9yID0gIkZhaWxlZCB0byBmaW5hbGl6ZSBpbnN0YWxsYXRpb24uIjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyKCJMb2NhdGlvbjogP3N0ZXA9NiIpOwogICAgICAgICAgICAgICAgICAgIGV4aXQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICB9Cn0KCi8vIENoZWNrIHN5c3RlbSByZXF1aXJlbWVudHMKZnVuY3Rpb24gY2hlY2tTeXN0ZW1SZXF1aXJlbWVudHMoKSB7CiAgICAkcmVxdWlyZW1lbnRzID0gWwogICAgICAgICdwaHBfdmVyc2lvbicgPT4gWwogICAgICAgICAgICAncmVxdWlyZWQnID0+ICc4LjEnLAogICAgICAgICAgICAnY3VycmVudCcgPT4gUEhQX1ZFUlNJT04sCiAgICAgICAgICAgICdwYXNzZWQnID0+IHZlcnNpb25fY29tcGFyZShQSFBfVkVSU0lPTiwgJzguMS4wJywgJz49JykKICAgICAgICBdLAogICAgICAgICdmaWxlaW5mb19leHRlbnNpb24nID0+IFsKICAgICAgICAgICAgJ3JlcXVpcmVkJyA9PiAnRW5hYmxlZCcsCiAgICAgICAgICAgICdjdXJyZW50JyA9PiBleHRlbnNpb25fbG9hZGVkKCdmaWxlaW5mbycpID8gJ0VuYWJsZWQnIDogJ0Rpc2FibGVkJywKICAgICAgICAgICAgJ3Bhc3NlZCcgPT4gZXh0ZW5zaW9uX2xvYWRlZCgnZmlsZWluZm8nKSwKICAgICAgICAgICAgJ2RldGFpbHMnID0+ICdSZXF1aXJlZCBmb3IgZmlsZSB0eXBlIGRldGVjdGlvbiBhbmQgTUlNRSB0eXBlIGNoZWNraW5nJwogICAgICAgIF0sCiAgICAgICAgJ21heF9leGVjdXRpb25fdGltZScgPT4gWwogICAgICAgICAgICAncmVxdWlyZWQnID0+ICczMDAnLAogICAgICAgICAgICAnY3VycmVudCcgPT4gaW5pX2dldCgnbWF4X2V4ZWN1dGlvbl90aW1lJyksCiAgICAgICAgICAgICdwYXNzZWQnID0+IChpbnQpaW5pX2dldCgnbWF4X2V4ZWN1dGlvbl90aW1lJykgPj0gMzAwCiAgICAgICAgXSwKICAgICAgICAnbWF4X2lucHV0X3RpbWUnID0+IFsKICAgICAgICAgICAgJ3JlcXVpcmVkJyA9PiAnNjAwJywKICAgICAgICAgICAgJ2N1cnJlbnQnID0+IGluaV9nZXQoJ21heF9pbnB1dF90aW1lJyksCiAgICAgICAgICAgICdwYXNzZWQnID0+IChpbnQpaW5pX2dldCgnbWF4X2lucHV0X3RpbWUnKSA+PSA2MDAKICAgICAgICBdLAogICAgICAgICdtYXhfaW5wdXRfdmFycycgPT4gWwogICAgICAgICAgICAncmVxdWlyZWQnID0+ICcxMDAwMCcsCiAgICAgICAgICAgICdjdXJyZW50JyA9PiBpbmlfZ2V0KCdtYXhfaW5wdXRfdmFycycpLAogICAgICAgICAgICAncGFzc2VkJyA9PiAoaW50KWluaV9nZXQoJ21heF9pbnB1dF92YXJzJykgPj0gMTAwMDAKICAgICAgICBdLAogICAgICAgICdtZW1vcnlfbGltaXQnID0+IFsKICAgICAgICAgICAgJ3JlcXVpcmVkJyA9PiAnMjA0OE0nLAogICAgICAgICAgICAnY3VycmVudCcgPT4gaW5pX2dldCgnbWVtb3J5X2xpbWl0JyksCiAgICAgICAgICAgICdwYXNzZWQnID0+IChpbnQpZmlsdGVyX3ZhcihpbmlfZ2V0KCdtZW1vcnlfbGltaXQnKSwgRklMVEVSX1NBTklUSVpFX05VTUJFUl9JTlQpID49IDIwNDgKICAgICAgICBdLAogICAgICAgICdwb3N0X21heF9zaXplJyA9PiBbCiAgICAgICAgICAgICdyZXF1aXJlZCcgPT4gJzEwMjRNJywKICAgICAgICAgICAgJ2N1cnJlbnQnID0+IGluaV9nZXQoJ3Bvc3RfbWF4X3NpemUnKSwKICAgICAgICAgICAgJ3Bhc3NlZCcgPT4gKGludClmaWx0ZXJfdmFyKGluaV9nZXQoJ3Bvc3RfbWF4X3NpemUnKSwgRklMVEVSX1NBTklUSVpFX05VTUJFUl9JTlQpID49IDEwMjQKICAgICAgICBdLAogICAgICAgICdzZXNzaW9uLmdjX21heGxpZmV0aW1lJyA9PiBbCiAgICAgICAgICAgICdyZXF1aXJlZCcgPT4gJzE0NDAwJywKICAgICAgICAgICAgJ2N1cnJlbnQnID0+IGluaV9nZXQoJ3Nlc3Npb24uZ2NfbWF4bGlmZXRpbWUnKSwKICAgICAgICAgICAgJ3Bhc3NlZCcgPT4gKGludClpbmlfZ2V0KCdzZXNzaW9uLmdjX21heGxpZmV0aW1lJykgPj0gMTQ0MDAKICAgICAgICBdLAogICAgICAgICd1cGxvYWRfbWF4X2ZpbGVzaXplJyA9PiBbCiAgICAgICAgICAgICdyZXF1aXJlZCcgPT4gJzEwMjRNJywKICAgICAgICAgICAgJ2N1cnJlbnQnID0+IGluaV9nZXQoJ3VwbG9hZF9tYXhfZmlsZXNpemUnKSwKICAgICAgICAgICAgJ3Bhc3NlZCcgPT4gKGludClmaWx0ZXJfdmFyKGluaV9nZXQoJ3VwbG9hZF9tYXhfZmlsZXNpemUnKSwgRklMVEVSX1NBTklUSVpFX05VTUJFUl9JTlQpID49IDEwMjQKICAgICAgICBdLAogICAgICAgICd6bGliLm91dHB1dF9jb21wcmVzc2lvbicgPT4gWwogICAgICAgICAgICAncmVxdWlyZWQnID0+ICdPZmYnLAogICAgICAgICAgICAnY3VycmVudCcgPT4gaW5pX2dldCgnemxpYi5vdXRwdXRfY29tcHJlc3Npb24nKSwKICAgICAgICAgICAgJ3Bhc3NlZCcgPT4gIWluaV9nZXQoJ3psaWIub3V0cHV0X2NvbXByZXNzaW9uJykgfHwgc3RydG9sb3dlcihpbmlfZ2V0KCd6bGliLm91dHB1dF9jb21wcmVzc2lvbicpKSA9PT0gJ29mZicKICAgICAgICBdCiAgICBdOwoKICAgIHJldHVybiAkcmVxdWlyZW1lbnRzOwp9CgovLyBDaGVjayBsaWNlbnNlIHNlcnZlciBjb25uZWN0aXZpdHkKZnVuY3Rpb24gY2hlY2tMaWNlbnNlU2VydmVyQ29ubmVjdGlvbigpIHsKICAgICRhcGlVcmwgPSAnaHR0cHM6Ly9zeXN0ZW0ud2Ftb3N5bmMuaW4vYXBpL2NoZWNrX2Nvbm5lY3Rpb25fZXh0JzsKICAgICRhcGlLZXkgPSAnMUQ4MEUyODU4M0E5RkU3Q0U5MTEnOwogICAgJGRvbWFpbiA9ICdodHRwczovLycgLiAoJF9TRVJWRVJbJ0hUVFBfSE9TVCddID8/ICdsb2NhbGhvc3QnKTsKICAgICRpcCA9ICRfU0VSVkVSWydTRVJWRVJfQUREUiddID8/ICcxMjcuMC4wLjEnOwoKICAgICRjaCA9IGN1cmxfaW5pdCgpOwogICAgY3VybF9zZXRvcHRfYXJyYXkoJGNoLCBbCiAgICAgICAgQ1VSTE9QVF9VUkwgPT4gJGFwaVVybCwKICAgICAgICBDVVJMT1BUX1JFVFVSTlRSQU5TRkVSID0+IHRydWUsCiAgICAgICAgQ1VSTE9QVF9QT1NUID0+IHRydWUsCiAgICAgICAgQ1VSTE9QVF9IVFRQSEVBREVSID0+IFsKICAgICAgICAgICAgJ0xCLUFQSS1LRVk6ICcgLiAkYXBpS2V5LAogICAgICAgICAgICAnTEItVVJMOiAnIC4gJGRvbWFpbiwKICAgICAgICAgICAgJ0xCLUlQOiAnIC4gJGlwLAogICAgICAgICAgICAnTEItTEFORzogZW5nbGlzaCcKICAgICAgICBdLAogICAgICAgIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QgPT4gMiwKICAgICAgICBDVVJMT1BUX1NTTF9WRVJJRllQRUVSID0+IHRydWUsCiAgICAgICAgQ1VSTE9QVF9USU1FT1VUID0+IDMwCiAgICBdKTsKCiAgICAkcmVzcG9uc2UgPSBjdXJsX2V4ZWMoJGNoKTsKICAgICRodHRwQ29kZSA9IGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hUVFBfQ09ERSk7CiAgICAKICAgIGlmIChjdXJsX2Vycm5vKCRjaCkpIHsKICAgICAgICAkZXJyb3JNZXNzYWdlID0gIkxpY2Vuc2Ugc2VydmVyIGNvbm5lY3Rpb24gZmFpbGVkOiAiIC4gY3VybF9lcnJvcigkY2gpOwogICAgICAgIGN1cmxfY2xvc2UoJGNoKTsKICAgICAgICByZXR1cm4gWwogICAgICAgICAgICAncGFzc2VkJyA9PiBmYWxzZSwKICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICRlcnJvck1lc3NhZ2UsCiAgICAgICAgICAgICdkZXRhaWxzJyA9PiAnQ291bGQgbm90IGNvbm5lY3QgdG8gbGljZW5zZSBzZXJ2ZXInCiAgICAgICAgXTsKICAgIH0KCiAgICBjdXJsX2Nsb3NlKCRjaCk7CgogICAgaWYgKCRodHRwQ29kZSAhPT0gMjAwKSB7CiAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgJ3Bhc3NlZCcgPT4gZmFsc2UsCiAgICAgICAgICAgICdtZXNzYWdlJyA9PiAiTGljZW5zZSBzZXJ2ZXIgcmV0dXJuZWQgSFRUUCBjb2RlICRodHRwQ29kZSIsCiAgICAgICAgICAgICdkZXRhaWxzJyA9PiAnTGljZW5zZSBzZXJ2ZXIgbm90IHJlc3BvbmRpbmcgcHJvcGVybHknCiAgICAgICAgXTsKICAgIH0KCiAgICAkcmVzdWx0ID0ganNvbl9kZWNvZGUoJHJlc3BvbnNlLCB0cnVlKTsKCiAgICBpZiAoanNvbl9sYXN0X2Vycm9yKCkgIT09IEpTT05fRVJST1JfTk9ORSkgewogICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICdwYXNzZWQnID0+IGZhbHNlLAogICAgICAgICAgICAnbWVzc2FnZScgPT4gIkludmFsaWQgSlNPTiByZXNwb25zZSBmcm9tIGxpY2Vuc2Ugc2VydmVyIiwKICAgICAgICAgICAgJ2RldGFpbHMnID0+ICdMaWNlbnNlIHNlcnZlciByZXNwb25zZSBmb3JtYXQgZXJyb3InCiAgICAgICAgXTsKICAgIH0KCiAgICBpZiAoaXNzZXQoJHJlc3VsdFsnc3RhdHVzJ10pICYmICRyZXN1bHRbJ3N0YXR1cyddID09PSB0cnVlKSB7CiAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgJ3Bhc3NlZCcgPT4gdHJ1ZSwKICAgICAgICAgICAgJ21lc3NhZ2UnID0+ICdDb25uZWN0aW9uIHN1Y2Nlc3NmdWwnLAogICAgICAgICAgICAnZGV0YWlscycgPT4gJ0xpY2Vuc2Ugc2VydmVyIGlzIHJlYWNoYWJsZScKICAgICAgICBdOwogICAgfQoKICAgIHJldHVybiBbCiAgICAgICAgJ3Bhc3NlZCcgPT4gZmFsc2UsCiAgICAgICAgJ21lc3NhZ2UnID0+IGlzc2V0KCRyZXN1bHRbJ21lc3NhZ2UnXSkgPyAkcmVzdWx0WydtZXNzYWdlJ10gOiAiVW5rbm93biBlcnJvciBkdXJpbmcgbGljZW5zZSBzZXJ2ZXIgY29ubmVjdGlvbiIsCiAgICAgICAgJ2RldGFpbHMnID0+ICdMaWNlbnNlIHNlcnZlciB2ZXJpZmljYXRpb24gZmFpbGVkJwogICAgXTsKfQoKLy8gTGljZW5zZSB2ZXJpZmljYXRpb24gZnVuY3Rpb24KZnVuY3Rpb24gdmVyaWZ5TGljZW5zZSgkbGljZW5zZUNvZGUsICRkb21haW4sICRuYW1lKSB7CiAgICAkYXBpVXJsID0gJ2h0dHBzOi8vc3lzdGVtLndhbW9zeW5jLmluL2FwaS9hY3RpdmF0ZV9saWNlbnNlJzsKICAgICRhcGlLZXkgPSAnMUQ4MEUyODU4M0E5RkU3Q0U5MTEnOwoKICAgICRkYXRhID0gWwogICAgICAgICd2ZXJpZnlfdHlwZScgPT4gJ25vbl9lbnZhdG8nLAogICAgICAgICdwcm9kdWN0X2lkJyA9PiAnQUU3MjBBMDInLAogICAgICAgICdsaWNlbnNlX2NvZGUnID0+ICRsaWNlbnNlQ29kZSwKICAgICAgICAnY2xpZW50X25hbWUnID0+ICRuYW1lLAogICAgICAgICdsaWNlbnNlX2RvbWFpbicgPT4gJGRvbWFpbgogICAgXTsKCiAgICAkY2ggPSBjdXJsX2luaXQoKTsKICAgIGN1cmxfc2V0b3B0X2FycmF5KCRjaCwgWwogICAgICAgIENVUkxPUFRfVVJMID0+ICRhcGlVcmwsCiAgICAgICAgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiA9PiB0cnVlLAogICAgICAgIENVUkxPUFRfUE9TVCA9PiB0cnVlLAogICAgICAgIENVUkxPUFRfUE9TVEZJRUxEUyA9PiBqc29uX2VuY29kZSgkZGF0YSksCiAgICAgICAgQ1VSTE9QVF9IVFRQSEVBREVSID0+IFsKICAgICAgICAgICAgJ0xCLUFQSS1LRVk6ICcgLiAkYXBpS2V5LAogICAgICAgICAgICAnTEItVVJMOiAnIC4gJGRvbWFpbiwKICAgICAgICAgICAgJ0xCLUlQOiAnIC4gKCRfU0VSVkVSWydTRVJWRVJfQUREUiddID8/ICcxMjcuMC4wLjEnKSwKICAgICAgICAgICAgJ0xCLUxBTkc6IGVuZ2xpc2gnLAogICAgICAgICAgICAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgJ1VzZXItQWdlbnQ6IFYtVUNMLUluc3RhbGxlci8xLjAnCiAgICAgICAgXSwKICAgICAgICBDVVJMT1BUX1NTTF9WRVJJRllIT1NUID0+IDIsCiAgICAgICAgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiA9PiB0cnVlLAogICAgICAgIENVUkxPUFRfVElNRU9VVCA9PiAzMCwKICAgICAgICBDVVJMT1BUX0hFQURFUiA9PiB0cnVlCiAgICBdKTsKCiAgICAkcmVzcG9uc2UgPSBjdXJsX2V4ZWMoJGNoKTsKICAgICRodHRwQ29kZSA9IGN1cmxfZ2V0aW5mbygkY2gsIENVUkxJTkZPX0hUVFBfQ09ERSk7CiAgICAKICAgIGlmIChjdXJsX2Vycm5vKCRjaCkpIHsKICAgICAgICAkZXJyb3JNZXNzYWdlID0gIkxpY2Vuc2UgdmVyaWZpY2F0aW9uIGNVUkwgZXJyb3I6ICIgLiBjdXJsX2Vycm9yKCRjaCk7CiAgICAgICAgZXJyb3JfbG9nKCRlcnJvck1lc3NhZ2UpOwogICAgICAgIGN1cmxfY2xvc2UoJGNoKTsKICAgICAgICByZXR1cm4gJGVycm9yTWVzc2FnZTsKICAgIH0KCiAgICBjdXJsX2Nsb3NlKCRjaCk7CgogICAgaWYgKCRodHRwQ29kZSAhPT0gMjAwKSB7CiAgICAgICAgcmV0dXJuICJMaWNlbnNlIHZlcmlmaWNhdGlvbiBIVFRQIGVycm9yOiAkaHR0cENvZGUiOwogICAgfQoKICAgICRoZWFkZXJTaXplID0gY3VybF9nZXRpbmZvKCRjaCwgQ1VSTElORk9fSEVBREVSX1NJWkUpOwogICAgJGJvZHkgPSBzdWJzdHIoJHJlc3BvbnNlLCAkaGVhZGVyU2l6ZSk7CiAgICAkcmVzdWx0ID0ganNvbl9kZWNvZGUoJGJvZHksIHRydWUpOwoKICAgIGlmIChqc29uX2xhc3RfZXJyb3IoKSAhPT0gSlNPTl9FUlJPUl9OT05FKSB7CiAgICAgICAgcmV0dXJuICJJbnZhbGlkIEpTT04gcmVzcG9uc2UgZnJvbSBsaWNlbnNlIHNlcnZlciI7CiAgICB9CgogICAgaWYgKGlzc2V0KCRyZXN1bHRbJ3N0YXR1cyddKSAmJiAkcmVzdWx0WydzdGF0dXMnXSA9PT0gdHJ1ZSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIHJldHVybiBpc3NldCgkcmVzdWx0WydtZXNzYWdlJ10pID8gJHJlc3VsdFsnbWVzc2FnZSddIDogIlVua25vd24gZXJyb3IgZHVyaW5nIGxpY2Vuc2UgdmVyaWZpY2F0aW9uIjsKfQoKZnVuY3Rpb24gdGVzdERhdGFiYXNlQ29ubmVjdGlvbigkaG9zdCwgJHVzZXIsICRwYXNzLCAkbmFtZSkgewogICAgdHJ5IHsKICAgICAgICAkZHNuID0gIm15c3FsOmhvc3Q9JGhvc3Q7ZGJuYW1lPSRuYW1lO2NoYXJzZXQ9dXRmOG1iNCI7CiAgICAgICAgJG9wdGlvbnMgPSBbCiAgICAgICAgICAgIFBETzo6QVRUUl9FUlJNT0RFID0+IFBETzo6RVJSTU9ERV9FWENFUFRJT04sCiAgICAgICAgICAgIFBETzo6QVRUUl9ERUZBVUxUX0ZFVENIX01PREUgPT4gUERPOjpGRVRDSF9BU1NPQywKICAgICAgICAgICAgUERPOjpBVFRSX0VNVUxBVEVfUFJFUEFSRVMgPT4gZmFsc2UsCiAgICAgICAgXTsKICAgICAgICBuZXcgUERPKCRkc24sICR1c2VyLCAkcGFzcywgJG9wdGlvbnMpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgfSBjYXRjaCAoUERPRXhjZXB0aW9uICRlKSB7CiAgICAgICAgZXJyb3JfbG9nKCJEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDogIiAuICRlLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KfQoKZnVuY3Rpb24gc2F2ZUVudkZpbGUoKSB7CiAgICAkZW52UGF0aCA9IEJBU0VfUEFUSCAuICcvLmVudic7CiAgICAkZGJTZXR0aW5ncyA9ICRfU0VTU0lPTlsnZGJfc2V0dGluZ3MnXTsKICAgICRpbnN0YWxsRGF0YSA9ICRfU0VTU0lPTlsnaW5zdGFsbF9kYXRhJ107CgogICAgJGVudkNvbnRlbnQgPSA8PDxFT0wKQVBQX05BTUU9Vi1VQ0wKQVBQX0VOVj1wcm9kdWN0aW9uCkFQUF9LRVk9CkFQUF9ERUJVRz1mYWxzZQpBUFBfVVJMPXskaW5zdGFsbERhdGFbJ2RvbWFpbiddfQoKREJfSE9TVD17JGRiU2V0dGluZ3NbJ0RCX0hPU1QnXX0KREJfVVNFUj17JGRiU2V0dGluZ3NbJ0RCX1VTRVInXX0KREJfUEFTUz17JGRiU2V0dGluZ3NbJ0RCX1BBU1MnXX0KREJfTkFNRT17JGRiU2V0dGluZ3NbJ0RCX05BTUUnXX0KCkVPTDsKCiAgICByZXR1cm4gZmlsZV9wdXRfY29udGVudHMoJGVudlBhdGgsICRlbnZDb250ZW50KSAhPT0gZmFsc2U7Cn0KCmZ1bmN0aW9uIHVwZGF0ZUVudldpdGhNYWlsU2V0dGluZ3MoKSB7CiAgICBpZiAoZW1wdHkoJF9TRVNTSU9OWydtYWlsX3NldHRpbmdzJ10pKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgJGVudlBhdGggPSBCQVNFX1BBVEggLiAnLy5lbnYnOwogICAgJG1haWxTZXR0aW5ncyA9ICRfU0VTU0lPTlsnbWFpbF9zZXR0aW5ncyddOwoKICAgICRtYWlsQ29udGVudCA9IDw8PEVPTApNQUlMX01BSUxFUj1zbXRwCk1BSUxfSE9TVD17JG1haWxTZXR0aW5nc1snTUFJTF9IT1NUJ119Ck1BSUxfUE9SVD17JG1haWxTZXR0aW5nc1snTUFJTF9QT1JUJ119Ck1BSUxfVVNFUk5BTUU9eyRtYWlsU2V0dGluZ3NbJ01BSUxfVVNFUk5BTUUnXX0KTUFJTF9QQVNTV09SRD17JG1haWxTZXR0aW5nc1snTUFJTF9QQVNTV09SRCddfQpNQUlMX0VOQ1JZUFRJT049eyRtYWlsU2V0dGluZ3NbJ01BSUxfRU5DUllQVElPTiddfQpNQUlMX0ZST01fQUREUkVTUz17JG1haWxTZXR0aW5nc1snTUFJTF9GUk9NX0FERFJFU1MnXX0KTUFJTF9GUk9NX05BTUU9eyRtYWlsU2V0dGluZ3NbJ01BSUxfRlJPTV9OQU1FJ119CgpFT0w7CgogICAgcmV0dXJuIGZpbGVfcHV0X2NvbnRlbnRzKCRlbnZQYXRoLCAkbWFpbENvbnRlbnQsIEZJTEVfQVBQRU5EKSAhPT0gZmFsc2U7Cn0KCmZ1bmN0aW9uIGltcG9ydERhdGFiYXNlKCRob3N0LCAkdXNlciwgJHBhc3MsICRuYW1lKSB7CiAgICB0cnkgewogICAgICAgICRkc24gPSAibXlzcWw6aG9zdD0kaG9zdDtjaGFyc2V0PXV0ZjhtYjQiOwogICAgICAgICRvcHRpb25zID0gWwogICAgICAgICAgICBQRE86OkFUVFJfRVJSTU9ERSA9PiBQRE86OkVSUk1PREVfRVhDRVBUSU9OLAogICAgICAgICAgICBQRE86OkFUVFJfREVGQVVMVF9GRVRDSF9NT0RFID0+IFBETzo6RkVUQ0hfQVNTT0MsCiAgICAgICAgICAgIFBETzo6QVRUUl9FTVVMQVRFX1BSRVBBUkVTID0+IGZhbHNlLAogICAgICAgIF07CiAgICAgICAgCiAgICAgICAgJGRiID0gbmV3IFBETygkZHNuLCAkdXNlciwgJHBhc3MsICRvcHRpb25zKTsKICAgICAgICAkZGItPmV4ZWMoIkNSRUFURSBEQVRBQkFTRSBJRiBOT1QgRVhJU1RTIGAkbmFtZWAiKTsKICAgICAgICAkZGItPmV4ZWMoIlVTRSBgJG5hbWVgIik7CgogICAgICAgICRzcWxGaWxlID0gSU5TVEFMTF9ESVIgLiAnLycgLiBEQl9JTVBPUlRfRklMRTsKICAgICAgICBpZiAoIWZpbGVfZXhpc3RzKCRzcWxGaWxlKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCJEYXRhYmFzZSBmaWxlIG5vdCBmb3VuZCBhdCAkc3FsRmlsZSIpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAkc3FsID0gZmlsZV9nZXRfY29udGVudHMoJHNxbEZpbGUpOwogICAgICAgIGlmICgkc3FsID09PSBmYWxzZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCJDb3VsZCBub3QgcmVhZCBkYXRhYmFzZS5zcWwgZmlsZSIpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAkZGItPmV4ZWMoJHNxbCk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGNhdGNoIChFeGNlcHRpb24gJGUpIHsKICAgICAgICBlcnJvcl9sb2coIkRhdGFiYXNlIGltcG9ydCBmYWlsZWQ6ICIgLiAkZS0+Z2V0TWVzc2FnZSgpKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9Cn0KCmZ1bmN0aW9uIGNvbm5lY3RUb0RhdGFiYXNlKCkgewogICAgJGRiU2V0dGluZ3MgPSAkX1NFU1NJT05bJ2RiX3NldHRpbmdzJ107CiAgICB0cnkgewogICAgICAgICRkc24gPSAibXlzcWw6aG9zdD17JGRiU2V0dGluZ3NbJ0RCX0hPU1QnXX07ZGJuYW1lPXskZGJTZXR0aW5nc1snREJfTkFNRSddfTtjaGFyc2V0PXV0ZjhtYjQiOwogICAgICAgICRvcHRpb25zID0gWwogICAgICAgICAgICBQRE86OkFUVFJfRVJSTU9ERSA9PiBQRE86OkVSUk1PREVfRVhDRVBUSU9OLAogICAgICAgICAgICBQRE86OkFUVFJfREVGQVVMVF9GRVRDSF9NT0RFID0+IFBETzo6RkVUQ0hfQVNTT0MsCiAgICAgICAgICAgIFBETzo6QVRUUl9FTVVMQVRFX1BSRVBBUkVTID0+IGZhbHNlLAogICAgICAgIF07CiAgICAgICAgcmV0dXJuIG5ldyBQRE8oJGRzbiwgJGRiU2V0dGluZ3NbJ0RCX1VTRVInXSwgJGRiU2V0dGluZ3NbJ0RCX1BBU1MnXSwgJG9wdGlvbnMpOwogICAgfSBjYXRjaCAoUERPRXhjZXB0aW9uICRlKSB7CiAgICAgICAgZXJyb3JfbG9nKCJEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDogIiAuICRlLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KfQoKZnVuY3Rpb24gc3RvcmVMaWNlbnNlSW5mbygkZGIsICRpbnN0YWxsRGF0YSkgewogICAgdHJ5IHsKICAgICAgICAkc3RtdCA9ICRkYi0+cHJlcGFyZSgiSU5TRVJUIElOVE8gbGljZW5zZV9jb25maWcgCiAgICAgICAgICAgICh2ZXJpZnlfdHlwZSwgcHJvZHVjdF9pZCwgbGljZW5zZV9jb2RlLCBjbGllbnRfbmFtZSkgCiAgICAgICAgICAgIFZBTFVFUyAoJ25vbl9lbnZhdG8nLCAnQUU3MjBBMDInLCA6bGljZW5zZV9jb2RlLCA6Y2xpZW50X25hbWUpIik7CiAgICAgICAgICAgIAogICAgICAgIHJldHVybiAkc3RtdC0+ZXhlY3V0ZShbCiAgICAgICAgICAgICc6bGljZW5zZV9jb2RlJyA9PiAkaW5zdGFsbERhdGFbJ2xpY2Vuc2VfY29kZSddLAogICAgICAgICAgICAnOmNsaWVudF9uYW1lJyA9PiAkaW5zdGFsbERhdGFbJ25hbWUnXQogICAgICAgIF0pOwogICAgfSBjYXRjaCAoUERPRXhjZXB0aW9uICRlKSB7CiAgICAgICAgZXJyb3JfbG9nKCJGYWlsZWQgdG8gc3RvcmUgbGljZW5zZSBpbmZvOiAiIC4gJGUtPmdldE1lc3NhZ2UoKSk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQp9CgpmdW5jdGlvbiBjcmVhdGVBZG1pblVzZXIoJGRiLCAkdXNlcm5hbWUsICRlbWFpbCwgJHBhc3N3b3JkLCAkZnVsbE5hbWUpIHsKICAgIHRyeSB7CiAgICAgICAgJGhhc2hlZFBhc3N3b3JkID0gcGFzc3dvcmRfaGFzaCgkcGFzc3dvcmQsIFBBU1NXT1JEX0JDUllQVCk7CiAgICAgICAgJGNyZWF0ZWRBdCA9IGRhdGUoJ1ktbS1kIEg6aTpzJyk7CgogICAgICAgICRzdG10ID0gJGRiLT5wcmVwYXJlKCJJTlNFUlQgSU5UTyB1c2VycyAoCiAgICAgICAgICAgIHVzZXJuYW1lLCBlbWFpbCwgcGFzc3dvcmQsIGZ1bGxfbmFtZSwgdXNlcl90eXBlLCBzdGF0dXMsIGNyZWF0ZWRfYXQsIGVtYWlsX3ZlcmlmaWVkCiAgICAgICAgKSBWQUxVRVMgKD8sID8sID8sID8sICdhZG1pbicsICdhY3RpdmUnLCA/LCAxKSIpOwogICAgICAgIAogICAgICAgIHJldHVybiAkc3RtdC0+ZXhlY3V0ZShbJHVzZXJuYW1lLCAkZW1haWwsICRoYXNoZWRQYXNzd29yZCwgJGZ1bGxOYW1lLCAkY3JlYXRlZEF0XSk7CiAgICB9IGNhdGNoIChQRE9FeGNlcHRpb24gJGUpIHsKICAgICAgICBlcnJvcl9sb2coIkZhaWxlZCB0byBjcmVhdGUgYWRtaW4gdXNlcjogIiAuICRlLT5nZXRNZXNzYWdlKCkpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KfQoKZnVuY3Rpb24gZmluYWxpemVJbnN0YWxsYXRpb24oKSB7CiAgICAkbG9ja0ZpbGUgPSBCQVNFX1BBVEggLiAnL2luc3RhbGxlZC5sb2NrJzsKICAgIHJldHVybiBmaWxlX3B1dF9jb250ZW50cygkbG9ja0ZpbGUsICdWLVVDTCBpbnN0YWxsZWQgb24gJyAuIGRhdGUoJ1ktbS1kIEg6aTpzJykpICE9PSBmYWxzZTsKfQoKZnVuY3Rpb24gcmVtb3ZlSW5zdGFsbERpcmVjdG9yeSgpIHsKICAgIGlmICghZmlsZV9leGlzdHMoSU5TVEFMTF9ESVIpKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CgogICAgJGZpbGVzID0gbmV3IFJlY3Vyc2l2ZUl0ZXJhdG9ySXRlcmF0b3IoCiAgICAgICAgbmV3IFJlY3Vyc2l2ZURpcmVjdG9yeUl0ZXJhdG9yKElOU1RBTExfRElSLCBSZWN1cnNpdmVEaXJlY3RvcnlJdGVyYXRvcjo6U0tJUF9ET1RTKSwKICAgICAgICBSZWN1cnNpdmVJdGVyYXRvckl0ZXJhdG9yOjpDSElMRF9GSVJTVAogICAgKTsKCiAgICBmb3JlYWNoICgkZmlsZXMgYXMgJGZpbGVpbmZvKSB7CiAgICAgICAgJGFjdGlvbiA9ICgkZmlsZWluZm8tPmlzRGlyKCkgPyAncm1kaXInIDogJ3VubGluaycpOwogICAgICAgIGlmICghQCRhY3Rpb24oJGZpbGVpbmZvLT5nZXRSZWFsUGF0aCgpKSkgewogICAgICAgICAgICBlcnJvcl9sb2coIkZhaWxlZCB0byBkZWxldGUgZmlsZS9kaXJlY3Rvcnk6ICIgLiAkZmlsZWluZm8tPmdldFJlYWxQYXRoKCkpOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiBAcm1kaXIoSU5TVEFMTF9ESVIpOwp9CgppZiAoaXNzZXQoJF9HRVRbJ2NsZWFudXAnXSkgJiYgJF9HRVRbJ2NsZWFudXAnXSA9PSAxKSB7CiAgICBpZiAocmVtb3ZlSW5zdGFsbERpcmVjdG9yeSgpKSB7CiAgICAgICAgJHJlZGlyZWN0ID0gJF9TRVNTSU9OWydpbnN0YWxsX2RhdGEnXVsnZG9tYWluJ10gPz8gJy8nOwogICAgICAgIGhlYWRlcigiTG9jYXRpb246ICRyZWRpcmVjdCIpOwogICAgICAgIGV4aXQ7CiAgICB9IGVsc2UgewogICAgICAgIGVjaG8gIkZhaWxlZCB0byByZW1vdmUgaW5zdGFsbGF0aW9uIGRpcmVjdG9yeS4iOwogICAgICAgIGV4aXQ7CiAgICB9Cn0KPz4KCjwhRE9DVFlQRSBodG1sPgo8aHRtbCBsYW5nPSJlbiI+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgogICAgPHRpdGxlPlYtVUNMIEluc3RhbGxhdGlvbiBXaXphcmQ8L3RpdGxlPgogICAgPGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Qb3BwaW5zOndnaHRAMzAwOzQwMDs1MDA7NjAwJmRpc3BsYXk9c3dhcCIgcmVsPSJzdHlsZXNoZWV0Ij4KICAgIDxzdHlsZT4KICAgICAgICA6cm9vdCB7CiAgICAgICAgICAgIC0tcHJpbWFyeTogIzQzNjFlZTsKICAgICAgICAgICAgLS1wcmltYXJ5LWRhcms6ICMzYTU2ZDQ7CiAgICAgICAgICAgIC0tc3VjY2VzczogIzRjYzlmMDsKICAgICAgICAgICAgLS1kYW5nZXI6ICNmNzI1ODU7CiAgICAgICAgICAgIC0td2FybmluZzogI2Y4OTYxZTsKICAgICAgICAgICAgLS1saWdodDogI2Y4ZjlmYTsKICAgICAgICAgICAgLS1kYXJrOiAjMjEyNTI5OwogICAgICAgICAgICAtLWdyYXk6ICM2Yzc1N2Q7CiAgICAgICAgICAgIC0tYm9yZGVyLXJhZGl1czogOHB4OwogICAgICAgICAgICAtLWJveC1zaGFkb3c6IDAgNHB4IDE1cHggcmdiYSgwLCAwLCAwLCAwLjEpOwogICAgICAgICAgICAtLXRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7CiAgICAgICAgfQoKICAgICAgICAqIHsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgIH0KCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnUG9wcGlucycsIHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY3ZmI7CiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1kYXJrKTsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNjsKICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgIH0KCiAgICAgICAgLmNvbnRhaW5lciB7CiAgICAgICAgICAgIG1heC13aWR0aDogOTAwcHg7CiAgICAgICAgICAgIG1hcmdpbjogMnJlbSBhdXRvOwogICAgICAgICAgICBwYWRkaW5nOiAycmVtOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IHZhcigtLWJveC1zaGFkb3cpOwogICAgICAgIH0KCiAgICAgICAgaDEgewogICAgICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMS41cmVtOwogICAgICAgICAgICBmb250LXdlaWdodDogNjAwOwogICAgICAgIH0KCiAgICAgICAgaDIgewogICAgICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeSk7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgICAgICAgICAgZm9udC1zaXplOiAxLjVyZW07CiAgICAgICAgfQoKICAgICAgICBoMyB7CiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1kYXJrKTsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07CiAgICAgICAgfQoKICAgICAgICAuc3RlcCB7CiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7CiAgICAgICAgICAgIGFuaW1hdGlvbjogZmFkZUluIDAuNXMgZWFzZTsKICAgICAgICB9CgogICAgICAgIC5zdGVwLmFjdGl2ZSB7CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgIH0KCiAgICAgICAgLmZvcm0tZ3JvdXAgewogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07CiAgICAgICAgfQoKICAgICAgICBsYWJlbCB7CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7CiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1kYXJrKTsKICAgICAgICB9CgogICAgICAgIGlucHV0W3R5cGU9InRleHQiXSwKICAgICAgICBpbnB1dFt0eXBlPSJwYXNzd29yZCJdLAogICAgICAgIGlucHV0W3R5cGU9ImVtYWlsIl0gewogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgcGFkZGluZzogMC43NXJlbSAxcmVtOwogICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTsKICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtOwogICAgICAgICAgICB0cmFuc2l0aW9uOiB2YXIoLS10cmFuc2l0aW9uKTsKICAgICAgICB9CgogICAgICAgIGlucHV0W3R5cGU9InRleHQiXTpmb2N1cywKICAgICAgICBpbnB1dFt0eXBlPSJwYXNzd29yZCJdOmZvY3VzLAogICAgICAgIGlucHV0W3R5cGU9ImVtYWlsIl06Zm9jdXMgewogICAgICAgICAgICBvdXRsaW5lOiBub25lOwogICAgICAgICAgICBib3JkZXItY29sb3I6IHZhcigtLXByaW1hcnkpOwogICAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAzcHggcmdiYSg2NywgOTcsIDIzOCwgMC4yKTsKICAgICAgICB9CgogICAgICAgIC5idG4gewogICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICAgICAgICAgIHBhZGRpbmc6IDAuNzVyZW0gMS41cmVtOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5KTsKICAgICAgICAgICAgY29sb3I6IHdoaXRlOwogICAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMpOwogICAgICAgICAgICBmb250LXNpemU6IDFyZW07CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7CiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgdHJhbnNpdGlvbjogdmFyKC0tdHJhbnNpdGlvbik7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLmJ0bjpob3ZlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktZGFyayk7CiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTsKICAgICAgICB9CgogICAgICAgIC5idG4tc2Vjb25kYXJ5IHsKICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tZ3JheSk7CiAgICAgICAgfQoKICAgICAgICAuYnRuLXNlY29uZGFyeTpob3ZlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICM1YTYyNjg7CiAgICAgICAgfQoKICAgICAgICAuYnRuLXdhcm5pbmcgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS13YXJuaW5nKTsKICAgICAgICB9CgogICAgICAgIC5idG4td2FybmluZzpob3ZlciB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNlMDdkMGU7CiAgICAgICAgfQoKICAgICAgICAuZXJyb3IgewogICAgICAgICAgICBjb2xvcjogdmFyKC0tZGFuZ2VyKTsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMS41cmVtOwogICAgICAgICAgICBwYWRkaW5nOiAxcmVtOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI0NywgMzcsIDEzMywgMC4xKTsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7CiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgdmFyKC0tZGFuZ2VyKTsKICAgICAgICB9CgogICAgICAgIC53YXJuaW5nIHsKICAgICAgICAgICAgY29sb3I6IHZhcigtLXdhcm5pbmcpOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07CiAgICAgICAgICAgIHBhZGRpbmc6IDFyZW07CiAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjQ4LCAxNTAsIDMwLCAwLjEpOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTsKICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCB2YXIoLS13YXJuaW5nKTsKICAgICAgICB9CgogICAgICAgIC5zdGVwLWluZGljYXRvciB7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtOwogICAgICAgIH0KCiAgICAgICAgLnN0ZXAtZG90IHsKICAgICAgICAgICAgd2lkdGg6IDMwcHg7CiAgICAgICAgICAgIGhlaWdodDogMzBweDsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZTllY2VmOwogICAgICAgICAgICBjb2xvcjogdmFyKC0tZ3JheSk7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICAgICBtYXJnaW46IDAgMC41cmVtOwogICAgICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgfQoKICAgICAgICAuc3RlcC1kb3QuYWN0aXZlIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tcHJpbWFyeSk7CiAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICB9CgogICAgICAgIC5zdGVwLWRvdC5jb21wbGV0ZWQgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zdWNjZXNzKTsKICAgICAgICAgICAgY29sb3I6IHdoaXRlOwogICAgICAgIH0KCiAgICAgICAgLnN0ZXAtZG90Om5vdCg6bGFzdC1jaGlsZCk6OmFmdGVyIHsKICAgICAgICAgICAgY29udGVudDogJyc7CiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgdG9wOiA1MCU7CiAgICAgICAgICAgIGxlZnQ6IDEwMCU7CiAgICAgICAgICAgIHdpZHRoOiA0MHB4OwogICAgICAgICAgICBoZWlnaHQ6IDJweDsKICAgICAgICAgICAgYmFja2dyb3VuZDogI2U5ZWNlZjsKICAgICAgICB9CgogICAgICAgIC5zdGVwLWRvdC5jb21wbGV0ZWQ6bm90KDpsYXN0LWNoaWxkKTo6YWZ0ZXIgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zdWNjZXNzKTsKICAgICAgICB9CgogICAgICAgIC5mb3JtLWFjdGlvbnMgewogICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDJyZW07CiAgICAgICAgfQoKICAgICAgICBAa2V5ZnJhbWVzIGZhZGVJbiB7CiAgICAgICAgICAgIGZyb20gewogICAgICAgICAgICAgICAgb3BhY2l0eTogMDsKICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMHB4KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0byB7CiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxOwogICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAuc3VjY2Vzcy1tZXNzYWdlIHsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBwYWRkaW5nOiAycmVtOwogICAgICAgIH0KCiAgICAgICAgLnN1Y2Nlc3MtaWNvbiB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogNHJlbTsKICAgICAgICAgICAgY29sb3I6IHZhcigtLXN1Y2Nlc3MpOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtOwogICAgICAgIH0KCiAgICAgICAgLnN1Y2Nlc3MtbWVzc2FnZSBoMiB7CiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1zdWNjZXNzKTsKICAgICAgICB9CgogICAgICAgIC5sb2FkaW5nIHsKICAgICAgICAgICAgZGlzcGxheTogbm9uZTsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBtYXJnaW46IDIwcHggMDsKICAgICAgICB9CgogICAgICAgIC5sb2FkaW5nLXNwaW5uZXIgewogICAgICAgICAgICBib3JkZXI6IDRweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7CiAgICAgICAgICAgIHdpZHRoOiAzNnB4OwogICAgICAgICAgICBoZWlnaHQ6IDM2cHg7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgICAgICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IHZhcigtLXByaW1hcnkpOwogICAgICAgICAgICBhbmltYXRpb246IHNwaW4gMXMgbGluZWFyIGluZmluaXRlOwogICAgICAgICAgICBtYXJnaW46IDAgYXV0byAxMHB4OwogICAgICAgIH0KCiAgICAgICAgQGtleWZyYW1lcyBzcGluIHsKICAgICAgICAgICAgMCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfQogICAgICAgICAgICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfQogICAgICAgIH0KCiAgICAgICAgLnJlcXVpcmVtZW50cy10YWJsZSB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07CiAgICAgICAgfQoKICAgICAgICAucmVxdWlyZW1lbnRzLXRhYmxlIHRoLCAKICAgICAgICAucmVxdWlyZW1lbnRzLXRhYmxlIHRkIHsKICAgICAgICAgICAgcGFkZGluZzogMC43NXJlbTsKICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWU7CiAgICAgICAgfQoKICAgICAgICAucmVxdWlyZW1lbnRzLXRhYmxlIHRoIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgICAgICB9CgogICAgICAgIC5yZXF1aXJlbWVudHMtdGFibGUgdHIucGFzc2VkIHRkOmZpcnN0LWNoaWxkIHsKICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCB2YXIoLS1zdWNjZXNzKTsKICAgICAgICB9CgogICAgICAgIC5yZXF1aXJlbWVudHMtdGFibGUgdHIuZmFpbGVkIHRkOmZpcnN0LWNoaWxkIHsKICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCB2YXIoLS1kYW5nZXIpOwogICAgICAgIH0KCiAgICAgICAgLnJlcXVpcmVtZW50cy10YWJsZSB0ci53YXJuaW5nIHRkOmZpcnN0LWNoaWxkIHsKICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCB2YXIoLS13YXJuaW5nKTsKICAgICAgICB9CgogICAgICAgIC5zdGF0dXMtcGFzc2VkIHsKICAgICAgICAgICAgY29sb3I6IHZhcigtLXN1Y2Nlc3MpOwogICAgICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgIH0KCiAgICAgICAgLnN0YXR1cy1mYWlsZWQgewogICAgICAgICAgICBjb2xvcjogdmFyKC0tZGFuZ2VyKTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgICAgICB9CgogICAgICAgIC5zdGF0dXMtd2FybmluZyB7CiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS13YXJuaW5nKTsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgICAgICB9CgogICAgICAgIC5ub3RlIHsKICAgICAgICAgICAgZm9udC1zaXplOiAwLjlyZW07CiAgICAgICAgICAgIGNvbG9yOiB2YXIoLS1ncmF5KTsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMC41cmVtOwogICAgICAgIH0KCiAgICAgICAgLnNlcnZlci1pbmZvIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogI2Y4ZjlmYTsKICAgICAgICAgICAgcGFkZGluZzogMXJlbTsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbTsKICAgICAgICB9CgogICAgICAgIC5zZXJ2ZXItaW5mbyBwIHsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41cmVtOwogICAgICAgIH0KICAgIDwvc3R5bGU+CiAgICA8c2NyaXB0PgogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgY29uc3QgbGljZW5zZUZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGljZW5zZS1mb3JtJyk7CiAgICAgICAgICAgIGNvbnN0IGxvYWRpbmdJbmRpY2F0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGljZW5zZS1sb2FkaW5nJyk7CgogICAgICAgICAgICBpZiAobGljZW5zZUZvcm0pIHsKICAgICAgICAgICAgICAgIGxpY2Vuc2VGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGxvYWRpbmdJbmRpY2F0b3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpY2Vuc2UtZm9ybSAuYnRuJykuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBSZWNoZWNrIHN5c3RlbSByZXF1aXJlbWVudHMKICAgICAgICAgICAgY29uc3QgcmVjaGVja0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWNoZWNrLWJ0bicpOwogICAgICAgICAgICBpZiAocmVjaGVja0J0bikgewogICAgICAgICAgICAgICAgcmVjaGVja0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIDwvc2NyaXB0Pgo8L2hlYWQ+Cjxib2R5PgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8aDE+Vi1VQ0wgSW5zdGFsbGF0aW9uIFdpemFyZDwvaDE+CgogICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtaW5kaWNhdG9yIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcC1kb3QgPD89ICRzdGVwID49IDEgPyAnYWN0aXZlJyA6ICcnID8+IDw/PSAkc3RlcCA+IDEgPyAnY29tcGxldGVkJyA6ICcnID8+Ij4xPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtZG90IDw/PSAkc3RlcCA+PSAyID8gJ2FjdGl2ZScgOiAnJyA/PiA8Pz0gJHN0ZXAgPiAyID8gJ2NvbXBsZXRlZCcgOiAnJyA/PiI+MjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwLWRvdCA8Pz0gJHN0ZXAgPj0gMyA/ICdhY3RpdmUnIDogJycgPz4gPD89ICRzdGVwID4gMyA/ICdjb21wbGV0ZWQnIDogJycgPz4iPjM8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3RlcC1kb3QgPD89ICRzdGVwID49IDQgPyAnYWN0aXZlJyA6ICcnID8+IDw/PSAkc3RlcCA+IDQgPyAnY29tcGxldGVkJyA6ICcnID8+Ij40PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InN0ZXAtZG90IDw/PSAkc3RlcCA+PSA1ID8gJ2FjdGl2ZScgOiAnJyA/PiA8Pz0gJHN0ZXAgPiA1ID8gJ2NvbXBsZXRlZCcgOiAnJyA/PiI+NTwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwLWRvdCA8Pz0gJHN0ZXAgPj0gNiA/ICdhY3RpdmUnIDogJycgPz4iPjY8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPD9waHAgaWYgKGlzc2V0KCRlcnJvcikpOiA/PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJlcnJvciI+PD89IGh0bWxzcGVjaWFsY2hhcnMoJGVycm9yKSA/PjwvZGl2PgogICAgICAgIDw/cGhwIGVuZGlmOyA/PgoKICAgICAgICA8IS0tIFN0ZXAgMTogU3lzdGVtIFJlcXVpcmVtZW50cyBDaGVjayAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIDw/PSAkc3RlcCA9PT0gMSA/ICdhY3RpdmUnIDogJycgPz4iPgogICAgICAgICAgICA8aDI+U3lzdGVtIFJlcXVpcmVtZW50cyBDaGVjazwvaDI+CiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzZXJ2ZXItaW5mbyI+CiAgICAgICAgICAgICAgICA8cD48c3Ryb25nPlNlcnZlciBTb2Z0d2FyZTo8L3N0cm9uZz4gPD89IGh0bWxzcGVjaWFsY2hhcnMoJF9TRVJWRVJbJ1NFUlZFUl9TT0ZUV0FSRSddID8/ICdVbmtub3duJykgPz48L3A+CiAgICAgICAgICAgICAgICA8cD48c3Ryb25nPlBIUCBWZXJzaW9uOjwvc3Ryb25nPiA8Pz0gaHRtbHNwZWNpYWxjaGFycyhQSFBfVkVSU0lPTikgPz48L3A+CiAgICAgICAgICAgICAgICA8cD48c3Ryb25nPk9wZXJhdGluZyBTeXN0ZW06PC9zdHJvbmc+IDw/PSBodG1sc3BlY2lhbGNoYXJzKFBIUF9PUykgPz48L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPD9waHAgCiAgICAgICAgICAgICRyZXF1aXJlbWVudHMgPSBjaGVja1N5c3RlbVJlcXVpcmVtZW50cygpOwogICAgICAgICAgICAkbGljZW5zZVNlcnZlckNoZWNrID0gY2hlY2tMaWNlbnNlU2VydmVyQ29ubmVjdGlvbigpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gQWRkIGxpY2Vuc2Ugc2VydmVyIGNoZWNrIHRvIHJlcXVpcmVtZW50cwogICAgICAgICAgICAkcmVxdWlyZW1lbnRzWydsaWNlbnNlX3NlcnZlciddID0gWwogICAgICAgICAgICAgICAgJ3JlcXVpcmVkJyA9PiAnQ29ubmVjdGlvbiBzdWNjZXNzZnVsJywKICAgICAgICAgICAgICAgICdjdXJyZW50JyA9PiAkbGljZW5zZVNlcnZlckNoZWNrWydtZXNzYWdlJ10sCiAgICAgICAgICAgICAgICAncGFzc2VkJyA9PiAkbGljZW5zZVNlcnZlckNoZWNrWydwYXNzZWQnXSwKICAgICAgICAgICAgICAgICdkZXRhaWxzJyA9PiAkbGljZW5zZVNlcnZlckNoZWNrWydkZXRhaWxzJ10KICAgICAgICAgICAgXTsKICAgICAgICAgICAgCiAgICAgICAgICAgICRhbGxQYXNzZWQgPSB0cnVlOwogICAgICAgICAgICAkaGFzV2FybmluZ3MgPSBmYWxzZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvcmVhY2ggKCRyZXF1aXJlbWVudHMgYXMgJHJlcSkgewogICAgICAgICAgICAgICAgaWYgKCEkcmVxWydwYXNzZWQnXSkgewogICAgICAgICAgICAgICAgICAgICRhbGxQYXNzZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChpc3NldCgkcmVxWyd3YXJuaW5nJ10pICYmICRyZXFbJ3dhcm5pbmcnXSkgewogICAgICAgICAgICAgICAgICAgICRoYXNXYXJuaW5ncyA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgkaGFzV2FybmluZ3MgJiYgJGFsbFBhc3NlZCk6ID8+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3YXJuaW5nIj4KICAgICAgICAgICAgICAgICAgICBZb3VyIHNlcnZlciBtZWV0cyB0aGUgbWluaW11bSByZXF1aXJlbWVudHMsIGJ1dCBzb21lIHNldHRpbmdzIGNvdWxkIGJlIGltcHJvdmVkIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8dGFibGUgY2xhc3M9InJlcXVpcmVtZW50cy10YWJsZSI+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+UmVxdWlyZW1lbnQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+UmVxdWlyZWQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q3VycmVudDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TdGF0dXM8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDw/cGhwIGZvcmVhY2ggKCRyZXF1aXJlbWVudHMgYXMgJGtleSA9PiAkcmVxKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSI8Pz0gJHJlcVsncGFzc2VkJ10gPyAncGFzc2VkJyA6ICdmYWlsZWQnID8+Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gaHRtbHNwZWNpYWxjaGFycyh1Y3dvcmRzKHN0cl9yZXBsYWNlKCdfJywgJyAnLCAka2V5KSkpID8+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48Pz0gaHRtbHNwZWNpYWxjaGFycygkcmVxWydyZXF1aXJlZCddKSA/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PD89IGh0bWxzcGVjaWFsY2hhcnMoJHJlcVsnY3VycmVudCddKSA/PjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKCRyZXFbJ3Bhc3NlZCddKTogPz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InN0YXR1cy1wYXNzZWQiPlBhc3NlZDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbHNlOiA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ic3RhdHVzLWZhaWxlZCI+RmFpbGVkPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwIGVuZGlmOyA/PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAgaWYgKGlzc2V0KCRyZXFbJ2RldGFpbHMnXSkpOiA/PgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iNCIgc3R5bGU9InBhZGRpbmctdG9wOiAwOyBwYWRkaW5nLWJvdHRvbTogMXJlbTsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibm90ZSI+PD89IGh0bWxzcGVjaWFsY2hhcnMoJHJlcVsnZGV0YWlscyddKSA/Pjwvc21hbGw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgICAgICAgICA8P3BocCBlbmRmb3JlYWNoOyA/PgogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgCiAgICAgICAgICAgIDw/cGhwIGlmICghJGFsbFBhc3NlZCk6ID8+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlcnJvciI+CiAgICAgICAgICAgICAgICAgICAgWW91ciBzZXJ2ZXIgZG9lcyBub3QgbWVldCB0aGUgbWluaW11bSByZXF1aXJlbWVudHMuIFBsZWFzZSBmaXggdGhlIGlzc3VlcyBtYXJrZWQgYXMgIkZhaWxlZCIgYmVmb3JlIHByb2NlZWRpbmcuCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPD9waHAgZW5kaWY7ID8+CiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWFjdGlvbnMiPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0icmVjaGVjay1idG4iIGNsYXNzPSJidG4gYnRuLXdhcm5pbmciPlJlY2hlY2sgUmVxdWlyZW1lbnRzPC9idXR0b24+CiAgICAgICAgICAgICAgICA8P3BocCBpZiAoJGFsbFBhc3NlZCk6ID8+CiAgICAgICAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJQT1NUIiBzdHlsZT0iZGlzcGxheTogaW5saW5lOyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIj5Db250aW51ZSB0byBOZXh0IFN0ZXA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICA8P3BocCBlbHNlOiA/PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biIgZGlzYWJsZWQ+Q29udGludWUgdG8gTmV4dCBTdGVwPC9idXR0b24+CiAgICAgICAgICAgICAgICA8P3BocCBlbmRpZjsgPz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gU3RlcCAyOiBMaWNlbnNlIFZlcmlmaWNhdGlvbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIDw/PSAkc3RlcCA9PT0gMiA/ICdhY3RpdmUnIDogJycgPz4iPgogICAgICAgICAgICA8aDI+TGljZW5zZSBWZXJpZmljYXRpb248L2gyPgogICAgICAgICAgICA8Zm9ybSBtZXRob2Q9IlBPU1QiIGlkPSJsaWNlbnNlLWZvcm0iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZG9tYWluIj5Eb21haW48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iZG9tYWluIiBuYW1lPSJkb21haW4iIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkX1NFU1NJT05bJ2luc3RhbGxfZGF0YSddWydkb21haW4nXSA/PyAnaHR0cHM6Ly8nIC4gJF9TRVJWRVJbJ0hUVFBfSE9TVCddKSA/PiIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJuYW1lIj5Zb3VyIE5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0ibmFtZSIgbmFtZT0ibmFtZSIgdmFsdWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRfU0VTU0lPTlsnaW5zdGFsbF9kYXRhJ11bJ25hbWUnXSA/PyAnJykgPz4iIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ibGljZW5zZV9jb2RlIj5MaWNlbnNlIENvZGU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0ibGljZW5zZV9jb2RlIiBuYW1lPSJsaWNlbnNlX2NvZGUiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkX1NFU1NJT05bJ2luc3RhbGxfZGF0YSddWydsaWNlbnNlX2NvZGUnXSA/PyAnJykgPz4iIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBpZD0ibGljZW5zZS1sb2FkaW5nIiBjbGFzcz0ibG9hZGluZyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGluZy1zcGlubmVyIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8cD5WZXJpZnlpbmcgbGljZW5zZS4uLiBQbGVhc2Ugd2FpdC48L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWFjdGlvbnMiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ij9zdGVwPTEiIGNsYXNzPSJidG4gYnRuLXNlY29uZGFyeSI+QmFjazwvYT4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ0biI+VmVyaWZ5ICYgQ29udGludWU8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gU3RlcCAzOiBEYXRhYmFzZSBTZXR0aW5ncyAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIDw/PSAkc3RlcCA9PT0gMyA/ICdhY3RpdmUnIDogJycgPz4iPgogICAgICAgICAgICA8aDI+RGF0YWJhc2UgQ29uZmlndXJhdGlvbjwvaDI+CiAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJEQl9IT1NUIj5EYXRhYmFzZSBIb3N0PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9IkRCX0hPU1QiIG5hbWU9IkRCX0hPU1QiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkX1NFU1NJT05bJ2RiX3NldHRpbmdzJ11bJ0RCX0hPU1QnXSA/PyAnbG9jYWxob3N0JykgPz4iIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iREJfVVNFUiI+RGF0YWJhc2UgVXNlcm5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iREJfVVNFUiIgbmFtZT0iREJfVVNFUiIgdmFsdWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRfU0VTU0lPTlsnZGJfc2V0dGluZ3MnXVsnREJfVVNFUiddID8/ICcnKSA/PiIgcmVxdWlyZWQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJEQl9QQVNTIj5EYXRhYmFzZSBQYXNzd29yZDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBpZD0iREJfUEFTUyIgbmFtZT0iREJfUEFTUyIgdmFsdWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRfU0VTU0lPTlsnZGJfc2V0dGluZ3MnXVsnREJfUEFTUyddID8/ICcnKSA/PiI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJEQl9OQU1FIj5EYXRhYmFzZSBOYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9IkRCX05BTUUiIG5hbWU9IkRCX05BTUUiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkX1NFU1NJT05bJ2RiX3NldHRpbmdzJ11bJ0RCX05BTUUnXSA/PyAnJykgPz4iIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1hY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/c3RlcD0yIiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkiPkJhY2s8L2E+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4iPlNhdmUgJiBDb250aW51ZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBTdGVwIDQ6IEVtYWlsIFNldHRpbmdzIChPcHRpb25hbCkgLS0+CiAgICAgICAgPGRpdiBjbGFzcz0ic3RlcCA8Pz0gJHN0ZXAgPT09IDQgPyAnYWN0aXZlJyA6ICcnID8+Ij4KICAgICAgICAgICAgPGgyPkVtYWlsIENvbmZpZ3VyYXRpb24gKE9wdGlvbmFsKTwvaDI+CiAgICAgICAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJNQUlMX0hPU1QiPk1haWwgSG9zdDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJNQUlMX0hPU1QiIG5hbWU9Ik1BSUxfSE9TVCIgdmFsdWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRfU0VTU0lPTlsnbWFpbF9zZXR0aW5ncyddWydNQUlMX0hPU1QnXSA/PyAnJykgPz4iPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iTUFJTF9QT1JUIj5NYWlsIFBvcnQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iTUFJTF9QT1JUIiBuYW1lPSJNQUlMX1BPUlQiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkX1NFU1NJT05bJ21haWxfc2V0dGluZ3MnXVsnTUFJTF9QT1JUJ10gPz8gJzQ2NScpID8+Ij4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Ik1BSUxfVVNFUk5BTUUiPk1haWwgVXNlcm5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iTUFJTF9VU0VSTkFNRSIgbmFtZT0iTUFJTF9VU0VSTkFNRSIgdmFsdWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRfU0VTU0lPTlsnbWFpbF9zZXR0aW5ncyddWydNQUlMX1VTRVJOQU1FJ10gPz8gJycpID8+Ij4KICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9Ik1BSUxfUEFTU1dPUkQiPk1haWwgUGFzc3dvcmQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9Ik1BSUxfUEFTU1dPUkQiIG5hbWU9Ik1BSUxfUEFTU1dPUkQiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkX1NFU1NJT05bJ21haWxfc2V0dGluZ3MnXVsnTUFJTF9QQVNTV09SRCddID8/ICcnKSA/PiI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJNQUlMX0VOQ1JZUFRJT04iPk1haWwgRW5jcnlwdGlvbjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJNQUlMX0VOQ1JZUFRJT04iIG5hbWU9Ik1BSUxfRU5DUllQVElPTiIgdmFsdWU9Ijw/PSBodG1sc3BlY2lhbGNoYXJzKCRfU0VTU0lPTlsnbWFpbF9zZXR0aW5ncyddWydNQUlMX0VOQ1JZUFRJT04nXSA/PyAnc3NsJykgPz4iPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iTUFJTF9GUk9NX0FERFJFU1MiPkZyb20gQWRkcmVzczwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJNQUlMX0ZST01fQUREUkVTUyIgbmFtZT0iTUFJTF9GUk9NX0FERFJFU1MiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkX1NFU1NJT05bJ21haWxfc2V0dGluZ3MnXVsnTUFJTF9GUk9NX0FERFJFU1MnXSA/PyAnJykgPz4iPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iTUFJTF9GUk9NX05BTUUiPkZyb20gTmFtZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJNQUlMX0ZST01fTkFNRSIgbmFtZT0iTUFJTF9GUk9NX05BTUUiIHZhbHVlPSI8Pz0gaHRtbHNwZWNpYWxjaGFycygkX1NFU1NJT05bJ21haWxfc2V0dGluZ3MnXVsnTUFJTF9GUk9NX05BTUUnXSA/PyAnJykgPz4iPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1hY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/c3RlcD0zIiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkiPkJhY2s8L2E+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4iPlNhdmUgJiBDb250aW51ZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBTdGVwIDU6IEFkbWluIFVzZXIgQ3JlYXRpb24gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0ic3RlcCA8Pz0gJHN0ZXAgPT09IDUgPyAnYWN0aXZlJyA6ICcnID8+Ij4KICAgICAgICAgICAgPGgyPkNyZWF0ZSBBZG1pbiBBY2NvdW50PC9oMj4KICAgICAgICAgICAgPGZvcm0gbWV0aG9kPSJQT1NUIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9InVzZXJuYW1lIj5Vc2VybmFtZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJ1c2VybmFtZSIgbmFtZT0idXNlcm5hbWUiIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZW1haWwiPkVtYWlsPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iZW1haWwiIGlkPSJlbWFpbCIgbmFtZT0iZW1haWwiIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0icGFzc3dvcmQiPlBhc3N3b3JkPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGlkPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iZnVsbF9uYW1lIj5GdWxsIE5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iZnVsbF9uYW1lIiBuYW1lPSJmdWxsX25hbWUiIHJlcXVpcmVkPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1hY3Rpb25zIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSI/c3RlcD00IiBjbGFzcz0iYnRuIGJ0bi1zZWNvbmRhcnkiPkJhY2s8L2E+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJidG4iPkNvbXBsZXRlIEluc3RhbGxhdGlvbjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBTdGVwIDY6IEluc3RhbGxhdGlvbiBDb21wbGV0ZSAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJzdGVwIDw/PSAkc3RlcCA9PT0gNiA/ICdhY3RpdmUnIDogJycgPz4iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzdWNjZXNzLW1lc3NhZ2UiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VjY2Vzcy1pY29uIj7inJM8L2Rpdj4KICAgICAgICAgICAgICAgIDxoMj5JbnN0YWxsYXRpb24gQ29tcGxldGUhPC9oMj4KICAgICAgICAgICAgICAgIDxwPlYtVUNMIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBpbnN0YWxsZWQuPC9wPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iP2NsZWFudXA9MSIgY2xhc3M9ImJ0biI+VmlzaXQgWW91ciBTaXRlPC9hPgogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPHA+PHN0cm9uZz5JbXBvcnRhbnQ6PC9zdHJvbmc+IFRoZSBpbnN0YWxsYXRpb24gZGlyZWN0b3J5IHdpbGwgbm93IGJlIHJlbW92ZWQuPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2JvZHk+CjwvaHRtbD4=');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>