<?php
$code = base64_decode('<?php
session_start();
 // Include your database connection and other necessary files
require_once __DIR__ . '/config/database.php';
require_once __DIR__ .  '/includes/email.php'; // Your email sending functions

// Initialize variables
$email_username = $password = "";
$error = "";
$login_attempts = $_SESSION['login_attempts'] ?? 0;
$last_attempt = $_SESSION['last_attempt'] ?? 0;
$lockout_time = 300; // 5 minutes in seconds

// Check if user is already logged in
if (isset($_SESSION['logged_in']) && $_SESSION['logged_in'] === true) {
    if ($_SESSION['user_type'] === 'retailer') {
        header("Location: admin/panel/index.php");
        exit();
    } else {
        // If logged in but not a retailer, redirect to appropriate page or logout
        session_destroy();
        header("Location: index.php");
        exit();
    }
}

// Function to generate OTP
function generateOTP($length = 6) {
    $digits = '0123456789';
    $otp = '';
    for ($i = 0; $i < $length; $i++) {
        $otp .= $digits[rand(0, strlen($digits) - 1)];
    }
    return $otp;
}

// Function to get client IP address
function getClientIP() {
    $ip_keys = ['HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR'];
    foreach ($ip_keys as $key) {
        if (array_key_exists($key, $_SERVER) === true) {
            foreach (explode(',', $_SERVER[$key]) as $ip) {
                $ip = trim($ip);
                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false) {
                    return $ip;
                }
            }
        }
    }
    return $_SERVER['REMOTE_ADDR'] ?? 'UNKNOWN';
}

function getLocationFromIP($ip) {
    $location = 'Unknown';

    $response = @file_get_contents("http://ip-api.com/json/{$ip}?fields=city,regionName,country");
    if ($response) {
        $data = json_decode($response, true);
        if (isset($data['city'], $data['regionName'], $data['country'])) {
            $location = "{$data['city']}, {$data['regionName']}, {$data['country']}";
        } elseif (isset($data['country'])) {
            $location = $data['country'];
        }
    }

    return $location;
}

// Function to record login attempts
function recordLogin($pdo, $user_id, $success) {
    $current_ip = getClientIP();
    $current_device = $_SERVER['HTTP_USER_AGENT'];
    $location = getLocationFromIP($current_ip); // Get location from IP

    $historyQuery = "INSERT INTO login_history 
                    (user_id, browser, device, ip_address, location, login_time, success) 
                    VALUES 
                    (?, ?, ?, ?, ?, NOW(), ?)";
    $historyStmt = $pdo->prepare($historyQuery);
    $historyStmt->execute([
        $user_id,
        $current_device,
        $current_device,
        $current_ip,
        $location,
        $success ? 1 : 0
    ]);
}

// Function to complete login process
function completeLogin($pdo, $user) {
    // Verify this is a retailer before proceeding
    if ($user['user_type'] !== 'retailer') {
        $error = "This login page is for retailers only";
        return false;
    }

    // Set session variables
    $_SESSION['user_id'] = $user['id'];
    $_SESSION['username'] = $user['username'];
    $_SESSION['email'] = $user['email'];
    $_SESSION['user_type'] = $user['user_type'];
    $_SESSION['full_name'] = $user['full_name'];
    $_SESSION['logged_in'] = true;
    $_SESSION['two_factor_verified'] = true;
    
    // Store distributor ID
    if (!empty($user['distributor_id'])) {
        $_SESSION['distributor_id'] = $user['distributor_id'];
    }
    
$istTime = (new DateTime('now', new DateTimeZone('Asia/Kolkata')))->format('Y-m-d H:i:s');

$updateQuery = "UPDATE users SET last_login = ? WHERE id = ?";
$updateStmt = $pdo->prepare($updateQuery);
$updateStmt->execute([$istTime, $user['id']]);
    
    // Record successful login
    recordLogin($pdo, $user['id'], true);
    
    $_SESSION['login_attempts'] = 0;
    $_SESSION['last_attempt'] = 0;
    
    // Generate CSRF token
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    
    // Set success message in session and redirect
    $_SESSION['login_success'] = "Login successful! Welcome back, " . htmlspecialchars($user['full_name']) . "!";
    
    header("Location: admin/panel/index.php");
    exit();
}

// Process form submission
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Check if this is a 2FA verification
    if (isset($_POST['verify_2fa'])) {
        $user_id = $_SESSION['2fa_user_id'] ?? 0;
        $code = $_POST['otp_code'] ?? '';
        
        if ($user_id && $code) {
            // Verify OTP from session
            if (isset($_SESSION['otp_code']) && $_SESSION['otp_code'] == $code && 
                isset($_SESSION['otp_expiry']) && time() < $_SESSION['otp_expiry']) {
                
                // OTP verified, complete login
                unset($_SESSION['otp_code']);
                unset($_SESSION['otp_expiry']);
                unset($_SESSION['2fa_user_id']);
                
                // Get user data again
                $stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
                $stmt->execute([$user_id]);
                $user = $stmt->fetch();
                
                completeLogin($pdo, $user);
            } else {
                $error = "Invalid or expired verification code. Please try again.";
            }
        }
    } 
    // Normal login attempt
    else {
        // Check if account is locked
        if ($login_attempts >= 5 && (time() - $last_attempt) < $lockout_time) {
            $remaining_time = $lockout_time - (time() - $last_attempt);
            $error = "Too many failed attempts. Please try again in " . ceil($remaining_time / 60) . " minutes.";
        } else {
            // Reset attempts if lockout time has passed
            if ((time() - $last_attempt) >= $lockout_time) {
                $login_attempts = 0;
                $_SESSION['login_attempts'] = 0;
            }

            // Sanitize inputs
            $email_username = trim($_POST["email-username"]);
            $password = trim($_POST["password"]);
            
            // Validate inputs
            if (empty($email_username) || empty($password)) {
                $error = "Please enter both email/username and password.";
            } else {
                // Prepare SQL to fetch user - ONLY RETAILERS
                $query = "SELECT id, username, email, password, user_type, full_name, status, distributor_id, two_factor_enabled
                          FROM users 
                          WHERE (email = :email OR username = :email)
                          AND user_type = 'retailer'";
                
                $stmt = $pdo->prepare($query);
                $stmt->bindParam(':email', $email_username);
                $stmt->execute();
                
                if ($stmt->rowCount() == 1) {
                    $user = $stmt->fetch(PDO::FETCH_ASSOC);
                    
                    // Check account status
                    if ($user['status'] != 'active') {
                        $error = "Your account is inactive. Please contact support.";
                    }
                    // Verify password
                    elseif (password_verify($password, $user['password'])) {
                        // Password is correct, check if 2FA is enabled
                        if ($user['two_factor_enabled']) {
                            // Generate OTP
                            $otp = generateOTP();
                            $otp_expiry = time() + 300; // 5 minutes expiry
                            
                            // Store in session
                            $_SESSION['2fa_user_id'] = $user['id'];
                            $_SESSION['otp_code'] = $otp;
                            $_SESSION['otp_expiry'] = $otp_expiry;
                            $_SESSION['2fa_pending'] = true;
                            
                            // Send OTP via email
                            $subject = "Your Verification Code";
                            $message = "Your verification code is: $otp\n\nThis code will expire in 5 minutes.";
                            sendEmail($user['email'], $subject, $message);
                            
                            // Show 2FA modal (handled in JavaScript)
                            $_SESSION['show_2fa_modal'] = true;
                        } else {
                            // No 2FA required, proceed with login
                            completeLogin($pdo, $user);
                        }
                    } else {
                        // Increment failed attempts
                        $login_attempts++;
                        $_SESSION['login_attempts'] = $login_attempts;
                        $_SESSION['last_attempt'] = time();
                        
                        // Record failed login attempt
                        recordLogin($pdo, $user['id'], false);
                        
                        $error = "Invalid password. Attempts remaining: " . (5 - $login_attempts);
                    }
                } else {
                    $error = "No retailer account found with that email/username.";
                }
            }
        }
    }
}
?>

<!doctype html>
<html lang="en" class="layout-wide customizer-hide" dir="ltr" data-skin="default" data-assets-path="assets/" data-template="vertical-menu-template" data-bs-theme="light">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />
    <title>Retailer Login | Work Portal</title>
    <meta name="description" content="" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="assets/img/favicon/favicon.ico" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&ampdisplay=swap" rel="stylesheet" />
    
    <!-- Icons -->
    <link rel="stylesheet" href="assets/vendor/fonts/iconify-icons.css" />
    
    <!-- Core CSS -->
    <link rel="stylesheet" href="assets/vendor/libs/node-waves/node-waves.css" />
    <link rel="stylesheet" href="assets/vendor/libs/pickr/pickr-themes.css" />
    <link rel="stylesheet" href="assets/vendor/css/core.css" />
    <link rel="stylesheet" href="assets/css/demo.css" />
    
    <!-- Vendor CSS -->
    <link rel="stylesheet" href="assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.css" />
    <link rel="stylesheet" href="assets/vendor/libs/sweetalert2/sweetalert2.css" />
    <link rel="stylesheet" href="assets/vendor/libs/@form-validation/form-validation.css" />
    
    <!-- Page CSS -->
    <link rel="stylesheet" href="assets/vendor/css/pages/page-auth.css" />
    
    <!-- Helpers -->
    <script src="assets/vendor/js/helpers.js"></script>
    <script src="assets/vendor/js/template-customizer.js"></script>
    <script src="assets/js/config.js"></script>
    
    <style>
        .lockout-message { color: #ff5b5b; font-weight: 500; }
        .login-container { max-width: 450px; margin: 0 auto; }
        #otpModal .modal-content {
            border-radius: 0.5rem;
            border: none;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }
        #otpModal .modal-header {
            border-bottom: none;
            padding-bottom: 0;
        }
        #otpModal .modal-body {
            padding: 2rem;
        }
        #otpModal .modal-footer {
            border-top: none;
            justify-content: center;
        }
        .otp-input {
            letter-spacing: 2rem;
            font-size: 2rem;
            text-align: center;
            padding-left: 1.5rem;
        }
        .btn-resend {
            color: #696cff;
            background: none;
            border: none;
            cursor: pointer;
        }
        .btn-resend:hover {
            text-decoration: underline;
        }
        .login-notice {
            text-align: center;
            margin-top: 1rem;
            font-size: 0.875rem;
            color: #6c757d;
        }
    </style>
</head>

<body>
    <!-- OTP Verification Modal -->
    <div class="modal fade" id="otpModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Email Verification</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form method="POST" id="otpForm">
                    <div class="modal-body text-center">
                        <div class="mb-4">
                            <i class="icon-base ti tabler-mail-check icon-40px text-primary mb-3"></i>
                            <h4>Enter Verification Code</h4>
                            <p>We've sent a 6-digit code to your email address</p>
                        </div>
                        
                        <div class="mb-4">
                            <input type="text" name="otp_code" id="otpCode" class="form-control otp-input" maxlength="6" placeholder="000000" required autofocus>
                        </div>
                        
                        <input type="hidden" name="verify_2fa" value="1">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn-resend" id="resendOtp">Resend Code</button>
                        <button type="submit" class="btn btn-primary w-100">Verify & Continue</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="container-xxl">
        <div class="authentication-wrapper authentication-basic container-p-y">
            <div class="authentication-inner py-6 login-container">
                <div class="card">
                    <div class="card-body">
                        <!-- Logo -->
                        <div class="app-brand justify-content-center mb-6">
                            <a href="index.html" class="app-brand-link">
                                <span class="app-brand-logo demo">
                                    <span class="text-primary">
                                        <svg width="32" height="22" viewBox="0 0 32 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M0.00172773 0V6.85398C0.00172773 6.85398 -0.133178 9.01207 1.98092 10.8388L13.6912 21.9964L19.7809 21.9181L18.8042 9.88248L16.4951 7.17289L9.23799 0H0.00172773Z" fill="currentColor" />
                                            <path opacity="0.06" fill-rule="evenodd" clip-rule="evenodd" d="M7.69824 16.4364L12.5199 3.23696L16.5541 7.25596L7.69824 16.4364Z" fill="#161616" />
                                            <path opacity="0.06" fill-rule="evenodd" clip-rule="evenodd" d="M8.07751 15.9175L13.9419 4.63989L16.5849 7.28475L8.07751 15.9175Z" fill="#161616" />
                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M7.77295 16.3566L23.6563 0H32V6.88383C32 6.88383 31.8262 9.17836 30.6591 10.4057L19.7824 22H13.6938L7.77295 16.3566Z" fill="currentColor" />
                                        </svg>
                                    </span>
                                </span>
                                <span class="app-brand-text demo text-heading fw-bold">Retailer Portal</span>
                            </a>
                        </div>
                        <!-- /Logo -->
                        
                        <h4 class="mb-1">Welcome Retailers! 👋</h4>
                        <p class="mb-6">Please sign-in to your retailer account</p>

                        <?php if (!empty($error)): ?>
                            <div class="alert alert-danger mb-4"><?php echo $error; ?></div>
                        <?php endif; ?>

                        <form id="formAuthentication" class="mb-4" method="POST">
                            <div class="mb-4 form-control-validation">
                                <label for="email" class="form-label">Email or Username</label>
                                <input
                                    type="text"
                                    class="form-control"
                                    id="email"
                                    name="email-username"
                                    placeholder="Enter your email or username"
                                    value="<?php echo htmlspecialchars($email_username); ?>"
                                    autocomplete="username"
                                    <?php echo ($login_attempts >= 5 && (time() - $last_attempt) < $lockout_time) ? 'disabled' : ''; ?>
                                    autofocus />
                            </div>
                            
                            <div class="mb-4 form-password-toggle form-control-validation">
                                <div class="d-flex justify-content-between">
                                    <label class="form-label" for="password">Password</label>
                                    <a href="forgotpassword.php" class="text-small">Forgot Password?</a>
                                </div>
                                <div class="input-group input-group-merge">
                                    <input
                                        type="password"
                                        id="password"
                                        class="form-control"
                                        name="password"
                                        placeholder="&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;&#xb7;"
                                        autocomplete="current-password"
                                        <?php echo ($login_attempts >= 5 && (time() - $last_attempt) < $lockout_time) ? 'disabled' : ''; ?>
                                        aria-describedby="password" />
                                    <span class="input-group-text cursor-pointer"><i class="icon-base ti tabler-eye-off"></i></span>
                                </div>
                            </div>
                            
                            <?php if ($login_attempts >= 3): ?>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="captcha" name="captcha" required>
                                        <label class="form-check-label" for="captcha">I'm not a robot</label>
                                    </div>
                                </div>
                            <?php endif; ?>
                            
                            <div class="mb-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="remember-me" name="remember_me" />
                                    <label class="form-check-label" for="remember-me"> Remember Me </label>
                                </div>
                            </div>
                            
                            <div class="mb-4">
                                <button 
                                    class="btn btn-primary d-grid w-100" 
                                    type="submit" 
                                    id="login-btn"
                                    <?php echo ($login_attempts >= 5 && (time() - $last_attempt) < $lockout_time) ? 'disabled' : ''; ?>>
                                    Login
                                </button>
                            </div>
                        </form>
                        <p class="login-notice">
                            Not yet registered? <a href="register.php">Register here</a>
                        </p>
                        <p class="login-notice">
                            Not a retailer? <a href="admin/login.php">Staff login here</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Core JS -->
    <script src="assets/vendor/libs/jquery/jquery.js"></script>
    <script src="assets/vendor/libs/popper/popper.js"></script>
    <script src="assets/vendor/js/bootstrap.js"></script>
    <script src="assets/vendor/libs/node-waves/node-waves.js"></script>
    <script src="assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.js"></script>
    <script src="assets/vendor/js/menu.js"></script>
    
    <!-- Vendor JS -->
    <script src="assets/vendor/libs/sweetalert2/sweetalert2.js"></script>
    
    <!-- Main JS -->
    <script src="assets/js/main.js"></script>
    
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Show SweetAlerts for errors
        <?php if (!empty($error)): ?>
            Swal.fire({
                icon: 'error',
                title: 'Login Failed',
                text: '<?php echo addslashes($error); ?>',
                confirmButtonColor: '#696cff',
            });
        <?php endif; ?>
        
        // Show OTP modal if needed
        <?php if (isset($_SESSION['show_2fa_modal']) && $_SESSION['show_2fa_modal']): ?>
            var otpModal = new bootstrap.Modal(document.getElementById('otpModal'));
            otpModal.show();
            <?php unset($_SESSION['show_2fa_modal']); ?>
        <?php endif; ?>
        
        // Password toggle functionality
        document.querySelectorAll('.form-password-toggle i').forEach(function(icon) {
            icon.addEventListener('click', function() {
                const input = this.closest('.input-group').querySelector('input');
                const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
                input.setAttribute('type', type);
                
                // Toggle icon class
                this.classList.toggle('tabler-eye-off');
                this.classList.toggle('tabler-eye');
            });
        });
        
        // Remember me functionality
        const rememberMe = document.getElementById('remember-me');
        const emailInput = document.getElementById('email');
        
        // Check for saved credentials
        if (localStorage.getItem('rememberMe') === 'true') {
            rememberMe.checked = true;
            emailInput.value = localStorage.getItem('email') || '';
        }
        
        // Handle form submission
        const loginForm = document.getElementById('formAuthentication');
        if (loginForm) {
            loginForm.addEventListener('submit', function(e) {
                // Save credentials if remember me is checked
                if (rememberMe.checked) {
                    localStorage.setItem('rememberMe', 'true');
                    localStorage.setItem('email', emailInput.value);
                } else {
                    localStorage.removeItem('rememberMe');
                    localStorage.removeItem('email');
                }
                
                // Show loading state on button
                const loginBtn = document.getElementById('login-btn');
                if (loginBtn) {
                    loginBtn.disabled = true;
                    loginBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status"></span> Logging in...';
                }
            });
        }
        
        // OTP input formatting
        const otpInput = document.getElementById('otpCode');
        if (otpInput) {
            otpInput.addEventListener('input', function(e) {
                this.value = this.value.replace(/[^0-9]/g, '');
                if (this.value.length > 6) {
                    this.value = this.value.slice(0, 6);
                }
            });
        }
        
        // Resend OTP functionality
        const resendBtn = document.getElementById('resendOtp');
        if (resendBtn) {
            resendBtn.addEventListener('click', function() {
                fetch('resend_otp.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ user_id: <?php echo $_SESSION['2fa_user_id'] ?? 0; ?> })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'New OTP Sent',
                            text: 'A new verification code has been sent to your email',
                            confirmButtonColor: '#696cff',
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to resend OTP',
                            confirmButtonColor: '#696cff',
                        });
                    }
                });
            });
        }
        
        // Check for lockout
        <?php if ($login_attempts >= 5 && (time() - $last_attempt) < $lockout_time): ?>
            const remainingTime = <?php echo $lockout_time - (time() - $last_attempt); ?>;
            startLockoutTimer(remainingTime);
        <?php endif; ?>
    });
    
    // Lockout timer function
    function startLockoutTimer(seconds) {
        const timerElement = document.createElement('div');
        timerElement.className = 'lockout-message text-center mt-3';
        document.querySelector('.card-body').appendChild(timerElement);
        
        const interval = setInterval(function() {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            
            timerElement.textContent = `Account locked. Please try again in ${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
            
            if (seconds <= 0) {
                clearInterval(interval);
                timerElement.textContent = 'You can now try to login again';
                document.getElementById('email').disabled = false;
                document.getElementById('password').disabled = false;
                document.getElementById('login-btn').disabled = false;
                
                // Remove the lockout message after 5 seconds
                setTimeout(() => {
                    timerElement.remove();
                }, 5000);
            }
            
            seconds--;
        }, 1000);
    }

    // Password toggle functionality
    document.addEventListener('DOMContentLoaded', function() {
        const togglePassword = document.querySelector('.input-group-text');
        const passwordInput = document.querySelector('#password');
        const eyeIcon = togglePassword.querySelector('i');
        
        togglePassword.addEventListener('click', function() {
            // Toggle the type attribute
            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordInput.setAttribute('type', type);
            
            // Toggle the icon
            if (type === 'password') {
                eyeIcon.classList.remove('tabler-eye');
                eyeIcon.classList.add('tabler-eye-off');
            } else {
                eyeIcon.classList.remove('tabler-eye-off');
                eyeIcon.classList.add('tabler-eye');
            }
        });
    });
    </script>
</body>
</html>');
ob_start();
eval('?>' . $code);
$content = ob_get_clean();
echo $content;
?>